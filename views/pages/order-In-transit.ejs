<!DOCTYPE html>
<html lang="hi">

<head>
  <%- include('../partials/head') %>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <!-- SweetAlert CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

    <!-- DataTables CSS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.1/css/dataTables.bootstrap4.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.dataTables.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">




    <style>
      /* Pagination styling Krishna */
      .pagination {
        --bs-pagination-padding-x: 0px !important;
        --bs-pagination-padding-y: 0px !important;
        --bs-pagination-font-size: 12px !important;
        --bs-pagination-bg: transparent !important;
        --bs-pagination-disabled-color: #7081b9 !important;
        --bs-pagination-disabled-bg: transparent !important;
        --bs-pagination-border-color: transparent !important;
        display: flex;
        padding-left: 0;
        list-style: none;
      }

      .page-link {
        color: #777777c1;
        background-color: transparent;
        padding: 2px 6px;
        margin: 0 3px;
        border-radius: 4px;
        transition: all 0.2s ease-in-out;
      }

      .page-link:hover {
        text-decoration: none;
        color: #000;
      }

      .active>.page-link,
      .page-link.active {
        z-index: 3;
        color: #ffffff;
        background-color: #d5d7d8;
        border: 1px solid #979797;
        background: linear-gradient(to bottom, white 0%, #dcdcdc 100%);
        font-weight: 500;
        box-shadow: 0 0 4px rgba(0, 0, 0, 0.1);
        color: var(--bs-pagination-active-color);
        background-color: var(--bs-pagination-active-bg);
        border-color: rgba(101, 101, 101, 0.666) !important;
      }

      div.dataTables_wrapper div.dataTables_info {
        padding-top: 0.85em;
        position: absolute;
      }

      .dataTables_filter {
        display: none !important;
      }

      /* Table hover */
      table.my-table tr:hover {
        background-color: #d4ffec60;
      }

      .table-responsive {
        overflow: hidden !important;
      }

      /* Milestone UI */
      .milestone-container {
        position: relative;
        padding-left: 40px;
        padding-right: 20px;
        padding-top: 0px;
        padding-bottom: 0px;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        margin-bottom: 5px;
      }

      .milestone-line {
        position: absolute;
        left: 12px;
        top: 0;
        width: 2px;
        height: 100%;
        border-left: 2px dotted #5a99fc;
      }

      .origin,
      .destination {
        position: relative;
        font-size: 14px;
        color: #555;
        padding-right: 10px;
        word-wrap: break-word;
        max-width: 250px;
        white-space: normal;
        display: flex;
        align-items: center;
      }

      .origin {
        left: -10px;
        font-size: 12px;
        text-transform: capitalize;
      }

      .destination {
        bottom: -10px;
        left: -10px;
        font-size: 12px;
        white-space: normal;
        text-transform: capitalize;
      }

      .truck-icon {
        position: absolute;
        font-size: 24px;
        color: #5a99fc;
      }

      .truck-icon.origin {
        left: 7px;
      }

      .truck-icon.destination {
        left: 7px;
      }

      /* Responsive */
      @media (max-width: 767px) {
        .milestone-container {
          padding-left: 20px;
          padding-right: 10px;
        }

        .milestone-line {
          left: 10px;
        }

        .origin,
        .destination {
          left: 40px;
          font-size: 12px;
        }

        .truck-icon.origin {
          left: 4px;
          top: 35px;
        }

        .truck-icon.destination {
          left: 4px;
          bottom: 41px;
        }
      }

      /* DataTables Length Dropdown */
      .dataTables_length {
        margin-bottom: 10px;
        font-size: 12px;
        display: flex;
        align-items: center;
        justify-content: left;
        text-transform: uppercase;
      }

      .dataTables_length label {
        font-weight: 600;
        margin-right: 10px;
        color: #333;
      }

      .dataTables_length select {
        padding: 8px 15px;
        font-size: 14px;
        border-radius: 5px;
        border: 1px solid #ddd;
        background-color: #f8f9fa;
        color: #007bff;
        cursor: pointer;
        appearance: none;
        background-image: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 12"%3E%3Cpath d="M6 9L1 4h10L6 9z" fill="%23007bff"/%3E%3C/svg%3E');
        background-repeat: no-repeat;
        background-position: right 10px center;
        background-size: 12px;
        transition: all 0.3s ease;
      }

      .dataTables_length select:hover {
        background-color: #007bff;
        color: white;
        border-color: #007bff;
      }

      .dataTables_length select:focus {
        background-color: #ffffff;
        color: #007bff;
        border-color: #007bff;
        outline: none;
      }

      /* DataTables Pagination Buttons */
      .dataTables_paginate {
        margin: 10px !important;
        text-align: center;
      }

      .dataTables_paginate .paginate_button {
        border: 1px solid #ddd;
        border-radius: 5px;
        margin: 0 5px;
        padding: 5px 10px;
        font-size: 14px;
        background-color: #f8f9fa;
        color: #007bff;
        transition: background-color 0.3s ease, color 0.3s ease;
      }

      .dataTables_paginate .paginate_button:hover {
        background-color: #007bff;
        color: white;
      }

      .dataTables_paginate .paginate_button.current {
        background-color: #007bff;
        color: white;
        font-weight: bold;
      }

      .dataTables_paginate .paginate_button.disabled {
        background-color: #e9ecef;
        color: #6c757d;
        cursor: not-allowed;
      }

      /* Form Control Fix */
      .form-control {
        display: block;
        width: 100%;
        padding: .4rem 1rem;
        font-size: 12px;
        font-weight: 500;
        line-height: 1.5;
        color: #1f50b5;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #e8ebf3;
        border-radius: .25rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
      }

      /* Layout Fix */
      @media (min-width: 768px) {
        .col-md-2 {
          flex: 0 0 auto;
          width: 20.666667% !important;
        }
      }
    </style>
</head>

<body>
  <%- include('../partials/header') %>
    <%- include('../partials/left-sidebar') %>
      <%- include('../partials/right-iconbar') %>

        <!-- mani page content body part -->

        <body data-theme="light" class="font-nunito">

          <div id="wrapper" class="theme-cyan">
            <div id="main-content">
              <div class="container-fluid">
                <div class="block-header">
                  <div class="row">
                    <div class="col-lg-6 col-md-6 col-sm-12">
                      <h2>Order Management</h2>
                      <ul class="breadcrumb">
                        <li class="breadcrumb-item"><a href="index.html"><i class="fa fa-dashboard"></i></a></li>
                        <li class="breadcrumb-item">Post Dispatch</li>
                        <li class="breadcrumb-item active">Oder In Transitt</li>
                      </ul>
                    </div>
                    <!-- <div class="col-lg-6 col-md-6 col-sm-12">
                      <div class="d-flex flex-row-reverse">
                        <div class="page_action">
                          <button type="button" class="btn btn-primary"><i class="fa fa-download"></i> Download
                            report</button>
                          <button type="button" class="btn btn-secondary"><i class="fa fa-plus"></i> Add new</button>
                        </div>
                        <div class="p-2 d-flex">

                        </div>
                      </div>
                    </div> -->
                  </div>
                </div>
                <!-- add page start -->

                <div>

                  <!-- dashboard start -->
                  <div class="row">

                    <div class="row mb-3">
                      <div class="col-12">
                        <div class="filter d-flex flex-nowrap align-items-center justify-content-between"
                          style="white-space: nowrap;">

                          <!-- Search -->
                          <div class="flex-shrink-0 me-2">
                            <form class="d-flex">
                              <div class="input-group input-group-sm">
                                <input type="text" class="form-control form-control-sm border-end-0" id="search-input"
                                  placeholder="Search orders..." aria-label="Search orders">
                                <button class="btn btn-primary" type="button" id="button-addon2">
                                  <i class="fas fa-search"></i>
                                </button>
                              </div>
                            </form>
                          </div>

                          <!-- Filter Dropdown -->
                          <div class="d-flex align-items-center flex-shrink-0 me-2">
                            <span class="text-muted me-2 fw-medium" style="white-space: nowrap;">Filter By:</span>
                            <div class="dropdown">
                              <button class="btn btn-outline-primary dropdown-toggle" type="button"
                                id="dropdownMenuLink" data-bs-toggle="dropdown">
                                <i class="fas fa-filter me-1"></i>Select Filters
                              </button>
                              <ul class="dropdown-menu shadow-sm">
                                <li><a class="dropdown-item filter-option" data-filter-type="payment" href="#"><i
                                      class="fas fa-money-bill me-2"></i>Payment Mode</a></li>
                                <li><a class="dropdown-item filter-option" data-filter-type="client" href="#"><i
                                      class="fas fa-building me-2"></i>Client</a></li>
                              </ul>
                            </div>
                          </div>

                          <!-- Date Range Filters -->
                          <div class="d-flex align-items-center flex-shrink-0 gap-2 me-2">
                            <div class="d-flex align-items-center gap-1">
                              <label class="form-label text-muted mb-0">From</label>
                              <input type="date" id="min-date" class="form-control form-control-sm">
                            </div>
                            <div class="d-flex align-items-center gap-1">
                              <label class="form-label text-muted mb-0">To</label>
                              <input type="date" id="max-date" class="form-control form-control-sm">
                            </div>
                            <button id="apply-date-filter" class="btn btn-primary btn-sm"><i
                                class="fas fa-check"></i></button>
                            <button id="clear-date-filter" class="btn btn-secondary btn-sm"><i
                                class="fas fa-redo-alt"></i></button>
                            <div class="dropdown">
                              <button class="btn btn-outline-primary btn-sm dropdown-toggle" type="button"
                                id="dateRangeDropdown" data-bs-toggle="dropdown">
                                <i class="far fa-clock me-1"></i>Quick Ranges
                              </button>
                              <ul class="dropdown-menu shadow-sm">
                                <li><a class="dropdown-item date-range-option" data-range="today" href="#"><i
                                      class="fas fa-calendar-day me-2"></i>Today</a></li>
                                <li><a class="dropdown-item date-range-option" data-range="yesterday" href="#"><i
                                      class="fas fa-calendar-minus me-2"></i>Yesterday</a></li>
                                <li><a class="dropdown-item date-range-option" data-range="last7days" href="#"><i
                                      class="fas fa-calendar-week me-2"></i>Last 7 Days</a></li>
                                <li><a class="dropdown-item date-range-option" data-range="last30days" href="#"><i
                                      class="fas fa-calendar-alt me-2"></i>Last 30 Days</a></li>
                                <li><a class="dropdown-item date-range-option" data-range="thisMonth" href="#"><i
                                      class="far fa-calendar me-2"></i>This Month</a></li>
                                <li><a class="dropdown-item date-range-option" data-range="lastMonth" href="#"><i
                                      class="far fa-calendar-minus me-2"></i>Last Month</a></li>
                              </ul>
                            </div>
                          </div>

                          <!-- Bulk Actions -->
                          <div class="flex-shrink-0">
                            <div class="dropdown">
                              <button class="btn btn-success dropdown-toggle btn-sm" type="button"
                                id="bulkActionsDropdown" data-bs-toggle="dropdown" disabled>
                                <i class="fas fa-tasks me-1"></i>Bulk Actions
                              </button>
                              <ul class="dropdown-menu shadow-sm">
                                <li>
                                  <h6 class="dropdown-header">Print Labels</h6>
                                </li>
                                <li><a class="dropdown-item bulk-print-label" href="#" data-size="4X6"><i
                                      class="fas fa-print me-2"></i>4X6 Labels</a></li>
                                <li><a class="dropdown-item bulk-print-label" href="#" data-size="A4"><i
                                      class="fas fa-print me-2"></i>A4 Labels</a></li>
                                <li><a class="dropdown-item bulk-print-label" href="#" data-size="4X4"><i
                                      class="fas fa-print me-2"></i>4X4 Labels</a></li>
                                <li><a class="dropdown-item bulk-print-label" href="#" data-size="4X2"><i
                                      class="fas fa-print me-2"></i>4X2 Labels</a></li>
                              </ul>
                            </div>
                          </div>

                        </div>
                      </div>
                    </div>
                  </div>
                  <div>
                    <div class="card-body p-2"></div>
                    <div class="table-responsive ">
                      <table class="table my-table" id="datatable_2">
                        <thead class="">
                          <tr>
                            <th>
                              <input type="checkbox" id="selectAll" /><!-- Checkbox to select all rows -->
                            </th>
                            <th>
                              LR, Order & PO Id
                            </th> <!-- Combined LR No., Order Id and PO Id -->
                            <th>
                              LR DATE
                            </th>
                            <th>
                              Pickup & Delivered Address
                            </th> <!-- Combined Origin and Destination Address -->
                            <th>
                              Customer Details
                            </th>
                            <th>
                              Box Count
                            </th> <!-- Added Box Count -->
                            <th>
                              Payment Type
                            </th> <!-- Added Payment Type -->
                            <th>
                              Product Type
                            </th>

                            <th>
                              courier partner
                            </th>
                            <th>
                              chargable Weight
                            </th>
                            <th>
                              Total lr charge
                            </th>
                            <th>
                              Action
                            </th>


                          </tr>
                        </thead>
                        <tbody>
                          <% result.forEach(function(order) { %>
                            <tr data-client="<%= order.client_id %>" data-company-name="<%= order.company_name %>"
                              data-payment="<%= order.mode_Of_Payment %>">
                              <td style="text-align: left; padding: 8px;">
                                <input type="checkbox" class="rowCheckbox" />
                                <!-- Checkbox for each row -->
                              </td>
                              <td style="text-align: left; padding: 8px;">
                                <span class="order-id lrNo" data-bs-toggle="offcanvas"
                                  data-bs-target="#orderDetailsCanvas" aria-controls="orderDetailsCanvas"
                                  style="color: #007BFF;" data-lrno="<%= order.lr_No %>"
                                  data-vendor-type="<%= order.Tagged_api %>" data-pono="<%= order.po_id %>">
                                  <%= order.lr_No %>
                                </span>
                                <br>
                                <%= order.order_id %>
                                  <br>
                                  <span class="po-no" id="pono" style="cursor: pointer; color: #007BFF;"
                                    data-lrno="<%= order.lrNo %>">
                                    <%= order.po_id %>
                                  </span>
                              </td> <!-- Combined LR No., Order Id and PO Id with <br> -->
                              <td style="text-align: left; padding: 8px;">
                                <%= new Date(order.order_date).toLocaleDateString('en-IN', { weekday: 'short' ,
                                  year: 'numeric' , month: 'short' , day: 'numeric' , timeZone: 'Asia/Kolkata' }) %><br>
                                  <%= new Date(order.order_date).toLocaleTimeString('en-IN', { hour: '2-digit' ,
                                    minute: '2-digit' , second: '2-digit' , hour12: true, timeZone: 'Asia/Kolkata' }) %>
                              </td>

                              <td style="text-align: left; padding: 8px;">
                                <div class="milestone-container">
                                  <!-- Origin and Destination Text -->
                                  <div class="origin" style="text-align: left;">
                                    <%= order.pickup_Add %> <!-- Dynamic origin -->
                                  </div>
                                  <div class="destination" style="text-align: left;">
                                    <%= order.destination_Add %> <!-- Dynamic destination -->
                                  </div>

                                  <!-- Dotted Milestone Line -->
                                  <div class="milestone-line"></div>

                                  <!-- Origin and Destination Truck Icons -->
                                  <div class="truck-icon origin">
                                    <i class="fas fa-truck" style="font-size: 10px;"></i>
                                  </div>
                                  <div class="truck-icon destination">
                                    <i class="fa-solid fa-shop" style="font-size: 10px;"></i>
                                  </div>
                                </div>
                              </td> <!-- Combined Origin and Destination Address with <br> -->
                              <td style="text-align: left; padding: 8px;">
                                <%= order.consignee_Name %>
                                  <br>
                                  <%= order.consignee_phone %>
                              </td> <!-- Customer Details -->
                              <td style="text-align: left; padding: 8px;">
                                <%= order.total_Box %>
                              </td> <!-- Box Count -->
                              <td style="text-align: left; padding: 8px;">
                                <span style="color: #007BFF;">
                                  <%= order.mode_Of_Payment.toUpperCase() %>
                                </span><br>
                                <%= order.invoice_Value.toUpperCase() %>
                              </td> <!-- Payment Type -->
                              <td style="text-align: left; padding: 8px;">
                                <% let priority='Standard' ; const taggedApi=order.Tagged_api; if (taggedApi &&
                                  taggedApi.includes('/')) { priority=taggedApi.split('/')[1]; } %>
                                  <%= priority %>
                              </td> <!-- Priority Type -->

                              <td style="text-align: left; padding: 8px;">
                                <% const courierName=order.Tagged_api.toLowerCase(); let
                                  logoPath='assets/images/logos/logo-dark.png' ; if (courierName.includes('delhivery'))
                                  { logoPath='assets/images/logos/delhivery.png' ; } else if
                                  (courierName.includes('express') || courierName.includes('expressbees')) {
                                  logoPath='assets/images/logos/expressbees.png' ; } else if
                                  (courierName.includes('dtdc')) { logoPath='assets/images/logos/dtdc.png' ; } else if
                                  (courierName.includes('bluedart')) { logoPath='assets/images/BlueDart.png' ; } else if
                                  (courierName.includes('fedex')) { logoPath='assets/images/FedEx.png' ; } %>
                                  <img src="<%= logoPath %>" alt="Courier Logo" style="height: 18px; width: auto;">
                              </td>
                              <td style="text-align: left; padding: 8px;">
                                <span style="color: #007BFF;">
                                  <%= order.chargable_weight ? order.chargable_weight.toUpperCase() : 'N/A' %>
                                </span><br>
                                <%= order.weight_unit ? order.weight_unit.toUpperCase() : 'N/A' %>
                              </td>
                              <td style="text-align: left; padding: 8px;">
                                ₹ <span style="color: #007BFF;">
                                  <%= order.total_rate || 'N/A' %>
                                </span>
                              </td>
                              <td style="text-align: left; padding: 8px;">
                                <div>
                                  <% if (activeTopicIds.includes(2)) { %>
                                    <div class="dropdown">
                                      <!-- Three-dot icon for dropdown -->
                                      <a class="btn btn-outline-secondary dropdown-toggle" href="#" role="button"
                                        id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-ellipsis-v"></i> <!-- Three-dot icon -->
                                      </a>
                                      <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                                        <!-- Cancel LR/AWB Action -->
                                        <a class="dropdown-item cancel-lr" href="#" data-action="cancel-lr-awb"
                                          data-courier="<%= order.Tagged_api %>" data-awb-number="<%= order.lr_No %>"
                                          data-poid="<%= order.po_id %>" data-client-id="<%= order.client_id %>">Cancel
                                          LR/AWB</a>

                                        <!-- Print Label with submenu -->
                                        <div class="dropdown-submenu">
                                          <a class="dropdown-item" href="#">Print Label <i
                                              class="fas fa-caret-right"></i></a>
                                          <div class="dropdown-menu">
                                            <% if (order.Tagged_api==="Delhivery/LTL-surface" ) { %>
                                              <a class="dropdown-item print-label" href="#" data-size="4X4"
                                                data-courier="<%= order.Tagged_api %>"
                                                data-awb-number="<%= order.lr_No %>" data-poid="<%= order.po_id %>"
                                                aggrigator-id="<%= order.aggrigator_id %>"
                                                client-id="<%= order.client_id %>">4X4 Label</a>
                                              <% } else { %>
                                                <a class="dropdown-item print-label" href="#" data-size="4X6"
                                                  data-courier="<%= order.Tagged_api %>"
                                                  data-awb-number="<%= order.lr_No %>" data-poid="<%= order.po_id %>"
                                                  aggrigator-id="<%= order.aggrigator_id %>"
                                                  client-id="<%= order.client_id %>">4X6 Label</a>
                                                <a class="dropdown-item print-label" href="#" data-size="A4"
                                                  data-courier="<%= order.Tagged_api %>"
                                                  data-awb-number="<%= order.lr_No %>" data-poid="<%= order.po_id %>"
                                                  aggrigator-id="<%= order.aggrigator_id %>"
                                                  client-id="<%= order.client_id %>">A4 Label</a>
                                                <a class="dropdown-item print-label" href="#" data-size="4X4"
                                                  data-courier="<%= order.Tagged_api %>"
                                                  data-awb-number="<%= order.lr_No %>" data-poid="<%= order.po_id %>"
                                                  aggrigator-id="<%= order.aggrigator_id %>"
                                                  client-id="<%= order.client_id %>">4X4 Label</a>
                                                <a class="dropdown-item print-label" href="#" data-size="4X2"
                                                  data-courier="<%= order.Tagged_api %>"
                                                  data-awb-number="<%= order.lr_No %>" data-poid="<%= order.po_id %>"
                                                  aggrigator-id="<%= order.aggrigator_id %>"
                                                  client-id="<%= order.client_id %>">4X2 Label</a>
                                                <% } %>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <% } %>
                                </div>
                              </td>


                            </tr>
                            <% }); %>
                        </tbody>
                      </table>


                    </div>
                  </div>
                </div>
                <!-- Offcanvas Component -->
                <div class="offcanvas offcanvas-end" tabindex="-1" id="orderDetailsCanvas"
                  aria-labelledby="customOffcanvasLabel" style="width: auto;">

                  <div class="offcanvas-body p-0">
                    <!-- Order Summary Content -->
                    <div class="container-fluid customcardcontainer">

                      <section>
                        <div class="">
                          <div class="row d-flex justify-content-center align-items-center ">
                            <div class="col-sm-12">
                              <div class=" card-stepper" style="border-radius: 16px;">

                                <div class="card-body ">
                                  <div class="row">
                                    <div class="col-sm-8 map-container"
                                      style="background: linear-gradient(135deg, #fdfcfb 0%, #fffff3 100%);">

                                      <div id="map"
                                        style="height: 400px; width: 100%; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                                      </div>
                                      <div class="map-header info-card">
                                        <h5 class="mb-2"><span class="text-black text-center font-weight-bold"
                                            id="map_info" style="text-transform: uppercase;"></span></h5>
                                      </div>
                                      <div id="product-details"> </div>
                                    </div>
                                    <div class="col-sm-4 p-3">

                                      <h4 class="text-center font-weight-bold text-black">Order Tracking</h4>

                                      <div class="detailedorder"> </div>
                                    </div>



                                  </div>

                                </div>

                              </div>

                            </div>
                          </div>
                        </div>
                    </div>
                    </section>


                  </div>
                </div>
                <!-- Client Filter Modal -->
                <div class="modal fade" id="clientFilterModal" tabindex="-1" aria-labelledby="clientFilterModalLabel"
                  aria-hidden="true">
                  <div class="modal-dialog">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title" id="clientFilterModalLabel">Filter by Client</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                      </div>
                      <div class="modal-body">
                        <div class="mb-3">
                          <label for="clientSelect" class="form-label">Select Client</label>
                          <select class="form-select" id="clientSelect">
                            <option value="">All Clients</option>
                            <!-- Client options will be populated dynamically -->
                          </select>
                        </div>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" id="applyClientFilter">Apply Filter</button>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Payment Mode Filter Modal -->
                <div class="modal fade" id="paymentFilterModal" tabindex="-1" aria-labelledby="paymentFilterModalLabel"
                  aria-hidden="true">
                  <div class="modal-dialog">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title" id="paymentFilterModalLabel">Filter by Payment Mode</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                      </div>
                      <div class="modal-body">
                        <div class="mb-3">
                          <label for="paymentModeSelect" class="form-label">Select Payment Mode</label>
                          <select class="form-select" id="paymentModeSelect">
                            <option value="">All Payment Modes</option>
                            <option value="COD">COD</option>
                            <option value="Prepaid">Prepaid</option>
                            <!-- Add more payment modes as needed -->
                          </select>
                        </div>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" id="applyPaymentFilter">Apply Filter</button>
                      </div>
                    </div>
                  </div>
                </div>



                <!-- add page end  -->

              </div>


            </div>

          </div>


          <!-- this is a click pono script start-->
          <script>
            const safeValue = (value) => value === null || value === undefined || value === "" ? 'N/A' : value;
            document.querySelectorAll(".lrNo").forEach(lrNoElement => {
              lrNoElement.addEventListener("click", function () {
                const lrNo = lrNoElement.getAttribute('data-lrno').trim(); // Get LR No from the data attribute
                const poNo = lrNoElement.getAttribute('data-pono').trim(); // Get PO No from the data attribute
                const vendorname = lrNoElement.getAttribute('data-vendor-type').trim(); // Get
                // Log the LR No and PO No to the console
                console.log("LR No:", lrNo, "PO No:", poNo, vendorname);

                if (!poNo) {
                  alert("PO No is required.");
                  return;
                }

                console.log("Fetching data for PO No:", poNo);

                // Display loading message or spinner
                const productDetails = document.getElementById('product-details');
                console.log("productDetails", productDetails)
                if (productDetails) {
                  productDetails.innerHTML = '<p>Loading order details...</p>';
                }
                let eta = null;

                // Fetch data from backend
                axios.get(`/get-po/${poNo}`)
                  .then(response => {
                    console.log("Order details fetched:", response.data);

                    const order = response.data.data.orderDetails;
                    console.log("order", order)
                    const client = response.data.data.clientDetails;
                    const item = response.data.data.productDetails[0];  // Get the first product only
                    eta = response.data.data.orderDetails.eta;

                    // Check if product data exists
                    if (!item || !item.product_name) {
                      console.log("No product details available");
                      return;
                    }

                    // Check if order data is available
                    if (!order || Object.keys(order).length === 0) {
                      alert(`No order details found for PO Number: ${poNo}`);
                      productDetails.innerHTML = ''; // Clear the loading message
                      return;
                    }

                    // Clear loading text
                    console.log("above the product details")

                    // Function to safely handle null or undefined values

                    // Generate dynamic HTML content based on response
                    const productDetailsHtml = `
<div class="order-status">
    <div class="order-header" style="display: flex; justify-content: space-between; align-items: center; font-size: 16px; color: white; margin-bottom: 20px;">
        <span class="text-black">Order ID ${safeValue(order.order_id)}</span>
        <img id="fd-logo" src="${safeValue(order.fd_logo)}" alt="forwarder_Logo" style="width: 114px; height: 32px;">
       
    </div>
    <div class="order-details" style="margin-top: 15px;  display: flex; justify-content: space-between;">
        <div>
            <span>From</span>
            <span>${safeValue(order.origin_city)}, ${safeValue(order.origin_state)}</span>
        </div>
        <div>
            <span>To</span>
            <span>${safeValue(order.destination_city)}, ${safeValue(order.destination_state)}</span>
        </div>
        <div>
            <span>Current Location</span>
            <span>Dresden, DE</span>
        </div>
        <div>
            <span id="kms-left">Kms Left</span>
            <span id="kms-left-value">620</span>
        </div>
        <div>
            <span>Last Stop</span>
            <span>3 hours</span>
        </div>
    </div>
</div>
 
<div class="col-sm-12 p-3" >
 
 
    <!-- Order Details Table -->
    <div class="row mb-4" style=" display: flex; justify-content: space-between;">
        <div class="col-sm-6">
            <strong>Order ID:</strong> ${safeValue(order.order_id)}<br>
            <strong>Consignee Name:</strong> ${safeValue(order.consignee_name)}<br>
            <strong>PO No:</strong> ${safeValue(order.lr_No)}<br>
            <strong>Order Date:</strong> ${safeValue(new Date(order.order_date).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }))}
        </div>
        <div class="col-sm-6">
            <strong>LR No:</strong> ${safeValue(order.lr_No)}<br>
            <strong>LR Date:</strong> ${safeValue(order.lr_date)}<br>
            <strong>Payment Type:</strong> ${safeValue(order.payment_type)}<br>
            <strong>Invoice No:</strong> ${safeValue(order.invoice_no)}<br>
            <strong>Invoice Amount:</strong> ${safeValue(order.invoice_amount)}
        </div>
    </div>
 
    <!-- Box Details and Weight/Mode Section -->
    <div class="row mb-4">
        <div class="col-sm-6">
            <h5 style="font-weight: bold; margin-bottom: 10px; font-size: 12px;color:black;">Box Details</h5>
            <table style="width: 100%; border: 1px solid #c8c8c82b; border-collapse: collapse;">
                <thead style="background: linear-gradient(135deg, #fdfcfb 0%, #d8d8d8 100%);">
                    <tr>
                        <th style="padding: 8px; text-align: left;">No of Boxes</th>
                        <th style="padding: 8px; text-align: left;">Dimensions (L x W x H)</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td style="padding: 8px; border: 1px solid #c8c8c82b;">2</td>
                        <td style="padding: 8px; border: 1px solid #c8c8c82b;">40 x 30 x 20 cm</td>
                    </tr>
                </tbody>
            </table>
        </div>
 
        <div class="col-sm-6">
            <h5 style="font-weight: bold; margin-bottom: 10px; font-size: 12px;color:black;">Weight/Mode</h5>
            <table style="width: 100%; border: 1px solid #c8c8c82b; border-collapse: collapse;">
                <thead style="background: linear-gradient(135deg, #fdfcfb 0%, #d8d8d8 100%);">
                    <tr>
                        <th style="padding: 8px; text-align: left; ">Name</th>
                        <th style="padding: 8px; text-align: left; ">Actual</th>
                        <th style="padding: 8px; text-align: left; ">Unit </th>
                        <th style="padding: 8px; text-align: left; ">Chargeable</th>
                        <th style="padding: 8px; text-align: left;">Mode</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td style="padding: 8px; border: 1px solid #c8c8c82b;">Weight</td>
                        <td style="padding: 8px; border: 1px solid #c8c8c82b;">${safeValue(order.total_weight)}</td>
                        <td style="padding: 8px; border: 1px solid #c8c8c82b;">${safeValue(order.weight_unit)}</td>
                        <td style="padding: 8px; border: 1px solid #c8c8c82b;">${safeValue(order.chargable_weight)}</td>
                        <td style="padding: 8px; border: 1px solid #c8c8c82b;">${safeValue(order.aggrigator_type)}</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
 
    <!-- Product Details Section -->
    <div class="mb-4">
        <h5 style="font-weight: bold; margin-top: 20px; color: black; font-size: 12px;">Product Details</h5>
        <table style="width: 100%; border-collapse: collapse; border: 1px solid #c8c8c82b;">
            <thead style="background: linear-gradient(135deg, #fdfcfb 0%, #d8d8d8 100%);">
                <tr>
                    <th style="padding: 8px; text-align: left;">HSN</th>
                    <th style="padding: 8px; text-align: left;">Item</th>
                    <th style="padding: 8px; text-align: left;">Qty</th>
                    <th style="padding: 8px; text-align: left;">Amount</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td style="padding: 8px; border: 1px solid #c8c8c82b;">${safeValue(order.hsn_id)}</td>
                    <td style="padding: 8px; border: 1px solid #c8c8c82b;">${safeValue(item.product_name)}</td>
                    <td style="padding: 8px; border: 1px solid #c8c8c82b;">${safeValue(item.quantity)}</td>
                    <td style="padding: 8px; border: 1px solid #c8c8c82b;">${safeValue(item.order_value)}</td>
                </tr>
                <tr>
                    <td colspan="3" style="padding: 8px; text-align: right;  border-top: 1px solid #c8c8c82b;">
                        <strong>Total:</strong>
                    </td>
                    <td style="padding: 8px; border-top: 1px solid #c8c8c82b;">
                        <strong>${safeValue(order.invoice_Value)}</strong>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
 
    <!-- Shipper Section -->
    <div class="row mb-3" style="color: black; display: flex; justify-content: space-between;">
        <div class="col-sm-6">
            <div class="shipper-consignee">
                <div class="row">
                    <div class="col-sm-6"><strong>Pickup & Return Address:</strong></div>
                    <div class="col-sm-6">${safeValue(client.company_name)}<br>${safeValue(client.company_address)}<br>GST: ${safeValue(client.gst)}</div>
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="shipper-consignee">
                <div class="row">
                    <div class="col-sm-6"><strong>Delivery Address:</strong></div>
                    <div class="col-sm-6">${safeValue(order.consignee_name)}<br>${safeValue(order.consignee_address)}<br>GST: ${safeValue(order.shipper_gst_2)}</div>
                </div>
            </div>
        </div>
    </div>
 
</div>
`;

                    // Set the HTML content
                    productDetails.innerHTML = productDetailsHtml;

                    if (vendorname.toLowerCase() === 'delhivery/ltl-surface') {
                      axios.get(`/delivery-status/${lrNo}`)
                        .then(statusResponse => {
                          const delivery = statusResponse.data;
                          updateDeliveryStatus('delhivery', delivery.deliveryStatus, delivery.logoPath, lrNo, order, client);
                          console.log("delivery in delhivery ltl", delivery);

                          // Format the delivery status data for the route calculation
                          const formattedDeliveryStatus = delivery.deliveryStatus
                            .filter(status => status.location) // Filter out entries with no location
                            .sort((a, b) => new Date(a.manifested_date) - new Date(b.manifested_date))
                            .map(status => ({
                              location: status.location.split('(')[0].trim().replace(/_/g, ' '),
                              status: status.status,
                              date: status.manifested_date,
                              scan_remark: status.scan_remark
                            }));

                          console.log("formattedDeliveryStatus in delhivery ltl", formattedDeliveryStatus);

                          // Call the route calculation function
                          calculateAndDisplayRoute(
                            formattedDeliveryStatus,
                            order.consignee_address,
                            eta
                          );
                        })
                        .catch(statusError => {
                          console.error("Error fetching delivery status:", statusError);
                          alert("There is no update from courier side.");
                          // Add default tracking UI in case of error
                          const detailedOrderTracking = document.querySelector('.detailedorder');
                          if (detailedOrderTracking) {
                            detailedOrderTracking.innerHTML = `
              <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
                <div class="col-sm-8">
                  Package from ${safeValue(order.warehouse_address)}
                </div>
                <div class="order-id">
                  Order ID ${safeValue(order.order_id)}
                </div>
                <div class="status">
                  order created
                </div>
                <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                  <span style="color:#5a99fc;">View Details</span>
                  <div class="details-balloon" style="display: none;">
                    <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                    <div>
                      Location<br/>
                      <strong>${safeValue(order.warehouse_address)}</strong>
                    </div>
                    <div>
                      Order Date<br/>
                      <strong>${new Date(order.order_date).toLocaleString()}</strong>
                    </div>
                  </div>
                </div>
              </div>`;
                          }
                        });
                    }
                    else if (vendorname.toLowerCase() === 'delhivery/standard-surface' || vendorname.toLowerCase() === 'delhivery/standard-air') {
                      axios.get(`/delivery-standard-status/${lrNo}`)
                        .then(statusResponse => {
                          const delivery = statusResponse.data;
                          updateDeliveryStdStatus('delhivery', delivery.deliveryStatus, delivery.logoPath, lrNo, order, client);
                          console.log("delivery in delhivery standard", delivery)

                          // Format the delivery status data for the route calculation
                          const formattedDeliveryStatus = delivery.deliveryStatus
                            .sort((a, b) => new Date(a.scan_datetime) - new Date(b.scan_datetime))
                            .map(status => ({
                              location: status.scanned_location.split('(')[0].trim().replace(/_/g, ' '),
                              status: status.scan,
                              date: status.scan_datetime,
                              scan_remark: status.instructions
                            }));
                          console.log("formattedDeliveryStatus in delhivery standard", formattedDeliveryStatus)
                          // Get the destination address from order details


                          // Call the route calculation function
                          calculateAndDisplayRoute(
                            formattedDeliveryStatus,
                            order.consignee_address,
                            eta
                          );
                        })
                        .catch(statusError => {
                          console.error("Error fetching delivery status:", statusError);
                          alert("There is no update from courier side.");
                          // Add default tracking UI in case of error
                          const detailedOrderTracking = document.querySelector('.detailedorder');
                          if (detailedOrderTracking) {
                            detailedOrderTracking.innerHTML = `
              <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
                <div class="col-sm-8">
                  Package from ${safeValue(order.warehouse_address)}
                </div>
                <div class="order-id">
                  Order ID ${safeValue(order.order_id)}
                </div>
                <div class="status">
                  order created
                </div>
                <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                  <span style="color:#5a99fc;">View Details</span>
                  <div class="details-balloon" style="display: none;">
                    <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                    <div>
                      Location<br/>
                      <strong>${safeValue(order.warehouse_address)}</strong>
                    </div>
                    <div>
                      Order Date<br/>
                      <strong>${new Date(order.order_date).toLocaleString()}</strong>
                    </div>
                  </div>
                </div>
              </div>`;
                          }
                        });
                    }

                    else if (vendorname.toLowerCase() === 'dtdc/ltl') {
                      axios.get(`/dtdc-ltl-status/${lrNo}`)
                        .then(statusResponse => {
                          const delivery = statusResponse.data;
                          console.log("delivery in dtdc ltl", delivery)
                          updateDTDCStatus('dtdc/ltl', delivery.deliveryStatus, delivery.logoPath, lrNo, order, client);
                        })
                        .catch(statusError => {
                          console.error("Error fetching DTDC/LTL delivery status:", statusError);
                          alert("There is no update from courier side.");
                          // Add default tracking UI in case of error
                          const detailedOrderTracking = document.querySelector('.detailedorder');
                          if (detailedOrderTracking) {
                            detailedOrderTracking.innerHTML = `
              <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
                <div class="col-sm-8">
                  Package from ${safeValue(order.warehouse_address)}
                </div>
                <div class="order-id">
                  Order ID ${safeValue(order.order_id)}
                </div>
                <div class="status">
                  order created
                </div>
                <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                  <span style="color:#5a99fc;">View Details</span>
                  <div class="details-balloon" style="display: none;">
                    <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                    <div>
                      Location<br/>
                      <strong>${safeValue(order.warehouse_address)}</strong>
                    </div>
                    <div>
                      Order Date<br/>
                      <strong>${new Date(order.order_date).toLocaleString()}</strong>
                    </div>
                  </div>
                </div>
              </div>`;
                          }
                        });
                    } else if (vendorname.toLowerCase() === 'dtdc/b2c smart express') {
                      axios.get(`/dtdc-standard-status/${lrNo}`)
                        .then(statusResponse => {
                          const delivery = statusResponse.data;
                          updateDTDCStatusStd('dtdc/standard', delivery.deliveryStatus, delivery.logoPath, lrNo, order, client);
                          console.log("delivery in dtdc standard", delivery);

                          // Format the delivery status data for the route calculation
                          const formattedDeliveryStatus = delivery.deliveryStatus
                            .filter(status => status.strOrigin) // Filter out entries with no origin
                            .map(status => ({
                              location: status.strOrigin,
                              status: status.strAction,
                              date: status.strActionDate,
                              scan_remark: status.strRemarks || status.strManifestNo || ''
                            }));

                          // Get the final delivery location

                          // If we have a final delivery location, add it to the route if it's different from the last location


                          // Call the route calculation function
                          calculateAndDisplayRoute(
                            formattedDeliveryStatus,
                            order.consignee_address, // Use as backup if needed
                            eta
                          );
                        })
                        .catch(statusError => {
                          console.error("Error fetching DTDC Standard delivery status:", statusError);
                          alert("There is no update from courier side.");
                          // Add default tracking UI in case of error
                          const detailedOrderTracking = document.querySelector('.detailedorder');
                          if (detailedOrderTracking) {
                            detailedOrderTracking.innerHTML = `
              <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
                <div class="col-sm-8">
                  Package from ${safeValue(order.warehouse_address)}
                </div>
                <div class="order-id">
                  Order ID ${safeValue(order.order_id)}
                </div>
                <div class="status">
                  order created
                </div>
                <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                  <span style="color:#5a99fc;">View Details</span>
                  <div class="details-balloon" style="display: none;">
                    <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                    <div>
                      Location<br/>
                      <strong>${safeValue(order.warehouse_address)}</strong>
                    </div>
                    <div>
                      Order Date<br/>
                      <strong>${new Date(order.order_date).toLocaleString()}</strong>
                    </div>
                  </div>
                </div>
              </div>`;
                          }
                        });
                    } else if (vendorname.toLowerCase() === 'expressbees/standard-surface' || vendorname.toLowerCase() === "expressbees/standard-air") {
                      // First get the delivery status
                      axios.get(`/expressbees-std/${lrNo}`)
                        .then(statusResponse => {
                          const delivery = statusResponse.data;
                          console.log("express bees status:", delivery);
                          updateExpressBeesStatus('expressbees', delivery.deliveryStatus, delivery.logoPath, lrNo, order, client);

                          // Get the last location from delivery status array
                          const lastLocation = delivery.deliveryStatus[delivery.deliveryStatus.length - 1].location;

                          // Construct origin and destination strings
                          const origin = lastLocation;
                          const destination = `${order.consignee_address}`;
                          console.log("origin in express bees", origin)
                          console.log("destination in express bees", destination)
                          console.log("eta in express bees", eta)
                          // Calculate route using origin and destination
                          calculateAndDisplayRoute(
                            delivery.deliveryStatus,
                            order.consignee_address,
                            eta
                          );
                        })
                        .catch(statusError => {
                          console.error("Error fetching ExpressBees delivery status:", statusError);
                          const errorMessage = statusError.response ? statusError.response.data.message : "There is no update from courier side.";
                          alert(errorMessage);
                          // Add default tracking UI in case of error
                          const detailedOrderTracking = document.querySelector('.detailedorder');
                          if (detailedOrderTracking) {
                            detailedOrderTracking.innerHTML = `
                <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
                  <div class="col-sm-8">
                    Package from ${safeValue(order.warehouse_address)}
                  </div>
                  <div class="order-id">
                    Order ID ${safeValue(order.order_id)}
                  </div>
                  <div class="status">
                    order created
                  </div>
                  <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                    <span style="color:#5a99fc;">View Details</span>
                    <div class="details-balloon" style="display: none;">
                      <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                      <div>
                        Location<br/>
                        <strong>${safeValue(order.warehouse_address)}</strong>
                      </div>
                      <div>
                        Order Date<br/>
                        <strong>${new Date(order.order_date).toLocaleString()}</strong>
                      </div>
                    </div>
                  </div>
                </div>`;
                          }
                        });
                    }
                  })
                  .catch(error => {
                    console.error("Error fetching order details:", error);
                    const errorMessage = error.response ? error.response.data.message : "An unexpected error occurred.";
                    alert(errorMessage);
                    if (productDetails) {
                      productDetails.innerHTML = '';
                    }
                  });
              });
            });
          </script>
          </script>
          <script>
            // dtdc 
            function updateDTDCStatus(vendor, deliveryStatus, logoPath, lrNo, order, client) {
              console.log("in the function updateDTDCStatus");

              // Update the right logo dynamically from the delivery status response
              const rightLogo = document.getElementById('right-logo');
              if (rightLogo && logoPath) {
                rightLogo.src = logoPath;  // Set the new logo path
              }

              // Update the detailed order tracking section    Order Tracking
              const detailedOrderTracking = document.querySelector('.detailedorder');
              if (detailedOrderTracking) {
                detailedOrderTracking.innerHTML = `
        <div class="mb-4">
          <div >
            

            <!-- Static Order Created Package -->
            <div class="package " style="background:linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)">
              <div class="col-sm-8">
                Package from ${safeValue(client.company_name)}
              </div>
              <div class="order-id">
                Order ID ${safeValue(order.order_id)}
              </div>
              <div class="status">
                ${deliveryStatus[deliveryStatus.length - 1].strAction}
              </div>
              <div class="progress-bar" style="width: 81%;">
              </div>
              <div class="details">
                <div>
                  Customer<br/>
                  <strong>${safeValue(order.consignee_name)}</strong>
                </div>
                <div>
                  Weight<br/>
                  <strong>${safeValue(order.total_weight || 'N/A')} ${safeValue(order.weight_unit || 'N/A')} </strong>
                </div>
                <div>
                  Price<br/>
                  <strong>₹ ${safeValue(order.Invoice_amount || 'N/A')}</strong>
                </div>
                <div>
                  Departure<br/>
                  <strong>${new Date(order.order_date).toLocaleDateString()}</strong>
                </div>
              </div>
            </div>

            <div  class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
              <div class="col-sm-8">
                Package from ${safeValue(client.company_name)}
              </div>
              <div class="order-id">
                Order ID ${safeValue(order.order_id)}
              </div>
              <div class="status">
                order created
              </div>
              <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                <span style="color:#5a99fc;">View Details</span>
                <div class="details-balloon" style="display: none;">
                  <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                  <div>
                    Location<br/>
                    <strong>${safeValue(order.warehouse_address)}</strong>
                  </div>
                  <div>
                    Order Date<br/>
                    <strong>${new Date(order.order_date).toLocaleString()}</strong>
                  </div>
                </div>
              </div>
            </div>

            <div  class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
              <div class="col-sm-8">
                Package from ${safeValue(client.company_name)}
              </div>
              <div class="order-id">
                Order ID ${safeValue(order.order_id)}
              </div>
              <div class="status">
                order in process
              </div>
              <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                <span style="color:#5a99fc;">View Details</span>
                <div class="details-balloon" style="display: none;">
                  <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                  <div>
                    Location<br/>
                    <strong>${safeValue(order.warehouse_address)}</strong>
                  </div>
                  <div>
                    Update Date<br/>
                    <strong>${new Date(order.order_date).toLocaleString()}</strong>
                  </div>
                </div>
              </div>
            </div>

            ${(() => {
                    // Define known status categories
                    const readyToDispatchActions = ['Booked', 'Manifest Prepared'];
                    const inTransitActions = ['THC OUT', 'LDS Updation', 'THC Arrived'];

                    let output = '';
                    let processedStatuses = new Set();

                    // Process Ready to Dispatch statuses
                    const readyToDispatchStatuses = deliveryStatus.filter(status =>
                      readyToDispatchActions.includes(status.strAction)
                    );

                    if (readyToDispatchStatuses.length > 0) {
                      const combinedDetails = readyToDispatchStatuses.map(status => `
                  <div>Status: ${safeValue(status.strAction)}</div>
                  <div>Location: ${safeValue(status.strOrigin || 'N/A')}</div>
                  <div>Updated On: ${new Date(status.strActionDate).toLocaleString()}</div>
                  <div>Updated Time: ${safeValue(status.strActionTime)}</div>
                `).join('<hr/>');

                      output += `
                  <div class="package ready-to-dispatch" style="background:linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)">
                    <div class="col-sm-8">Ready to Dispatch from ${safeValue(readyToDispatchStatuses[0].strOrigin || order.warehouse_address)}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status ready">Ready to Dispatch</div>
                    <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                      <span style="color:#5a99fc;">View Details</span>
                      <div class="details-balloon" style="display: none;">
                        <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                        ${combinedDetails}
                      </div>
                    </div>
                  </div>
                `;
                      readyToDispatchStatuses.forEach(status => processedStatuses.add(status.strAction));
                    }

                    // Process In Transit statuses
                    const inTransitStatuses = deliveryStatus.filter(status =>
                      inTransitActions.includes(status.strAction)
                    );

                    if (inTransitStatuses.length > 0) {
                      const combinedDetails = inTransitStatuses.map(status => `
                  <div>Status: ${safeValue(status.strAction)}</div>
                  <div>Origin: ${safeValue(status.strOrigin || 'N/A')}</div>
                  <div>Destination: ${safeValue(status.strDestination || 'N/A')}</div>
                  <div>Updated On: ${new Date(status.strActionDate).toLocaleString()}</div>
                  <div>Updated Time: ${safeValue(status.strActionTime)}</div>
                  ${status.strVehicleNo ? `<div>Vehicle No: ${safeValue(status.strVehicleNo)}</div>` : ''}
                  ${status.strDriverName ? `<div>Driver: ${safeValue(status.strDriverName)}</div>` : ''}
                `).join('<hr/>');

                      output += `
                  <div  class="package in-transit" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)">
                    <div class="col-sm-8">In Transit from ${safeValue(inTransitStatuses[0].strOrigin || 'N/A')}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status transit">In Transit</div>
                    <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                      <span style="color:#5a99fc;">View Details</span>
                      <div class="details-balloon" style="display: none;">
                        <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                        ${combinedDetails}
                      </div>
                    </div>
                  </div>
                `;
                      inTransitStatuses.forEach(status => processedStatuses.add(status.strAction));
                    }

                    // Process any remaining unhandled statuses
                    deliveryStatus.forEach(status => {
                      if (!processedStatuses.has(status.strAction)) {
                        output += `
                    <div class="package custom-status" style="background:linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)">
                      <div class="col-sm-8">Status Update from ${safeValue(status.strOrigin || 'N/A')}</div>
                      <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                      <div class="status custom">${safeValue(status.strAction)}</div>
                      <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                        <span style="color:#5a99fc;">View Details</span>
                        <div class="details-balloon" style="display: none;">
                          <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                          <div>Status: ${safeValue(status.strAction)}</div>
                          <div>Origin: ${safeValue(status.strOrigin || 'N/A')}</div>
                          <div>Destination: ${safeValue(status.strDestination || 'N/A')}</div>
                          <div>Updated On: ${new Date(status.strActionDate).toLocaleString()}</div>
                          <div>Updated Time: ${safeValue(status.strActionTime)}</div>
                          ${status.strVehicleNo ? `<div>Vehicle No: ${safeValue(status.strVehicleNo)}</div>` : ''}
                          ${status.strDriverName ? `<div>Driver: ${safeValue(status.strDriverName)}</div>` : ''}
                        </div>
                      </div>
                    </div>
                  `;
                      }
                    });

                    return output;
                  })()}
          </div>
        </div>
      `;
              }
            }

            // dtdc 
            function updateDTDCStatusStd(vendor, deliveryStatus, logoPath, lrNo, order, client) {
              console.log("in the function updateDTDCStatus");

              // Update the right logo dynamically from the delivery status response
              const rightLogo = document.getElementById('right-logo');
              if (rightLogo && logoPath) {
                rightLogo.src = logoPath;  // Set the new logo path
              }

              // Update the detailed order tracking section dtdc
              const detailedOrderTracking = document.querySelector('.detailedorder');
              if (detailedOrderTracking) {
                detailedOrderTracking.innerHTML = `
        <div class="mb-4">
          <div class="">
        

            <!-- Static Order Created Package -->
            <div class="package " style="background:linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)">
              <div class="col-sm-8">
                Package from ${safeValue(client.company_name)}
              </div>
              <div class="order-id">
                Order ID ${safeValue(order.order_id)}
              </div>
              <div class="status">
                ${deliveryStatus[deliveryStatus.length - 1].strAction}
              </div>
              <div class="progress-bar" style="width: 81%;">
              </div>
              <div class="details">
                <div>
                  Customer<br/>
                  <strong>${safeValue(order.consignee_name)}</strong>
                </div>
                <div>
                  Weight<br/>
                  <strong>${safeValue(order.total_weight || 'N/A')} ${safeValue(order.weight_unit || 'N/A')} </strong>
                </div>
                <div>
                  Price<br/>
                  <strong>₹ ${safeValue(order.Invoice_amount || 'N/A')}</strong>
                </div>
                <div>
                  Departure<br/>
                  <strong>${new Date(order.order_date).toLocaleDateString()}</strong>
                </div>
              </div>
            </div>

            <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
              <div class="col-sm-8">
                Package from ${safeValue(client.company_name)}
              </div>
              <div class="order-id">
                Order ID ${safeValue(order.order_id)}
              </div>
              <div class="status">
                order created
              </div>
              <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                <span style="color:#5a99fc;">View Details</span>
                <div class="details-balloon" style="display: none;">
                  <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                  <div>
                    Location<br/>
                    <strong>${safeValue(order.warehouse_address)}</strong>
                  </div>
                  <div>
                    Order Date<br/>
                    <strong>${new Date(order.order_date).toLocaleString()}</strong>
                  </div>
                </div>
              </div>
            </div>

            <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
              <div class="col-sm-8">
                Package from ${safeValue(client.company_name)}
              </div>
              <div class="order-id">
                Order ID ${safeValue(order.order_id)}
              </div>
              <div class="status">
                order in process
              </div>
              <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                <span style="color:#5a99fc;">View Details</span>
                <div class="details-balloon" style="display: none;">
                  <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                  <div>
                    Location<br/>
                    <strong>${safeValue(order.warehouse_address)}</strong>
                  </div>
                  <div>
                    Update Date<br/>
                    <strong>${new Date(order.order_date).toLocaleString()}</strong>
                  </div>
                </div>
              </div>
            </div>

            ${(() => {
                    // Define known status categories
                    const readyToDispatchActions = ['Booked', 'Manifest Prepared', "Picked Up", "Pickup Reassigned", "Pickup Scheduled", "Pickup Awaited"];
                    const inTransitActions = ['In Transit', 'LDS Updation', 'THC Arrived', 'Reached At Destination', 'LINEHAUL DELAYED ROAD BLOCK / TRAFFIC JAM'];

                    let output = '';
                    let processedStatuses = new Set();

                    // Process Ready to Dispatch statuses
                    const readyToDispatchStatuses = deliveryStatus.filter(status =>
                      readyToDispatchActions.includes(status.strAction)
                    );

                    if (readyToDispatchStatuses.length > 0) {
                      const combinedDetails = readyToDispatchStatuses.map(status => `
                  <div>Status: ${safeValue(status.strAction)}</div>
                  <div>Location: ${safeValue(status.strOrigin || 'N/A')}</div>
                  <div>Updated On: ${new Date(status.strActionDate).toLocaleString()}</div>
                  <div>Updated Time: ${safeValue(status.strActionTime).slice(0, 2)}:${safeValue(status.strActionTime).slice(2)}</div>
                `).join('<hr/>');

                      output += `
                  <div class="package ready-to-dispatch" style="background:linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)">
                    <div class="col-sm-8">Ready to Dispatch from ${safeValue(readyToDispatchStatuses[0].strOrigin || order.warehouse_address)}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status ready">Ready to Dispatch</div>
                    <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                      <span style="color:#5a99fc;">View Details</span>
                      <div class="details-balloon" style="display: none;">
                        <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                        ${combinedDetails}
                      </div>
                    </div>
                  </div>
                `;
                      readyToDispatchStatuses.forEach(status => processedStatuses.add(status.strAction));
                    }

                    // Process In Transit statuses
                    const inTransitStatuses = deliveryStatus.filter(status =>
                      inTransitActions.includes(status.strAction)
                    );

                    if (inTransitStatuses.length > 0) {
                      const combinedDetails = inTransitStatuses.map(status => `
                  <div>Status: ${safeValue(status.strAction)}</div>
                  <div>Origin: ${safeValue(status.strOrigin || 'N/A')}</div>
                  <div>Destination: ${safeValue(status.strDestination || 'N/A')}</div>
                  <div>Updated On: ${new Date(status.strActionDate).toLocaleString()}</div>
                  <div>Updated Time: ${safeValue(status.strActionTime).slice(0, 2)}:${safeValue(status.strActionTime).slice(2)}</div>
                  ${status.strVehicleNo ? `<div>Vehicle No: ${safeValue(status.strVehicleNo)}</div>` : ''}
                  ${status.strDriverName ? `<div>Driver: ${safeValue(status.strDriverName)}</div>` : ''}
                `).join('<hr/>');

                      output += `
                  <div  class="package in-transit" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)">
                    <div class="col-sm-8">In Transit from ${safeValue(inTransitStatuses[0].strOrigin || 'N/A')}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status transit">In Transit</div>
                    <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                      <span style="color:#5a99fc;">View Details</span>
                      <div class="details-balloon" style="display: none;">
                        <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                        ${combinedDetails}
                      </div>
                    </div>
                  </div>
                `;
                      inTransitStatuses.forEach(status => processedStatuses.add(status.strAction));
                    }

                    // Process any remaining unhandled statuses
                    deliveryStatus.forEach(status => {
                      if (!processedStatuses.has(status.strAction)) {
                        output += `
                    <div class="package custom-status" style="background:linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)">
                      <div class="col-sm-8">Status Update from ${safeValue(status.strOrigin || 'N/A')}</div>
                      <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                      <div class="status custom">${safeValue(status.strAction)}</div>
                      <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                        <span style="color:#5a99fc;">View Details</span>
                        <div class="details-balloon" style="display: none;">
                          <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                          <div>Status: ${safeValue(status.strAction)}</div>
                          <div>Origin: ${safeValue(status.strOrigin || 'N/A')}</div>
                          <div>Destination: ${safeValue(status.strDestination || 'N/A')}</div>
                          <div>Updated On: ${new Date(status.strActionDate).toLocaleString()}</div>
                          <div>Updated Time: ${safeValue(status.strActionTime).slice(0, 2)}:${safeValue(status.strActionTime).slice(2)}</div>
                          ${status.strVehicleNo ? `<div>Vehicle No: ${safeValue(status.strVehicleNo)}</div>` : ''}
                          ${status.strDriverName ? `<div>Driver: ${safeValue(status.strDriverName)}</div>` : ''}
                        </div>
                      </div>
                    </div>
                  `;
                      }
                    });

                    return output;
                  })()}
          </div>
        </div>
      `;
              }
            }

            function updateDeliveryStatus(vendor, deliveryStatus, logoPath, lrNo, order, client) {
              console.log("in the delivery ltl caseee")

              const rightLogo = document.getElementById('right-logo');
              if (rightLogo && logoPath) {
                rightLogo.src = logoPath;
              }
              // Delhivery LTL Tracking
              const detailedOrderTracking = document.querySelector('.detailedorder');
              if (detailedOrderTracking) {
                detailedOrderTracking.innerHTML = `
      <div class="mb-4">
        <div class="">
        
          <div class="package " style="background:linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)">
            <div class="col-sm-8">
              Package from ${safeValue(client.company_name)}
            </div>
            <div class="order-id">
              Order ID ${safeValue(order.order_id)}
            </div>
            <div class="status">
              ${deliveryStatus[deliveryStatus.length - 1].status}
            </div>
            <div class="progress-bar" style="width: 81%;">
            </div>
            <div class="details">
              <div>
                Customer<br/>
                <strong>${safeValue(order.consignee_name)}</strong>
              </div>
              <div>
                Weight<br/>
                <strong>${safeValue(order.total_weight || 'N/A')} ${safeValue(order.weight_unit || 'N/A')} </strong>
              </div>
              <div>
                Price<br/>
                <strong>₹ ${safeValue(order.Invoice_amount || 'N/A')}</strong>
              </div>
              <div>
                Departure<br/>
                <strong>${new Date(order.order_date).toLocaleDateString()}</strong>
              </div>
            </div>
          </div>

          <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
            <div class="col-sm-8">Package from ${safeValue(client.company_name)}</div>
            <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
            <div class="status">order created</div>
            <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
              <span style="color:#5a99fc;">View Details</span>
              <div class="details-balloon" style="display: none;">
                <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                <div>Location<br/><strong>${safeValue(order.warehouse_address)}</strong></div>
                <div>Order Date<br/><strong>${new Date(order.order_date).toLocaleString()}</strong></div>
              </div>
            </div>
          </div>

          <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
            <div class="col-sm-8">Package from ${safeValue(client.company_name)}</div>
            <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
            <div class="status">order in process</div>
            <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
              <span style="color:#5a99fc;">View Details</span>
              <div class="details-balloon" style="display: none;">
                <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                <div>Location<br/><strong>${safeValue(order.warehouse_address)}</strong></div>
                <div>Update Date<br/><strong>${new Date(order.order_date).toLocaleString()}</strong></div>
              </div>
            </div>
          </div>

          ${(() => {
                    const readyToDispatchScans = ['MANIFESTED'];
                    const inTransitScans = ['LEFT_ORIGIN', 'REACH_DESTINATION'];
                    let output = '';
                    let processedStatuses = new Set();

                    // Process Ready to Dispatch statuses
                    const readyToDispatchStatuses = deliveryStatus.filter(status =>
                      readyToDispatchScans.includes(status.status)
                    );

                    if (readyToDispatchStatuses.length > 0) {
                      const combinedDetails = readyToDispatchStatuses.map(status => `
                <div>Status: ${safeValue(status.status)}</div>
                <div>Location: ${safeValue(status.location || 'N/A')}</div>
                <div>Manifested Date: ${safeValue(status.manifested_date)}</div>
                <div>Scan Remark: ${safeValue(status.scan_remark)}</div>
              `).join('<hr/>');

                      output += `
                <div class="package ready-to-dispatch" style="background:linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)">
                  <div class="col-sm-8">Ready to Dispatch from ${safeValue(readyToDispatchStatuses[0].location || order.warehouse_address)}</div>
                  <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                  <div class="status ready">Ready to Dispatch</div>
                  <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                    <span style="color:#5a99fc;">View Details</span>
                    <div class="details-balloon" style="display: none;">
                      <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                      ${combinedDetails}
                    </div>
                  </div>
                </div>
              `;
                      readyToDispatchStatuses.forEach(status => processedStatuses.add(status.status));
                    }

                    // Process In Transit statuses
                    const inTransitStatuses = deliveryStatus.filter(status =>
                      inTransitScans.includes(status.status)
                    );

                    if (inTransitStatuses.length > 0) {
                      const combinedDetails = inTransitStatuses.map(status => `
                <div>Status: ${safeValue(status.status)}</div>
                <div>Location: ${safeValue(status.location || 'N/A')}</div>
                <div>Manifested Date: ${safeValue(status.manifested_date)}</div>
                <div>Scan Remark: ${safeValue(status.scan_remark)}</div>
              `).join('<hr/>');

                      output += `
                <div  class="package in-transit" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)">
                  <div class="col-sm-8">In Transit from ${safeValue(inTransitStatuses[0].location || 'N/A')}</div>
                  <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                  <div class="status transit">In Transit</div>
                  <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                    <span style="color:#5a99fc;">View Details</span>
                    <div class="details-balloon" style="display: none;">
                      <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                      ${combinedDetails}
                    </div>
                  </div>
                </div>
              `;
                      inTransitStatuses.forEach(status => processedStatuses.add(status.status));
                    }

                    // Process remaining statuses
                    deliveryStatus.forEach(status => {
                      if (!processedStatuses.has(status.status)) {
                        output += `
                  <div class="package custom-status" style="background:linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)">
                    <div class="col-sm-8">Status Update from ${safeValue(status.location || 'N/A')}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status custom">${safeValue(status.status)}</div>
                    <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                      <span style="color:#5a99fc;">View Details</span>
                      <div class="details-balloon" style="display: none;">
                        <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                        <div>Status: ${safeValue(status.status)}</div>
                        <div>Location: ${safeValue(status.location || 'N/A')}</div>
                        <div>Manifested Date: ${safeValue(status.manifested_date)}</div>
                        <div>Scan Remark: ${safeValue(status.scan_remark)}</div>
                        <div>Estimated Delivery: ${status.estimated_date ? new Date(status.estimated_date).toLocaleString() : 'N/A'}</div>
                        <div>Promised Delivery: ${status.promised_delivery_date ? new Date(status.promised_delivery_date).toLocaleString() : 'N/A'}</div>
                        <div>Pickup Date: ${status.pickup_date ? new Date(status.pickup_date).toLocaleString() : 'N/A'}</div>
                        <div>Delivered Date: ${status.delivered_date ? new Date(status.delivered_date).toLocaleString() : 'N/A'}</div>
                      </div>
                    </div>
                  </div>
                `;
                      }
                    });

                    return output;
                  })()}
        </div>
      </div>
    `;
              }
            }
            function updateDeliveryStdStatus(vendor, deliveryStatus, logoPath, lrNo, order, client) {
              // Update the right logo dynamically from the delivery status response
              const rightLogo = document.getElementById('right-logo');
              if (rightLogo && logoPath) {
                rightLogo.src = logoPath;  // Set the new logo path
              }
              // Delhivery Standard Tracking
              // Update the detailed order tracking section
              const detailedOrderTracking = document.querySelector('.detailedorder');
              if (detailedOrderTracking) {
                detailedOrderTracking.innerHTML = `
      <div class="mb-4">
        <div class="">
       

          <!-- Static Order Created Package -->
          <div class="package " style="background:linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)">
            <div class="col-sm-8">
              Package from ${safeValue(client.company_name)}
            </div>
            <div class="order-id">
              Order ID ${safeValue(order.order_id)}
            </div>
            <div class="status">
              ${deliveryStatus[deliveryStatus.length - 1].scan}
            </div>
            <div class="progress-bar" style="width: 81%;">
            </div>
            <div class="details">
              <div>
                Customer<br/>
                <strong>${safeValue(order.consignee_name)}</strong>
              </div>
              <div>
                Weight<br/>
                <strong>${safeValue(order.total_weight || 'N/A')} ${safeValue(order.weight_unit || 'N/A')} </strong>
              </div>
              <div>
                Price<br/>
                <strong>₹ ${safeValue(order.Invoice_amount || 'N/A')}</strong>
              </div>
              <div>
                Departure<br/>
                <strong>${new Date(order.order_date).toLocaleDateString()}</strong>
              </div>
            </div>
          </div>

          <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
            <div class="col-sm-8">
              Package from ${safeValue(client.company_name)}
            </div>
            <div class="order-id">
              Order ID ${safeValue(order.order_id)}
            </div>
            <div class="status">
              order created
            </div>
            <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
              <span style="color:#5a99fc;">View Details</span>
              <div class="details-balloon" style="display: none;">
                <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                <div>
                  Location<br/>
                  <strong>${safeValue(order.warehouse_address)}</strong>
                </div>
                <div>
                  Order Date<br/>
                  <strong>${new Date(order.order_date).toLocaleString()}</strong>
                </div>
              </div>
            </div>
          </div>

          <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
            <div class="col-sm-8">
              Package from ${safeValue(client.company_name)}
            </div>
            <div class="order-id">
              Order ID ${safeValue(order.order_id)}
            </div>
            <div class="status">
              order in process
            </div>
            <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
              <span style="color:#5a99fc;">View Details</span>
              <div class="details-balloon" style="display: none;">
                <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                <div>
                  Location<br/>
                  <strong>${safeValue(order.warehouse_address)}</strong>
                </div>
                <div>
                  Update Date<br/>
                  <strong>${new Date(order.order_date).toLocaleString()}</strong>
                </div>
              </div>
            </div>
          </div>

          ${(() => {
                    // Define known status categories
                    const readyToDispatchScans = ['Manifested'];
                    const inTransitScans = ['In Transit', 'Pending', 'Dispatched'];

                    let output = '';
                    let processedStatuses = new Set();

                    // Process Ready to Dispatch statuses
                    const readyToDispatchStatuses = deliveryStatus.filter(status =>
                      readyToDispatchScans.includes(status.scan)
                    );

                    if (readyToDispatchStatuses.length > 0) {
                      const combinedDetails = readyToDispatchStatuses.map(status => `
                <div>Status: ${safeValue(status.scan)}</div>
                <div>Location: ${safeValue(status.scanned_location || 'N/A')}</div>
                <div>Scan Remark: ${safeValue(status.instructions || 'N/A')}</div>
                <div>Scan Date: ${status.scan_datetime ? new Date(status.status_datetime).toLocaleString() : 'N/A'}</div>
              `).join('<hr/>');

                      output += `
                <div class="package ready-to-dispatch" style="background:linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)">
                  <div class="col-sm-8">Ready to Dispatch from ${safeValue(readyToDispatchStatuses[0].location || order.warehouse_address)}</div>
                  <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                  <div class="status ready">Ready to Dispatch</div>
                  <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                    <span style="color:#5a99fc;">View Details</span>
                    <div class="details-balloon" style="display: none;">
                      <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                      ${combinedDetails}
                    </div>
                  </div>
                </div>
              `;
                      readyToDispatchStatuses.forEach(status => processedStatuses.add(status.scan));
                    }

                    // Process In Transit statuses
                    const inTransitStatuses = deliveryStatus.filter(status =>
                      inTransitScans.includes(status.scan)
                    );

                    if (inTransitStatuses.length > 0) {
                      const combinedDetails = inTransitStatuses.map(status => `
                <div>Status: ${safeValue(status.scan)}</div>
                <div>Location: ${safeValue(status.scanned_location || 'N/A')}</div>
                <div>Scan Remark: ${safeValue(status.instructions || 'N/A')}</div>
                <div>Scan Date:${status.scan_datetime ? new Date(status.status_datetime).toLocaleString() : 'N/A'}</div>
           
              `).join('<hr/>');

                      output += `
                <div  class="package in-transit" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)">
                  <div class="col-sm-8">In Transit from ${safeValue(inTransitStatuses[0].location || 'N/A')}</div>
                  <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                  <div class="status transit">In Transit</div>
                  <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                    <span style="color:#5a99fc;">View Details</span>
                    <div class="details-balloon" style="display: none;">
                      <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                      ${combinedDetails}
                    </div>
                  </div>
                </div>
              `;
                      inTransitStatuses.forEach(status => processedStatuses.add(status.scan));
                    }

                    // Process any remaining unhandled statuses
                    deliveryStatus.forEach(status => {
                      if (!processedStatuses.has(status.scan)) {
                        output += `
                  <div class="package custom-status" style="background:linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)">
                    <div class="col-sm-8">Status Update from ${safeValue(status.scanned_location || 'N/A')}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status custom">${safeValue(status.scan)}</div>
                    <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                      <span style="color:#5a99fc;">View Details</span>
                      <div class="details-balloon" style="display: none;">
                        <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                        <div>Status: ${safeValue(status.scan)}</div>
                        <div>Location: ${safeValue(status.scanned_location || 'N/A')}</div>
                        <div>Scan Remark: ${safeValue(status.instructions || 'N/A')}</div>
                        <div> Date: ${status.scan_datetime ? new Date(status.status_datetime).toLocaleString() : 'N/A'}</div>
                        
                      </div>
                    </div>
                  </div>
                `;
                      }
                    });

                    return output;
                  })()}
        </div>
      </div>
    `;
              }
            }
            function updateExpressBeesStatus(vendor, deliveryStatus, logoPath, lrNo, order, client) {
              // Update the right logo dynamically from the delivery status response
              console.log("order in expressbees", order, client)
              const rightLogo = document.getElementById('right-logo');
              if (rightLogo && logoPath) {
                rightLogo.src = logoPath;  // Set the new logo path
              }

              // Update the detailed order tracking section     Express Bees Tracking
              const detailedOrderTracking = document.querySelector('.detailedorder');
              if (detailedOrderTracking) {
                detailedOrderTracking.innerHTML = `
      <div class="mb-4">
        <div class="">
          
          <!-- Static Order Created Package -->
          <div class="package " style="background:linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)">
            <div class="col-sm-8">
              Package from ${safeValue(client.company_name)}
            </div>
            <div class="order-id">
              Order ID ${safeValue(order.order_id)}
            </div>
            <div class="status">
              ${deliveryStatus[deliveryStatus.length - 1].message}
            </div>
            <div class="progress-bar" style="width: 81%;">
            </div>
            <div class="details">
              <div>
                Customer<br/>
                <strong>${safeValue(order.consignee_name)}</strong>
              </div>
              <div>
                Weight<br/>
                <strong>${safeValue(order.chargable_weight || 'N/A')} ${safeValue(order.weight_unit || 'N/A')} </strong>
              </div>
              <div>
                Price<br/>
                <strong>₹ ${safeValue(order.Invoice_amount || 'N/A')}</strong>
              </div>
              <div>
                Departure<br/>
                <strong>${deliveryStatus.find(status => status.message === 'In Transit')
                    ? new Date(deliveryStatus.find(status => status.message === 'In Transit').event_time).toLocaleDateString()
                    : new Date(order.order_date).toLocaleDateString()
                  }</strong>
              </div>
            </div>
          </div>

          <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
            <div>
              Package from ${safeValue(client.company_name)}
            </div>
            <div class="order-id">
              Order ID ${safeValue(order.order_id)}
            </div>
            <div class="status">
              order created
            </div>
            <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
              <span style="color:#5a99fc;">View Details</span>
              <div class="details-balloon" style="display: none;">
                <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                <div>
                  Location<br/>
                  <strong>${safeValue(order.warehouse_address)}</strong>
                </div>
                <div>
                  Order Date<br/>
                  <strong>${new Date(order.order_date).toLocaleString()}</strong>
                </div>
              </div>
            </div>
          </div>

          <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
            <div>
              Package from ${safeValue(client.company_name)}
            </div>
            <div class="order-id">
              Order ID ${safeValue(order.order_id)}
            </div>
            <div class="status">
              order in process
            </div>
            <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
              <span style="color:#5a99fc;">View Details</span>
              <div class="details-balloon" style="display: none;">
                <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                <div>
                  Location<br/>
                  <strong>${safeValue(order.warehouse_address)}</strong>
                </div>
                <div>
                  Update Date<br/>
                  <strong>${new Date(order.order_date).toLocaleString()}</strong>
                </div>
              </div>
            </div>
          </div>

          ${(() => {
                    // Define known status categories
                    const readyToDispatchMessages = ['Data Received', 'Pickup Not Done'];
                    const inTransitMessages = ['Picked', 'Out For Pickup', 'Pickup Done'];

                    let output = '';
                    let processedStatuses = new Set();

                    // Process Ready to Dispatch statuses
                    const readyToDispatchStatuses = deliveryStatus.filter(status =>
                      readyToDispatchMessages.includes(status.message)
                    );

                    if (readyToDispatchStatuses.length > 0) {
                      const combinedDetails = readyToDispatchStatuses.map(status => `
                <div>Status: ${safeValue(status.message)}</div>
                <div>Location: ${safeValue(status.location || 'N/A')}</div>
                <div>Event Time: ${status.event_time ? new Date(status.event_time).toLocaleString() : 'N/A'}</div>
              `).join('<hr/>');

                      output += `
                <div class="package ready-to-dispatch" style="background:linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)">
                  <div>Ready to Dispatch from ${safeValue(readyToDispatchStatuses[0].location || order.warehouse_address)}</div>
                  <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                  <div class="status ready">Ready to Dispatch</div>
                  <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                    <span style="color:#5a99fc;">View Details</span>
                    <div class="details-balloon" style="display: none;">
                      <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                      ${combinedDetails}
                    </div>
                  </div>
                </div>
              `;
                      readyToDispatchStatuses.forEach(status => processedStatuses.add(status.message));
                    }

                    // Process In Transit statuses
                    const inTransitStatuses = deliveryStatus.filter(status =>
                      inTransitMessages.includes(status.message)
                    );

                    if (inTransitStatuses.length > 0) {
                      const combinedDetails = inTransitStatuses.map(status => `
                <div>Status: ${safeValue(status.message)}</div>
                <div>Location: ${safeValue(status.location || 'N/A')}</div>
                <div>Event Time: ${status.event_time ? new Date(status.event_time).toLocaleString() : 'N/A'}</div>
              `).join('<hr/>');

                      output += `
                <div  class="package in-transit" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)">
                  <div>Pick up  from ${safeValue(inTransitStatuses[0].location || 'N/A')}</div>
                  <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                  <div class="status pickup ">Pickup details</div>
                  <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                    <span style="color:#5a99fc;">View Details</span>
                    <div class="details-balloon" style="display: none;">
                      <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                      ${combinedDetails}
                    </div>
                  </div>
                </div>
              `;
                      inTransitStatuses.forEach(status => processedStatuses.add(status.message));
                    }

                    // Process any remaining unhandled statuses
                    deliveryStatus.forEach(status => {
                      if (!processedStatuses.has(status.message)) {
                        output += `
                  <div class="package custom-status" style="background:linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)">
                    <div>Status Update from ${safeValue(status.location || 'N/A')}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status custom">${safeValue(status.message)}</div>
                    <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                      <span style="color:#5a99fc;">View Details</span>
                      <div class="details-balloon" style="display: none;">
                        <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                        <div>Status: ${safeValue(status.message)}</div>
                        <div>Location: ${safeValue(status.location || 'N/A')}</div>
                        <div>Event Time: ${status.event_time ? new Date(status.event_time).toLocaleString() : 'N/A'}</div>
                      </div>
                    </div>
                  </div>
                `;
                      }
                    });

                    return output;
                  })()}
        </div>
      </div>
    `;
              }
            }



            // Function to toggle the visibility of info-balloon
            function toggleBalloon(item) {
              // Close all open balloons before opening the new one
              const allBalloons = document.querySelectorAll('.info-balloon');
              allBalloons.forEach(function (balloon) {
                balloon.style.display = 'none';
              });

              // Get the clicked balloon and toggle its display
              var balloon = item.querySelector('.info-balloon');
              balloon.style.display = balloon.style.display === 'none' ? 'block' : 'none';
            }


            // Function to close the info balloon when clicking outside
            function closeBalloonOutside(event) {
              const allBalloons = document.querySelectorAll('.info-balloon');
              allBalloons.forEach(function (balloon) {
                // Check if the click is outside the balloon and its parent (li)
                if (!balloon.contains(event.target) && !event.target.closest('.progressList_item')) {
                  balloon.style.display = 'none';
                }
              });
            }

            // Add event listener to close balloons if clicked outside
            document.addEventListener('click', closeBalloonOutside);

            // Function to close the info balloon manually (close button)
            function closeBalloon(event, element) {
              event.stopPropagation();  // Stop the event from propagating to parent
              var balloon = element.closest('.info-balloon');
              balloon.style.display = 'none';
            }
          </script>

          <script>
            // Initialize API tokens and keys
            let token = null;
            let apiKeyLtl = "<%= apiLTL %>";
            let apiKeyStd = "<%= apiSTD %>";
            let apiKey = null;
            let TaggedApi = null;

            // Fetch authentication token on page load
            document.addEventListener("DOMContentLoaded", async () => {
              try {
                const response = await axios.get('/get-api-token');
                token = response.data.token;
                console.log("Token fetched successfully");
              } catch (error) {
                console.error("Error fetching API token:", error);
              }
            });

            // Helper function for Delhivery labels
            async function handleDelhiveryLabel(labelCode, awbNo, token) {
              const apiUrl = `https://ltl-clients-api.delhivery.com/label/get_urls/${labelCode}/${awbNo}`;

              const response = await axios.get('/delivery-shipping-label-links', {
                params: { apiUrl, token, awbNo }
              });

              if (response.data.success) {
                response.data.data.forEach((image, index) => {
                  downloadFile(
                    image.imageUrl,
                    `shipping_label_${awbNo}__${labelCode}_${index + 1}.png`
                  );
                });
              } else {
                throw new Error("API response indicates failure");
              }
            }

            // Helper function for DTDC labels
            async function handleDTDCLabel(awbNo, labelCode, apiKey) {
              const apiUrl = `https://dtdcapi.shipsy.io/api/customer/integration/consignment/shippinglabel/stream?reference_number=${awbNo}&label_code=${labelCode}&label_format=pdf`;

              const response = await axios.get(apiUrl, {
                headers: {
                  'api-key': apiKey,
                  'Content-Type': 'application/json'
                },
                responseType: 'blob'
              });

              const url = window.URL.createObjectURL(new Blob([response.data], { type: 'application/pdf' }));
              openPDFInNewTab(url, awbNo, labelCode);
            }

            // Helper function for Delhivery Standard Surface labels
            async function handleDelhiveryStandardLabel(awbNo) {
              const response = await axios.get('/delhivery-standard-label', {
                params: { awbNo }
              });

              if (response.data?.success) {
                // If we have a direct PDF URL
                if (response.data.pdfUrl) {
                  // Open PDF in new tab
                  const newTab = window.open(response.data.pdfUrl);
                  if (newTab) {
                    newTab.focus();
                  } else {
                    // If popup was blocked, create a download link
                    const link = document.createElement('a');
                    link.href = response.data.pdfUrl;
                    link.download = `packing_slip_${awbNo}.pdf`;
                    link.target = '_blank';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                  }
                }
                // If we have PDF encoding
                else if (response.data.pdfEncoding) {
                  // Convert base64 to blob
                  const pdfBlob = base64ToBlob(response.data.pdfEncoding, 'application/pdf');
                  const blobUrl = URL.createObjectURL(pdfBlob);

                  // Open PDF in new tab
                  const newTab = window.open(blobUrl);
                  if (newTab) {
                    newTab.focus();
                  } else {
                    // If popup was blocked, create a download link
                    const link = document.createElement('a');
                    link.href = blobUrl;
                    link.download = `packing_slip_${awbNo}.pdf`;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    URL.revokeObjectURL(blobUrl);
                  }
                }
              } else {
                throw new Error("Invalid response format from Delhivery Standard Surface API");
              }
            }

            // Utility function to download files
            function downloadFile(url, filename) {
              const link = document.createElement('a');
              link.href = url;
              link.download = filename;
              document.body.appendChild(link);
              link.click();
              document.body.removeChild(link);
            }

            // Utility function to open PDF in new tab
            function openPDFInNewTab(url, awbNo, labelCode) {
              const newTab = window.open(url);
              newTab.onload = () => {
                const downloadLink = newTab.document.createElement('a');
                downloadLink.href = url;
                downloadLink.download = `${awbNo}_${labelCode}.pdf`;
                downloadLink.innerText = 'Download PDF';
                newTab.document.body.appendChild(downloadLink);
              };
            }

            // Utility function to convert base64 to blob
            function base64ToBlob(base64, type = 'application/pdf') {
              const byteCharacters = atob(base64);
              const byteNumbers = new Array(byteCharacters.length);

              for (let i = 0; i < byteCharacters.length; i++) {
                byteNumbers[i] = byteCharacters.charCodeAt(i);
              }

              const byteArray = new Uint8Array(byteNumbers);
              return new Blob([byteArray], { type });
            }
          </script>

          <link rel="stylesheet" type="text/css"
            href="https://cdn.datatables.net/1.13.1/css/dataTables.bootstrap4.min.css">


          <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>





          <script>
            let clinetAggrigator = null;
            document.getElementById('client_select').addEventListener('change', async function () {
              const clientId = this.value;
              clinetAggrigator = clientId

              // Clear the table if no client is selected
              if (!clientId) {
                document.getElementById('table-body').innerHTML = '';
                return;
              }

              try {
                // Fetch data using axios
                const response = await axios.get(`/fetch-orders`, {
                  params: { client_id: clientId },
                });

                const data = response.data;

                // Update the table with new data
                const tableBody = document.getElementById('table-body');
                tableBody.innerHTML = ''; // Clear existing rows

                data.forEach((item) => {
                  tableBody.innerHTML += `
        <tr>
          <td style="text-align: left; padding: 8px;"><input type="checkbox" class="row-checkbox" /></td>
          <td class="text-left">
            <span class="order-id" 
              data-bs-toggle="offcanvas" 
              data-bs-target="#orderDetailsCanvas" 
              aria-controls="orderDetailsCanvas" 
              style="color: #1e6bd7; font-size: 12px; cursor: pointer;">
              ${item.order_id}
            </span><br> 
            <span class="po-no" style="font-size: 12px; color: #555;">
              ${item.po_no}
            </span>
          </td>
          <td class="text-left" style="font-size: 12px; color: #555;">
            ${item.order_date}
          </td>
          <td class="text-left" style="font-size: 12px; color: #555;">
            <div class="milestone-container">
              <div class="origin">${item.warehouse_address}</div>
              <div class="destination">${item.consignee_address}</div>
              <div class="milestone-line">
                <div class="truck-icon origin"><i class="fa-solid fa-shop" style="font-size: 10px;"></i></div>
                <div class="truck-icon destination"><i class="fas fa-truck" style="font-size: 10px;"></i></div>
              </div>
            </div>
          </td>
          <td class="text-left" style="font-size: 12px; color: #555;">
            ${item.total_boxes || 0}
          </td>
          <td class="text-left">
            ${item.payment_type}<br>
            <h5 style="font-size: 12px; color: #1f50b5;">
              ₹ ${item.amount}
            </h5>
          </td>
          <td class="text-left p-0" style="padding: 10px !important;">
           <button class="btn-assign-lr btn btn-success btn-square btn-outline-dashed" 
                              style="display: flex;flex-direction: row;flex-wrap: nowrap;align-content: center;justify-content: space-around;align-items: center;">
                              <i class="ti ti-truck menu-icon" style="font-size: 12px;"></i>&nbsp;&nbsp;Assign LR
                            </button>
          </td>
        </tr>`;
                });
              } catch (error) {
                console.error('Error fetching data:', error);
              }
            });

          </script>

          <script>
            // Handle submenu toggle
            document.querySelectorAll('.dropdown-submenu > a').forEach(function (element) {
              element.addEventListener('click', function (e) {
                e.preventDefault();
                e.stopPropagation();

                // Close all open submenus
                var openSubmenus = document.querySelectorAll('.dropdown-submenu .dropdown-menu');
                openSubmenus.forEach(function (submenu) {
                  submenu.style.display = 'none';
                });

                // Open the current submenu
                var currentSubmenu = this.nextElementSibling;
                currentSubmenu.style.display = 'block';
              });
            });
          </script>
          <script>
            document.addEventListener('DOMContentLoaded', function () {
              // Add event listener to all "Cancel LR/AWB" buttons
              document.querySelectorAll('.cancel-lr').forEach(button => {
                button.addEventListener('click', async function (event) {
                  event.preventDefault(); // Prevent default link behavior

                  const courier_partner = this.getAttribute('data-courier'); // Get client type
                  const lrNumber = this.getAttribute('data-awb-number');
                  const po_number = this.getAttribute("data-poid")
                  const client_id = this.getAttribute("data-client-id")
                  console.log("client_id: " + client_id)
                  if (!courier_partner || !lrNumber) {
                    console.error('Client type or LR number is missing.');
                    return;
                  }

                  // Check for DTDC LTL services
                  if (courier_partner === 'DTDC/LTL-surface' || courier_partner === 'DTDC/ltl') {
                    Swal.fire({
                      title: 'Cannot Cancel',
                      text: 'DTDC LTL LR cannot be cancelled',
                      icon: 'error',
                      confirmButtonText: 'OK'
                    });
                    return;
                  }

                  // Show confirmation dialog before proceeding
                  const result = await Swal.fire({
                    title: 'Confirm Cancellation',
                    text: `Do you really want to cancel LR ${lrNumber}?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, cancel it!',
                    cancelButtonText: 'No, keep it'
                  });

                  // If user confirms, proceed with cancellation
                  if (result.isConfirmed) {
                    try {
                      let response;
                      let apiEndpoint = '';

                      // Determine which API endpoint to use based on courier_partner
                      if (courier_partner === 'Delhivery/Standard-Surface' ||
                        courier_partner === 'Delhivery/standard-surface' ||
                        courier_partner === 'Delhivery/Standard-Air' ||
                        courier_partner === 'Delhivery/standard-air') {
                        apiEndpoint = '/api/cancel-delhivery-standard';
                      } else if (courier_partner === 'Delhivery/LTL-surface') {
                        apiEndpoint = '/api/cancel-delhivery-ltl';
                      } else if (courier_partner === 'DTDC/Standard-Surface') {
                        apiEndpoint = '/api/cancel-dtdc-standard';
                      } else if (courier_partner === 'expressbees/Standard-Surface' ||
                        courier_partner === 'expressbees/Standard-Air') {
                        apiEndpoint = '/api/cancel-expressbees-standard';
                      } else {
                        console.error('Unsupported client type:', courier_partner);
                        return;
                      }

                      // Make the API call
                      response = await axios.post(apiEndpoint, { lrNumber, po_number, client_id });

                      // Handle success response
                      if ((response.data.status === true) || (response.data.success)) {
                        Swal.fire({
                          title: 'Success!',
                          text: `LR ${lrNumber} cancelled successfully for ${courier_partner}.`,
                          icon: 'success',
                          confirmButtonText: 'OK'
                        }).then(() => {
                          window.location.reload();
                        });
                      } else {
                        Swal.fire({
                          title: 'Failure!',
                          text: `Failed to cancel LR ${lrNumber} for ${courier_partner}.`,
                          icon: 'error',
                          confirmButtonText: 'Try Again'
                        });
                      }
                    } catch (error) {
                      console.error('Error cancelling LR:', error);
                      Swal.fire({
                        title: 'Error!',
                        text: 'An error occurred while cancelling the LR. Please try again.',
                        icon: 'error',
                        confirmButtonText: 'Close'
                      });
                    }
                  }
                });
              });
            });
          </script>
          <!-- Add this before closing </body> tag -->
          <script
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAUn2MQSdLGnXLCK3smc1Y3lFgc76fwwh8&callback=initMap"
            async defer></script>
          <script>
            document.querySelectorAll('.print-label').forEach(function (element) {
              element.addEventListener('click', async function (e) {
                e.preventDefault();

                // Get data from attributes
                const courier = this.getAttribute('data-courier');
                const clientId = this.getAttribute('client-id');
                const aggrigatorId = this.getAttribute('aggrigator-id');
                const awbNumber = this.getAttribute('data-awb-number');
                const poId = this.getAttribute('data-poid');
                const labelSize = this.getAttribute('data-size');

                let apiEndpoint = '/get-shipping-label';

                // Use dedicated endpoint for Delhivery/LTL-surface
                if (courier === 'Delhivery/LTL-surface') {
                  apiEndpoint = '/api/shipping-label/delhivery-ltl';
                }

                try {
                  Swal.fire({
                    title: 'Generating Label...',
                    text: 'Please wait while we generate your shipping label',
                    allowOutsideClick: false,
                    didOpen: () => {
                      Swal.showLoading();
                    }
                  });

                  const response = await axios.get(apiEndpoint, {
                    params: {
                      courier,
                      awbNumber,
                      poId,
                      labelSize,
                      clientId,
                      aggrigatorId
                    },
                    responseType: 'blob'
                  });

                  // Process PDF blob and download
                  const blob = new Blob([response.data], { type: 'application/pdf' });
                  const url = window.URL.createObjectURL(blob);

                  const link = document.createElement('a');
                  link.href = url;
                  link.download = `shipping-label-${awbNumber}-${labelSize}.pdf`;
                  link.style.display = 'none';
                  document.body.appendChild(link);

                  link.click();

                  setTimeout(() => {
                    document.body.removeChild(link);
                    window.URL.revokeObjectURL(url);
                  }, 100);

                  Swal.close();
                } catch (error) {
                  console.error('Error fetching label:', error);
                  Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to generate shipping label. Please try again.'
                  });
                }
              });
            });
          </script>

          <script>
            let map;
            let directionsService;
            let directionsRenderer;
            let markers = [];

            function initMap() {
              directionsService = new google.maps.DirectionsService();
              directionsRenderer = new google.maps.DirectionsRenderer({
                suppressMarkers: true,
                polylineOptions: {
                  strokeColor: '#0000FF', // Blue color for the route
                  strokeWeight: 4
                }
              });

              const styles = [
                {
                  stylers: [
                    { saturation: -80 },
                    { lightness: 20 }
                  ]
                }
              ];

              map = new google.maps.Map(document.getElementById("map"), {
                zoom: 20,
                center: { lat: 20.5937, lng: 78.9629 },
                mapTypeControl: false,
                fullscreenControl: true,
                streetViewControl: false,
                styles: styles
              });

              directionsRenderer.setMap(map);
            }

            function createMarker(position, type, title, status) {
              let iconUrl;
              switch (type) {
                case 'origin':
                  iconUrl = 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png';
                  break;
                case 'intermediate':
                  iconUrl = 'https://maps.google.com/mapfiles/ms/icons/yellow-dot.png';
                  break;
                case 'current':
                  iconUrl = 'https://maps.google.com/mapfiles/ms/icons/green-dot.png';
                  break;
                case 'destination':
                  iconUrl = 'https://maps.google.com/mapfiles/ms/icons/red-dot.png';
                  break;
                default:
                  iconUrl = 'https://maps.google.com/mapfiles/ms/icons/grey-dot.png';
              }

              const marker = new google.maps.Marker({
                position: position,
                map: map,
                icon: {
                  url: iconUrl,
                  scaledSize: new google.maps.Size(40, 40)
                },
                title: title,
                animation: google.maps.Animation.DROP
              });

              const infoWindow = new google.maps.InfoWindow({
                content: `<div style="padding: 10px">
              <strong>${title}</strong>
              ${status ? `<br><small>${status}</small>` : ''}
          </div>`
              });

              marker.addListener('click', () => {
                infoWindow.open(map, marker);
              });

              markers.push(marker);
              return marker;
            }

            function calculateAndDisplayRoute(deliveryStatus, finalDestination, eta) {
              markers.forEach(marker => marker.setMap(null));
              markers = [];

              const geocoder = new google.maps.Geocoder();
              const bounds = new google.maps.LatLngBounds();

              const processLocations = async () => {
                try {
                  const routeService = new google.maps.DirectionsService();
                  const geocodedLocations = [];
                  let totalDistance = 0;
                  let totalDurationInDays = parseInt(eta) || 5;

                  // Filter unique locations while preserving order
                  const uniqueDeliveryStatus = deliveryStatus.filter((status, index, self) =>
                    index === self.findIndex(s => s.location === status.location)
                  );

                  const firstDate = new Date(uniqueDeliveryStatus[0].date);
                  const currentDate = new Date();
                  const elapsedDays = Math.floor((currentDate - firstDate) / (1000 * 60 * 60 * 24));

                  // Geocode all locations
                  for (let i = 0; i < uniqueDeliveryStatus.length; i++) {
                    const location = uniqueDeliveryStatus[i].location;
                    const status = uniqueDeliveryStatus[i].status;
                    const date = uniqueDeliveryStatus[i].date;

                    try {
                      const results = await new Promise((resolve, reject) => {
                        geocoder.geocode({ address: location + ', India' }, (results, geoStatus) => {
                          if (geoStatus === 'OK') resolve(results);
                          else reject(geoStatus);
                        });
                      });

                      const markerType = i === uniqueDeliveryStatus.length - 1 ? 'current' :
                        i === 0 ? 'origin' : 'intermediate';

                      createMarker(
                        results[0].geometry.location,
                        markerType,
                        location,
                        `Status: ${status}<br>Date: ${new Date(date).toLocaleString()}`
                      );

                      bounds.extend(results[0].geometry.location);
                      geocodedLocations.push(results[0].geometry.location);
                    } catch (error) {
                      console.error(`Error geocoding location ${location}:`, error);
                    }
                  }

                  // Add destination marker if different from last location
                  if (finalDestination && finalDestination !== uniqueDeliveryStatus[uniqueDeliveryStatus.length - 1].location) {
                    try {
                      const results = await new Promise((resolve, reject) => {
                        geocoder.geocode({ address: finalDestination + ', India' }, (results, geoStatus) => {
                          if (geoStatus === 'OK') resolve(results);
                          else reject(geoStatus);
                        });
                      });

                      createMarker(
                        results[0].geometry.location,
                        'destination',
                        finalDestination,
                        'Final Destination'
                      );

                      bounds.extend(results[0].geometry.location);
                      geocodedLocations.push(results[0].geometry.location);
                    } catch (error) {
                      console.error(`Error geocoding destination ${finalDestination}:`, error);
                    }
                  }

                  // Calculate route through all points
                  if (geocodedLocations.length >= 2) {
                    const waypoints = geocodedLocations.slice(1, -1).map(location => ({
                      location: location,
                      stopover: true
                    }));

                    const routeRequest = {
                      origin: geocodedLocations[0],
                      destination: geocodedLocations[geocodedLocations.length - 1],
                      waypoints: waypoints,
                      optimizeWaypoints: false, // Don't reorder waypoints
                      travelMode: google.maps.TravelMode.DRIVING
                    };

                    const response = await new Promise((resolve, reject) => {
                      routeService.route(routeRequest, (result, status) => {
                        if (status === 'OK') resolve(result);
                        else reject(status);
                      });
                    });

                    // Calculate total distance and remaining distance
                    totalDistance = response.routes[0].legs.reduce((acc, leg) => acc + leg.distance.value, 0);
                    const remainingDistance = response.routes[0].legs[response.routes[0].legs.length - 1].distance.value;
                    const completedDistance = totalDistance - remainingDistance;

                    const remainingDays = Math.max(0, totalDurationInDays - elapsedDays);
                    const completedPercentage = ((completedDistance / totalDistance) * 100).toFixed(1);

                    // Update the map and directions
                    directionsRenderer.setDirections(response);
                    map.fitBounds(bounds);

                    // Update UI elements
                    const durationText = remainingDays === 0 ? "Delivery overdue" :
                      remainingDays === 1 ? "1 day remaining" :
                        `${remainingDays} days remaining`;

                    document.getElementById("total_distance").textContent = `${(totalDistance / 1000).toFixed(1)} km`;
                    document.getElementById("distance").textContent = `${(remainingDistance / 1000).toFixed(1)} km`;
                    document.getElementById("duration").textContent = durationText;
                    document.getElementById("map_info").textContent =
                      `Total: ${(totalDistance / 1000).toFixed(1)}km | ` +
                      `Remaining: ${(remainingDistance / 1000).toFixed(1)}km | ` +
                      `Progress: ${completedPercentage}% | ` +
                      `ETA: ${durationText}`;
                  }

                } catch (error) {
                  console.error('Error in route calculation:', error);
                }
              };

              processLocations();
            }

          </script>

          <!-- jQuery (Only once) -->
          <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

          <!-- DataTables Core -->
          <script src="https://cdn.datatables.net/1.13.1/js/jquery.dataTables.min.js"></script>
          <script src="https://cdn.datatables.net/1.13.1/js/dataTables.bootstrap4.min.js"></script>

          <!-- DataTables Buttons Extension -->
          <script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>
          <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.bootstrap4.min.js"></script>
          <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
          <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
          <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
          <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>
          <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.print.min.js"></script>





          <script>
            let dataTable;

            $(document).ready(function () {
              if ($.fn.dataTable.isDataTable('#datatable_2')) {
                dataTable = $('#datatable_2').DataTable();
              } else {
                dataTable = $('#datatable_2').DataTable({
                  ordering: false,
                  searching: true,
                  lengthChange: false,
                  info: true,
                  paging: true,
                  dom: '<"row mb-3"<"col-md-6"l><"col-md-6 d-flex justify-content-end"B>>rtip',
                  language: {
                    info: "<div style='float: left;'>Showing _START_ to _END_ of _TOTAL_ entries</div>"
                  },
                  pagingType: "full_numbers",
                  pageLength: 10,
                  buttons: [
                    {
                      extend: 'csv',
                      text: '<i class="fas fa-file-csv"></i> CSV',
                      className: 'btn btn-sm btn-primary me-1',
                      title: 'Ready to dispatch data',
                      exportOptions: { columns: ':visible', search: 'applied', order: 'applied' }
                    },
                    {
                      extend: 'excel',
                      text: '<i class="fas fa-file-excel"></i> Excel',
                      className: 'btn btn-sm btn-success me-1',
                      title: 'Ready to dispatch data Export',
                      exportOptions: { columns: ':visible', search: 'applied', order: 'applied' }
                    },
                    {
                      extend: 'pdf',
                      text: '<i class="fas fa-file-pdf"></i> PDF',
                      className: 'btn btn-sm btn-danger me-1',
                      title: 'Ready to dispatch data Export',
                      exportOptions: { columns: ':visible', search: 'applied', order: 'applied' }
                    },
                    {
                      extend: 'print',
                      text: '<i class="fas fa-print"></i> Print',
                      className: 'btn btn-sm btn-secondary me-1',
                      title: 'Ready to dispatch data',
                      exportOptions: { columns: ':visible', search: 'applied', order: 'applied' }
                    }
                  ],
                  drawCallback: function () {
                    $('.paginate_button').addClass('btn btn-sm').css({
                      'background-color': '#e3f2fd',
                      'border-color': '#90caf9',
                      'color': '#1976d2',
                      'margin': '0 2px',
                      'border-radius': '4px'
                    });
                    $('.paginate_button.current').css({
                      'background-color': '#1976d2',
                      'color': '#fff',
                      'border-color': '#1976d2'
                    });
                    $('.paginate_button.disabled').css({
                      'opacity': '0.5',
                      'cursor': 'not-allowed'
                    });
                    $('.dt-buttons').css({
                      'display': 'flex',
                      'justify-content': 'flex-end',
                      'margin-bottom': '10px',
                      'margin-right': '10px'
                    });
                    $('.dt-button').addClass('btn btn-sm mx-1').css({
                      'border-radius': '4px'
                    });
                  }
                });
              }

              if ($('.filter-indicators').length === 0) {
                $('.row.filter.p-4').after('<div class="filter-indicators d-flex flex-wrap mx-4 mb-3"></div>');
              }

              $('#search-input').on('keyup', function () {
                dataTable.search(this.value).draw();
              });

              $('#button-addon2').on('click', function () {
                dataTable.search($('#search-input').val()).draw();
              });
            });

            function populateClientFilter() {
              const clientSelect = $('#clientSelect');
              clientSelect.empty().append('<option value="">All Clients</option>');
              const clientMap = new Map();
              $('#datatable_2 tbody tr').each(function () {
                const clientId = $(this).data('client');
                const companyName = $(this).data('company-name') || `Client ${clientId}`;
                if (clientId && !clientMap.has(clientId)) {
                  clientMap.set(clientId, companyName);
                  clientSelect.append(`<option value="${clientId}">${companyName}</option>`);
                }
              });
            }

            function populatePaymentFilter() {
              const paymentSelect = $('#paymentModeSelect');
              paymentSelect.empty().append('<option value="">All Payment Modes</option>');
              const paymentModes = new Set();
              $('#datatable_2 tbody tr').each(function () {
                const paymentMode = $(this).data('payment');
                if (paymentMode && !paymentModes.has(paymentMode)) {
                  paymentModes.add(paymentMode);
                  paymentSelect.append(`<option value="${paymentMode}">${paymentMode}</option>`);
                }
              });
            }

            function formatDateForInput(date) {
              const year = date.getFullYear();
              const month = String(date.getMonth() + 1).padStart(2, '0');
              const day = String(date.getDate()).padStart(2, '0');
              return `${year}-${month}-${day}`;
            }

            function showActiveFilter(type, value) {
              const labelMap = { client: 'Client', payment: 'Payment', date: 'Date' };
              if ($('.filter-indicators').length === 0) {
                $('.row.filter.p-4').after('<div class="filter-indicators d-flex flex-wrap mx-4 mb-3"></div>');
              }
              let filterIndicator = $('#active-filter-' + type);
              const label = labelMap[type];
              const html = `${label}: ${value} <button type="button" class="btn-close btn-close-white ms-2" onclick="clearFilter('${type}')"></button>`;
              if (filterIndicator.length === 0) {
                $('.filter-indicators').append(`<span id="active-filter-${type}" class="badge bg-primary me-2 mb-2">${html}</span>`);
              } else {
                filterIndicator.html(html);
              }
            }

            function clearFilter(type) {
              $('#active-filter-' + type).remove();
              if (type === 'client') {
                $('#clientSelect').val('');
              } else if (type === 'payment') {
                $('#paymentModeSelect').val('');
              } else if (type === 'date') {
                $('#min-date, #max-date').val('');
              }
              dataTable.draw();
            }
          </script>



          <!-- Add this at the end of your file, just before the closing body tag -->
          <script>
            // Check if DataTables Buttons is loaded
            $(document).ready(function () {
              if (typeof $.fn.dataTable.Buttons === 'undefined') {
                console.error('DataTables Buttons extension is not loaded!');
              }
            });
          </script>
          <script src="https://unpkg.com/pdf-lib/dist/pdf-lib.min.js"></script>
          <!-- Add this script at the end of your file, before the closing </body> tag -->
          <script>
            document.addEventListener('DOMContentLoaded', function () {
              const selectAllCheckbox = document.getElementById('selectAll');
              const bulkActionsButton = document.getElementById('bulkActionsDropdown');

              // Handle "Select All" checkbox - modified to only select visible rows
              if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener('change', function () {
                  const isChecked = this.checked;

                  // Get only the checkboxes that are currently visible on the page
                  const visibleRows = $('#datatable_2').DataTable().rows({ page: 'current' }).nodes();
                  const visibleCheckboxes = Array.from(visibleRows).map(row =>
                    row.querySelector('.rowCheckbox')
                  ).filter(checkbox => checkbox !== null);

                  // Check/uncheck only the visible checkboxes
                  visibleCheckboxes.forEach(checkbox => {
                    checkbox.checked = isChecked;
                  });

                  updateBulkActionsButton();
                });
              }

              // Handle individual row checkboxes
              $(document).on('change', '.rowCheckbox', function () {
                updateBulkActionsButton();

                // Update "Select All" checkbox state based on visible checkboxes
                if (selectAllCheckbox) {
                  const visibleRows = $('#datatable_2').DataTable().rows({ page: 'current' }).nodes();
                  const visibleCheckboxes = Array.from(visibleRows).map(row =>
                    row.querySelector('.rowCheckbox')
                  ).filter(checkbox => checkbox !== null);

                  const allChecked = visibleCheckboxes.length > 0 &&
                    visibleCheckboxes.every(cb => cb.checked);
                  const someChecked = visibleCheckboxes.some(cb => cb.checked);

                  selectAllCheckbox.checked = allChecked;
                  selectAllCheckbox.indeterminate = someChecked && !allChecked;
                }
              });

              // Enable/disable bulk actions button based on selections
              function updateBulkActionsButton() {
                if (bulkActionsButton) {
                  // Check if any checkbox is checked across all pages
                  const anyChecked = $('.rowCheckbox:checked').length > 0;
                  bulkActionsButton.disabled = !anyChecked;
                }
              }

              // Handle bulk print label actions
              document.querySelectorAll('.bulk-print-label').forEach(link => {
                link.addEventListener('click', function (e) {
                  e.preventDefault();
                  const labelSize = this.getAttribute('data-size');
                  const selectedRows = [];

                  // Get all selected rows data (from all pages)
                  $('.rowCheckbox:checked').each(function () {
                    const row = $(this).closest('tr');
                    const lrNoElement = row.find('.lrNo')[0];

                    if (lrNoElement) {
                      selectedRows.push({
                        lrNo: lrNoElement.getAttribute('data-lrno'),
                        courier: lrNoElement.getAttribute('data-vendor-type'),
                        poId: lrNoElement.getAttribute('data-pono'),
                      });
                    }
                  });

                  if (selectedRows.length === 0) {
                    alert('Please select at least one row');
                    return;
                  }

                  // Send the data to your backend
                  printBulkLabels(selectedRows, labelSize);
                });
              });

              // Function to send bulk print request to backend
              function printBulkLabels(selectedRows, labelSize) {
                // Show loading indicator
                const loadingOverlay = document.createElement('div');
                loadingOverlay.id = 'loading-overlay';
                loadingOverlay.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255,255,255,0.8); display: flex; justify-content: center; align-items: center; z-index: 9999;';
                loadingOverlay.innerHTML = '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>';
                document.body.appendChild(loadingOverlay);

                // Separate Delhivery/LTL-surface labels from others
                const delhiveryLTLRows = selectedRows.filter(row => row.courier === 'Delhivery/LTL-surface');
                const otherRows = selectedRows.filter(row => row.courier !== 'Delhivery/LTL-surface');

                // Array to store all PDF buffers
                const allPdfBuffers = [];

                // First process non-Delhivery/LTL-surface labels
                const regularLabelsPromise = otherRows.length > 0 ?
                  axios.post('/api/print-bulk-labels', {
                    selectedRows: otherRows,
                    labelSize: labelSize
                  }, {
                    responseType: 'arraybuffer',
                    headers: {
                      'Accept': 'application/pdf'
                    }
                  }) : Promise.resolve(null);

                // Process Delhivery/LTL-surface labels
                const delhiveryLTLPromises = delhiveryLTLRows.map(row =>
                  axios.get('/api/shipping-label/delhivery-ltl', {
                    params: {
                      awbNumber: row.lrNo,
                      poId: row.poId,
                      labelSize: labelSize,
                      clientId: row.clientId,
                      aggrigatorId: row.aggrigatorId
                    },
                    responseType: 'arraybuffer',
                    headers: {
                      'Accept': 'application/pdf'
                    }
                  })
                );

                // Process all promises
                Promise.all([regularLabelsPromise, ...delhiveryLTLPromises])
                  .then(async responses => {
                    try {
                      // Convert all responses to PDF buffers
                      for (const response of responses) {
                        if (response && response.data) {
                          // Convert blob to ArrayBuffer
                          const arrayBuffer = await new Response(response.data).arrayBuffer();
                          allPdfBuffers.push(arrayBuffer);
                        }
                      }

                      if (allPdfBuffers.length === 0) {
                        throw new Error('No PDF data received from the server');
                      }

                      console.log('Creating new PDF document...');
                      // Merge PDFs using PDF-LIB
                      const mergedPdf = await PDFLib.PDFDocument.create();

                      console.log('Processing', allPdfBuffers.length, 'PDFs...');
                      for (let i = 0; i < allPdfBuffers.length; i++) {
                        try {
                          console.log('Loading PDF', i + 1);
                          const pdfBuffer = allPdfBuffers[i];
                          console.log('PDF buffer type:', Object.prototype.toString.call(pdfBuffer));
                          const pdf = await PDFLib.PDFDocument.load(pdfBuffer);
                          console.log('Copying pages from PDF', i + 1);
                          const copiedPages = await mergedPdf.copyPages(pdf, pdf.getPageIndices());
                          console.log('Adding', copiedPages.length, 'pages from PDF', i + 1);
                          copiedPages.forEach((page) => {
                            mergedPdf.addPage(page);
                          });
                        } catch (pdfError) {
                          console.error('Error processing PDF', i + 1, ':', pdfError);
                          throw new Error(`Failed to process PDF ${i + 1}: ${pdfError.message}`);
                        }
                      }

                      console.log('Saving merged PDF...');
                      const finalPdfBytes = await mergedPdf.save();

                      console.log('Creating download link...');
                      // Create final blob and download
                      const blob = new Blob([finalPdfBytes], { type: 'application/pdf' });
                      const link = document.createElement('a');
                      link.href = window.URL.createObjectURL(blob);
                      link.download = `batch_labels_${Date.now()}.pdf`;

                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);
                      console.log('PDF download initiated');
                    } catch (error) {
                      console.error('Error merging PDFs:', error);
                      alert('Error merging PDFs: ' + error.message);
                    }
                  })
                  .catch(error => {
                    console.error('Error generating labels:', error);
                    alert('An error occurred while generating labels. Please try again.');
                  })
                  .finally(() => {
                    document.body.removeChild(loadingOverlay);
                  });
              }

              // Update checkboxes when page changes
              $('#datatable_2').on('page.dt', function () {
                if (selectAllCheckbox) {
                  selectAllCheckbox.checked = false;
                  selectAllCheckbox.indeterminate = false;
                }
              });
            });
          </script>


          <%- include('../partials/footer') %>
            <!-- स्क्रिप्ट्स -->
            <script src="/js/main.js"></script>
        </body>

</html>