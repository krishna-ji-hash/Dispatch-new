<!DOCTYPE html>
<html lang="hi">
    <head>
        <%- include('../partials/head') %>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Dashboard</title>
        <!-- SweetAlert CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<!-- DataTables CSS -->
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.1/css/dataTables.bootstrap4.min.css">
<link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.dataTables.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<!-- jQuery first, then DataTables -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.1/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.13.1/js/dataTables.bootstrap4.min.js"></script>

<!-- DataTables Buttons Extension -->
<script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.bootstrap4.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.print.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
 
 

<style>
/* pegination styling krishna */
.pagination {
    --bs-pagination-padding-x: 0px !important;
    --bs-pagination-padding-y: 0px !important;
    --bs-pagination-font-size: 12px !important;
    --bs-pagination-bg: transparent !important;
    --bs-pagination-disabled-color: #7081b9 !important;
    --bs-pagination-disabled-bg: transparent !important;
        --bs-pagination-border-color:transparent !important;
    display: flex;
    padding-left: 0;
    list-style: none;
}

.page-link {
    color: #777777c1;
    background-color: transparent;
  
    padding: 2px 6px;
    margin: 0 3px;
    border-radius: 4px;
    transition: all 0.2s ease-in-out;
}

.page-link:hover {

    text-decoration: none;
    color: #000;
}

.active > .page-link, 
.page-link.active {
    z-index: 3;
    color: #ffffff;
    background-color: #d5d7d8 ; /* Professional dark grey */
    /* color: #333 !important; */
    border: 1px solid #979797;
    background-color: white!important;
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, white), color-stop(100%, #dcdcdc));
    background: -webkit-linear-gradient(top, white 0%, #dcdcdc 100%);
    background: -moz-linear-gradient(top, white 0%, #dcdcdc 100%);
    background: -ms-linear-gradient(top, white 0%, #dcdcdc 100%);
    background: -o-linear-gradient(top, white 0%, #dcdcdc 100%);
    background: linear-gradient(to bottom, white 0%, #dcdcdc 100%);
    font-weight: 500;
    box-shadow: 0 0 4px rgba(0, 0, 0, 0.1);
}
.active>.page-link, .page-link.active {
    
    color: var(--bs-pagination-active-color);
    background-color: var(--bs-pagination-active-bg);
    border-color: rgba(101, 101, 101, 0.666) !important;
}
div.dataTables_wrapper div.dataTables_info {
    padding-top: .85em;
    position: absolute;
}
/* pegination styling end */


.customcardcontainer {
  background: linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%);
  padding: 10px;
  border-radius: 20px;
}

#reportrange {
        background-color:#c7dcfb;
        cursor: pointer;
        padding: 8px 12px;
        border-radius: 10px;
        font-size: 13px;
        font-weight: 500;
        color: #5c6c7d;
        display: inline-flex;
        align-items: center;
        gap: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease-in-out;
    }

    #reportrange:hover {
        background: rgba(128, 128, 128, 0.088);
    }
.map-container {
    padding: 15px;
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.map-header {
  display: flex
;
    justify-content: center;
    align-items: center;
}



.info-card i {
    font-size: 24px;
    color: #007bff;
}

.info-card div {
    display: flex;
    flex-direction: column;
}

.info-card label {
    font-size: 12px;
    color: #6c757d;
    margin: 0;
}

.info-card span {
    font-weight: bold;
    color: #343a40;
}

.map-legend {
    display: flex;
    justify-content: center;
    gap: 20px;
    padding: 10px;
    background: #f8f9fa;
    border-radius: 8px;
    margin-top: 15px;
}

.map-legend span {
    display: flex;
    align-items: center;
    gap: 5px;
    font-size: 14px;
    color: #6c757d;
}

  .milestone-container {
    position: relative;
    padding-left: 40px; /* Space for truck icons to the left */
    padding-right: 20px; /* Padding to the right of the data */
    padding-top: 30px;
    padding-bottom: 30px; /* Padding at the bottom for better spacing */
  }
  .dataTables_filter {
  display: none !important;
}
.milestone-container {
  position: relative;
  padding-left: 40px; /* Space for truck icons to the left */
  padding-right: 20px; /* Padding to the right of the data */
  padding-top: 0px;
  padding-bottom: 0px; /* Padding at the bottom for better spacing */
  display: flex;
  flex-direction: column;
  align-items: flex-start; /* Align everything to the left */
  margin-bottom: 5px;
}
 
.milestone-line {
  position: absolute;
  left: 12px; /* Adjust the line to align with the icons */
  top: 0;
  width: 2px;
  height: 100%;
  border-left: 2px dotted #5a99fc; /* Dotted line with #0a84ff color */
}
 
.origin, .destination {
  position: relative;
  font-size: 14px;
  color: #555;
  padding-right: 10px; /* Padding to the right of the text */
  word-wrap: break-word; /* Ensures long text wraps */
  max-width: 250px; /* Limits the width of the text */
  white-space: normal; /* Allows line breaks in long text */
  display: flex; /* Align icons and text horizontally */
  align-items: center; /* Vertically align the text with icons */
}
 
.origin {
 
  left: -10px;
  font-size: 12px;
  text-transform: capitalize;
}
 
.destination {
  bottom: -10px;
  left: -10px;
  font-size: 12px;
  white-space: wrap;
  text-transform: capitalize;
}
 
.truck-icon {
  position: absolute;
  font-size: 24px;
  color: #5a99fc; /* #0a84ff truck icon */
}
 
.truck-icon.origin {
  left: 7px;
 
}
 
.truck-icon.destination {
  left: 7px;
 
}
 
/* Media Queries for Responsiveness */
@media (max-width: 767px) {
  .milestone-container {
      padding-left: 20px; /* Reduce padding on smaller screens */
      padding-right: 10px; /* Less padding on smaller screens */
  }
  .milestone-line {
      left: 10px; /* Adjust the line position for small screens */
  }
  .origin, .destination {
      left: 40px; /* Adjust the text position for smaller screens */
      font-size: 12px; /* Slightly smaller font on small screens */
  }
  .truck-icon.origin {
      left: 4px;
      top: 35px;
  }
  .truck-icon.destination {
      left: 4px;
      bottom: 41px;
  }
}
.rowlrhead{
/* box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 0px 1px; */
display: flex;flex-direction: row;
align-items: center;
align-content: space-around;
justify-content: center;
 
padding: 5px;
}
.divstylelr{
font-size: 12px;
font-weight: 600;
text-transform: uppercase;
color: #545454;
}
/* Beautify the DataTable length menu (Show X entries) */
.dataTables_length {
  margin-bottom: 10px;
  font-size: 12px;
  display: flex
;
  align-items: center;
  justify-content: left;
  text-transform: uppercase;
  }
 
  .dataTables_length label {
      font-weight: 600;
      margin-right: 10px;
      color: #333;
  }
 
  .dataTables_length select {
      padding: 8px 15px;
      font-size: 14px;
      border-radius: 5px;
      border: 1px solid #ddd;
      background-color: #f8f9fa;
      color: #007bff;
      transition: all 0.3s ease;
      cursor: pointer;
  }
 
  .dataTables_length select:hover {
      background-color: #007bff;
      color: white;
      border-color: #007bff;
  }
 
  .dataTables_length select:focus {
      background-color: #ffffff;
      color: #007bff;
      border-color: #007bff;
      outline: none;
  }
 
  /* Optional: Adding an icon for the dropdown */
  .dataTables_length select::-ms-expand {
      display: none; /* Remove default IE icon */
  }
 
  /* Adding a custom arrow icon for better UX */
  .dataTables_length select {
      appearance: none;
      -webkit-appearance: none;
      -moz-appearance: none;
      background-image: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 12"%3E%3Cpath d="M6 9L1 4h10L6 9z" fill="%23007bff"/%3E%3C/svg%3E');
      background-repeat: no-repeat;
      background-position: right 10px center;
      background-size: 12px;
  }
/* DataTable pagination custom style */
.dataTables_paginate {
      margin: 10px !important;
      text-align: center;
  }
 
  .dataTables_paginate .paginate_button {
      border: 1px solid #ddd;
      border-radius: 5px;
      margin: 0 5px;
      padding: 5px 10px;
      font-size: 14px;
      background-color: #f8f9fa;
      color: #007bff;
      transition: background-color 0.3s ease, color 0.3s ease;
  }
 
  .dataTables_paginate .paginate_button:hover {
      background-color: #007bff;
      color: white;
  }
 
  .dataTables_paginate .paginate_button.current {
      background-color: #007bff;
      color: white;
      font-weight: bold;
  }
  .table-responsive{
    overflow: hidden !important;
  }
 
  .dataTables_paginate .paginate_button.disabled {
      background-color: #e9ecef;
      color: #6c757d;
      cursor: not-allowed;
  }
 
 
 .forwarding-partner-card {
    margin-bottom: 15px;
    /* border: 1px solid #dee2e6;
    padding: 4px;
    border-radius: 5px;
    background-color: #f8f9fa; */
  }
 
  .forwarding-partner-card h5 {
    margin-bottom: 10px;
  }
 
.progressList_item {
color: #595959;
font-size: 12px;
line-height: 1.4;
margin: 0 0 -1px;
position: relative;
display: flex;
align-items: center;
}
 
.progressList_item::before {
content: "";
height: 15px;
width: 15px;
min-width: 15px;
border: 3px solid #ddd;
background: #fff;
outline: 2px solid #fff;
margin-right: 15px;
border-radius: 15px;
position: relative;
z-index: 100;
}
 
.progressList_item::after {
content: "";
height: 100%;
position: absolute;
width: 3px;
background: #ddd;
left: 6px;
border-radius: 15px;
display: block;
z-index: 10;
}
 
.progressList_item:first-child::after {
height: 50%;
top: 50%;
}
 
.progressList_item:last-child::after {
height: 50%;
top: 0;
}
 
.progressList_item.is_complete::before,
.progressList_item.is_complete::after {
background: #009d60;
border-color: #009d60;
}
 
.progressList_item.is_complete::before,
.progressList_item.is_complete::after {
background: #009d60;
border-color: #009d60;
}
 
.progressList_item.has_no_step::before {
border-color: transparent;
background: transparent;
outline: 0 solid transparent;
}
 
.progressList_item.is_warning::before {
border-color: #e2ba5f;
}
 
.progressList_item.is_danger::before {
border-color: #ab061c;
}
 
.progressList_item.is_complete,
.progressList_item.is_warning {
color: #333333;
}
 
 
 
 
.card-stepper {
z-index: 0
}
 
#progressbar-2 {
color: #455A64;
}
 
#progressbar-2 li {
list-style-type: none;
font-size: 13px;
width: 33.33%;
float: left;
position: relative;
}
 
#progressbar-2 #step1:before {
content: '\f058';
font-family: "Font Awesome 5 Free";
color: #fff;
width: 37px;
margin-left: 0px;
padding-left: 0px;
}
 
#progressbar-2 #step2:before {
content: '\f058';
font-family: "Font Awesome 5 Free";
color: #fff;
width: 37px;
}
 
#progressbar-2 #step3:before {
content: '\f058';
font-family: "Font Awesome 5 Free";
color: #fff;
width: 37px;
margin-right: 0;
text-align: center;
}
#progressbar-2 #step4:before {
content: '\f058';
font-family: "Font Awesome 5 Free";
color: #fff;
width: 37px;
margin-right: 0;
text-align: center;
}
#progressbar-2 #step5:before {
content: '\f111';
font-family: "Font Awesome 5 Free";
color: #fff;
width: 37px;
margin-right: 0;
text-align: center;
}
#progressbar-2 #step6:before {
content: '\f111';
font-family: "Font Awesome 5 Free";
color: #fff;
width: 37px;
margin-right: 0;
text-align: center;
}
 
 
#progressbar-2 li:before {
line-height: 37px;
display: block;
font-size: 12px;
background: #c5cae9;
border-radius: 50%;
}
 
#progressbar-2 li:after {
content: '';
width: 100%;
height: 10px;
background: #c5cae9;
position: absolute;
left: 0%;
right: 0%;
top: 15px;
z-index: -1;
}
 
#progressbar-2 li:nth-child(1):after {
left: 1%;
width: 100%
}
 
#progressbar-2 li:nth-child(2):after {
left: 1%;
width: 100%;
}
 
#progressbar-2 li:nth-child(3):after {
left: 1%;
width: 100%;
background: #c5cae9 !important;
}
#progressbar-2 li:nth-child(4):after {
left: 1%;
width: 100%;
}
#progressbar-2 li:nth-child(5):after {
left: 1%;
width: 100%;
}
#progressbar-2 li:nth-child(6):after {
left: 1%;
width: 100%;
}

#progressbar-2 li.active:before,
#progressbar-2 li.active:after {
background: #009d60;
}
.steps .step {
  display: block;
  width: 100%;
  margin-bottom: 35px;
  text-align: center
}
 
.steps .step .step-icon-wrap {
  display: block;
  position: relative;
  width: 100%;
  height: 80px;
  text-align: center
}
 
.steps .step .step-icon-wrap::before,
.steps .step .step-icon-wrap::after {
  display: block;
  position: absolute;
  top: 50%;
  width: 50%;
  height: 3px;
  margin-top: -1px;
  background-color: #e1e7ec;
  content: '';
  z-index: 1
}
 
.steps .step .step-icon-wrap::before {
  left: 0
}
 
.steps .step .step-icon-wrap::after {
  right: 0
}
 
.steps .step .step-icon {
  display: inline-block;
  position: relative;
  width: 80px;
  height: 80px;
  border: 1px solid #e1e7ec;
  border-radius: 50%;
  background-color: #f5f5f5;
  color: #374250;
  font-size: 38px;
  line-height: 81px;
  z-index: 5
}
 
.steps .step .step-title {
  margin-top: 16px;
  margin-bottom: 0;
  color: #606975;
  font-size: 14px;
  font-weight: 500
}
 
.steps .step:first-child .step-icon-wrap::before {
  display: none
}
 
.steps .step:last-child .step-icon-wrap::after {
  display: none
}
 
.steps .step.completed .step-icon-wrap::before,
.steps .step.completed .step-icon-wrap::after {
  background-color: #0da9ef
}
 
.steps .step.completed .step-icon {
  border-color: #0da9ef;
  background-color: #0da9ef;
  color: #fff
}
 
@media (max-width: 576px) {
  .flex-sm-nowrap .step .step-icon-wrap::before,
  .flex-sm-nowrap .step .step-icon-wrap::after {
      display: none
  }
}
 
@media (max-width: 768px) {
  .flex-md-nowrap .step .step-icon-wrap::before,
  .flex-md-nowrap .step .step-icon-wrap::after {
      display: none
  }
}
 
@media (max-width: 991px) {
  .flex-lg-nowrap .step .step-icon-wrap::before,
  .flex-lg-nowrap .step .step-icon-wrap::after {
      display: none
  }
}
 
@media (max-width: 1200px) {
  .flex-xl-nowrap .step .step-icon-wrap::before,
  .flex-xl-nowrap .step .step-icon-wrap::after {
      display: none
  }
}
 
.bg-faded, .bg-secondary {
  background-color: #f5f5f5 !important;
}
 
.product-details {
position: fixed;
background-color: #ffffff;
border: 1px solid #1f51b522;
border-radius: 0px 20px;
padding: 10px;
width: 250px;
font-weight: 600;
z-index: 1;
box-shadow: rgba(0, 0, 0, 0.1) 0px 20px 25px -5px, rgba(0, 0, 0, 0.04) 0px 10px 10px -5px;
text-transform: capitalize;
}
table.my-table tr:hover {
background-color: #d4ffec60; /* Change the background color to light gray on hover */
}
/* Timeline Line between Steps */
.timeline-step:not(:first-child)::before {
content: "";
position: absolute;
top: 50%;
left: -40px;
transform: translateY(-50%);
width: 80px;
height: 2px;
background-color: #c4c6cc;
border-radius: 10px; /* Rounded ends */
}
 
.timeline-step:not(:first-child)::before {
background-image: linear-gradient(to right, white 30%, transparent 30%, transparent 70%, white 70%);
background-size: 30px 2px;
background-position: 0% 50%;
animation: wave 2s linear infinite;
}
 
/* Circle Styles */
.timeline-circle {
width: 10px;
height: 10px;
background-color: white;
border-radius: 50%;
margin: 10px auto;
}
 
/* Add Wave Animation */
@keyframes wave {
0% {
  background-position: 0% 50%;
}
100% {
  background-position: 100% 50%;
}
}
 
/* Timeline Step Spacing and Centering */
.timeline-step {
position: relative;
text-align: center;
padding: 20px;
}
 
.timeline-step .badge {
margin-bottom: 10px;
font-size: 14px;
padding: 8px 15px;
}
 
.timeline-step small {
display: block;
margin-top: 10px;
font-size: 12px;
color: #666;
}
 
/* Custom Styles for Badge Colors */
.timeline-step.completed .badge {
background-color: #28a745; /* Green for completed */
}
 
.timeline-step.in-progress .badge {
background-color: #007bff; /* #0a84ff for in-progress */
}
 
.timeline-step.pending .badge {
background-color: #ffc107; /* Yellow for pending */
}
 
/* Ensure Proper Display of Timeline in Smaller Screens */
@media (max-width: 768px) {
.timeline-step:not(:first-child)::before {
  left: -20px;
  width: 40px;
}
 
.timeline-step {
  padding: 10px;
}
}
.ti-truck{
 
  font-size: 15px !important;
 
  font-weight: 100;
 
}
 
 
.offcanvas {
width: 75% !important;
overflow-x: hidden !important;
/* Adjust the width as needed */
}
 
.offcanvas-body {
/* padding: 20px; */
overflow-y: auto;
}
.form-control {
  display: block;
  width: 100%;
  padding: .4rem 1rem;
  font-size: 12px;
  font-weight: 500;
  line-height: 1.5;
  color: #1f50b5;
  background-color: #fff;
  background-clip: padding-box;
  border: 1px solid #e8ebf3;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  border-radius: .25rem;
  -webkit-transition: border-color .15s ease-in-out, -webkit-box-shadow .15s ease-in-out;
  transition: border-color .15s ease-in-out, -webkit-box-shadow .15s ease-in-out;
  transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;
  transition: border-color .15s 
}
.popup-content {
padding: 20px;
}
 
 
.container {
            width: 100%;
            max-width: none;
            background: linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%);
            border-radius: 20px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            color: white;
        }
        .header {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 20px;
        }
        .package {
            background-color: #3a3a3c; 
            border-radius: 15px;
            padding: 15px;
            margin-bottom: 15px;
            position: relative;
        }
        .package.red {
          background: linear-gradient(180deg, rgb(18 29 74) 0%, rgb(44 71 148) 49%, rgb(149 133 171) 91%);
          color: white;
        }
        .package .status {
            position: absolute;
            top: 15px;
            right: 15px;
            background-color: #2975ed;
            color: white;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: 500;
        }
        .package .status.received {
            background-color: #0a84ff;
        }
        .package .order-id {
            font-size: 12px;
            color: #a1a1a1;
            margin-top: 5px;
        }
        .package .progress-bar {
            background-color: #2975ed;
            height: 5px;
            border-radius: 5px;
            margin: 10px 0;
        }
        .package .details {
            display: flex;
            justify-content: space-between;
            font-size: 14px;
            margin-top: 10px;
        }
        .package .driver {
            display: flex;
            align-items: center;
            margin-top: 10px;
        }
        .package .driver img {
            border-radius: 50%;
            width: 40px;
            height: 40px;
            margin-right: 10px;
        }
        .package .driver .name {
            font-size: 14px;
            font-weight: 500;
        }
        .package .driver .icons {
            margin-left: auto;
            display: flex;
            gap: 10px;
        }
        .package .driver .icons i {
            font-size: 18px;
            color: white;
        }
        .order-status {
           
            color: #0b0b0b;
            padding: 20px;
            border-radius: 10px;
            display: flex;
            flex-direction: column;
            align-items: center;
           
        }
        .order-header {
            display: flex;
            justify-content: space-between;
            width: 100%;
            align-items: center;
        }
        .order-header span {
            font-size: 18px;
        }
        .order-header .status {
            background-color: #e53935;
            color: #fff;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 14px;
        }
        .order-details {
            display: flex;
            justify-content: space-between;
            width: 100%;
            margin-top: 20px;
        }
        .order-details div {
            text-align: center;
        }
        .order-details div span {
            display: block;
            font-size: 12px;
        }
        .order-details div .label {
            color: #999;
            font-size: 14px;
        }



.info-cards {
    display: flex;
    flex-direction: column;
    gap: 15px;
}



.info-card i {
    font-size: 24px;
    color: #0b51b7;
}

.info-card div {
    display: flex;
    flex-direction: column;
}

.info-card label {
    font-size: 12px;
    color: #6c757d;
    margin-bottom: 2px;
}

.info-card span {
    font-size: 14px;
    font-weight: 600;
    color: #212529;
}
</style>

    </head>
    <body>
        <%- include('../partials/header') %>
        <%- include('../partials/left-sidebar') %>
        <%- include('../partials/right-iconbar') %>

        <!-- mani page content body part -->

        <body data-theme="light" class="font-nunito">

            <div id="wrapper" class="theme-cyan">
    <div id="main-content">
        <div class="container-fluid">
            <div class="block-header">
                <div class="row">
                    <div class="col-lg-6 col-md-6 col-sm-12">
                        <h2>Order Management</h2>
                        <ul class="breadcrumb">
                            <li class="breadcrumb-item"><a href="index.html"><i class="fa fa-dashboard"></i></a></li>                            
                            <li class="breadcrumb-item">Post Dispatch/li>
                            <li class="breadcrumb-item active">Out For Delivery</li>
                        </ul>
                    </div>
                    <!-- <div class="col-lg-6 col-md-6 col-sm-12">
                        <div class="d-flex flex-row-reverse">
                            <div class="page_action">
                                <button type="button" class="btn btn-primary"><i class="fa fa-download"></i> Download report</button>
                                <button type="button" class="btn btn-secondary"><i class="fa fa-plus"></i> Add new</button>
                            </div>
                            <div class="p-2 d-flex">
                                
                            </div>
                        </div>
                    </div> -->
                </div>
            </div>
            
          
  <div>
    
    <!-- dashboard start -->
    <div class="row mb-3">
      <div class="col-12">
        <div class="filter d-flex flex-nowrap align-items-center justify-content-between gap-3" style="white-space: nowrap;">

          <!-- Search -->
          <div class="flex-shrink-0 me-3">
            <form class="d-flex">
              <div class="input-group input-group-sm">
                <input type="text" class="form-control form-control-sm border-end-0" id="search-input" placeholder="Search orders..." aria-label="Search orders">
                <button class="btn btn-primary" type="button" id="button-addon2">
                  <i class="fas fa-search"></i>
                </button>
              </div>
            </form>
          </div>

          <!-- Filter Dropdown -->
          <div class="d-flex align-items-center flex-shrink-0 me-3">
            <span class="text-muted me-2 fw-medium" style="white-space: nowrap;">Filter By:</span>
            <div class="dropdown">
              <button class="btn btn-outline-primary dropdown-toggle" type="button" id="dropdownMenuLink" data-bs-toggle="dropdown">
                <i class="fas fa-filter me-1"></i>Select Filters
              </button>
              <ul class="dropdown-menu shadow-sm">
                <li><a class="dropdown-item filter-option" data-filter-type="payment" href="#"><i class="fas fa-money-bill me-2"></i>Payment Mode</a></li>
                <li><a class="dropdown-item filter-option" data-filter-type="client" href="#"><i class="fas fa-building me-2"></i>Client</a></li>
              </ul>
            </div>
          </div>

          <!-- Date Range Filters -->
          <div class="d-flex align-items-center flex-shrink-0 gap-2 me-3">
            <div class="d-flex align-items-center gap-1">
              <label class="form-label text-muted mb-0">From</label>
              <input type="date" id="min-date" class="form-control form-control-sm">
            </div>
            <div class="d-flex align-items-center gap-1">
              <label class="form-label text-muted mb-0">To</label>
              <input type="date" id="max-date" class="form-control form-control-sm">
            </div>
            <button id="apply-date-filter" class="btn btn-primary btn-sm"><i class="fas fa-check"></i></button>
            <button id="clear-date-filter" class="btn btn-secondary btn-sm"><i class="fas fa-redo-alt"></i></button>
            <div class="dropdown">
              <button class="btn btn-outline-primary btn-sm dropdown-toggle" type="button" id="dateRangeDropdown" data-bs-toggle="dropdown">
                <i class="far fa-clock me-1"></i>Quick Ranges
              </button>
              <ul class="dropdown-menu shadow-sm">
                <li><a class="dropdown-item date-range-option" data-range="today" href="#"><i class="fas fa-calendar-day me-2"></i>Today</a></li>
                <li><a class="dropdown-item date-range-option" data-range="yesterday" href="#"><i class="fas fa-calendar-minus me-2"></i>Yesterday</a></li>
                <li><a class="dropdown-item date-range-option" data-range="last7days" href="#"><i class="fas fa-calendar-week me-2"></i>Last 7 Days</a></li>
                <li><a class="dropdown-item date-range-option" data-range="last30days" href="#"><i class="fas fa-calendar-alt me-2"></i>Last 30 Days</a></li>
                <li><a class="dropdown-item date-range-option" data-range="thisMonth" href="#"><i class="far fa-calendar me-2"></i>This Month</a></li>
                <li><a class="dropdown-item date-range-option" data-range="lastMonth" href="#"><i class="far fa-calendar-minus me-2"></i>Last Month</a></li>
              </ul>
            </div>
          </div>

        </div>
      </div>
    </div>


    <div class=" container-fluid p-4" 
    style="background: linear-gradient(135deg, #fdfcfb 0%, #f2f7ff 100%);
    padding: 10px;
    border-radius: 20px;">
      <div class="card-body p-2"></div>
      <div class="table-responsive ">
        <table class="table my-table" id="datatable_2">
          <thead class="">
            <tr>
              <th>
                <input type="checkbox"
                  id="selectAll" /><!-- Checkbox to select all rows -->
              </th>
              <th>
                LR, Order & PO Id
              </th> <!-- Combined LR No., Order Id and PO Id -->
              <th
                style="text-align: left; padding: 10px; text-transform: uppercase; font-weight: bold;">
                LR DATE
              </th>
              <th>
                Pickup & Delivered Address
              </th> <!-- Combined Origin and Destination Address -->
              <th>
                Box Count
              </th> <!-- Added Box Count -->
              <th>
                Payment Type
              </th> <!-- Added Payment Type -->
              <th>
                courier partner
              </th>
              <th>
                chargable Weight
               </th>
               <th>
                Total lr charge
               </th>
            </tr>
          </thead>
          <tbody>
            <% result.forEach(function(order) { %>
              <tr data-client="<%= order.client_id %>" data-company-name="<%= order.company_name %>" data-payment="<%= order.mode_Of_Payment %>">
              <td style="text-align: left; padding: 8px;">
                <input type="checkbox" class="rowCheckbox" />
                <!-- Checkbox for each row -->
              </td>
              <td style="text-align: left; padding: 8px;">
                <span class="order-id lrNo"
                  data-bs-toggle="offcanvas"
                  data-bs-target="#orderDetailsCanvas"
                  aria-controls="orderDetailsCanvas"
                  style="color: #007BFF;"
                  data-lrno="<%= order.lr_No %>"
                  data-vendor-type="<%= order.Tagged_api %>"
                  data-pono="<%= order.po_id %>">
                  <%= order.lr_No %>
                </span>
                <br>
                <%= order.order_id %>
                <br>
                <span class="po-no" id="pono"
                  style="cursor: pointer; color: #007BFF;"
                  data-lrno="<%= order.lrNo %>">
                  <%= order.po_id %>
                </span>
              </td> <!-- Combined LR No., Order Id and PO Id with <br> -->
              <td style="text-align: left; padding: 8px;">
                <%= new Date(order.order_date).toLocaleDateString('en-IN', {
                  weekday: 'short',
                  year: 'numeric',
                  month: 'short',
                  day: 'numeric',
                  timeZone: 'Asia/Kolkata'
                }) %><br>
                <%= new Date(order.order_date).toLocaleTimeString('en-IN', {
                  hour: '2-digit',
                  minute: '2-digit',
                  second: '2-digit',
                  hour12: true,
                  timeZone: 'Asia/Kolkata'
                }) %>
              </td>
              
              <td style="text-align: left; padding: 8px;">
                <div class="milestone-container">
                  <!-- Origin and Destination Text -->
                  <div class="origin" style="text-align: left;">
                    <%= order.pickup_Add %> <!-- Dynamic origin -->
                  </div>
                  <div class="destination" style="text-align: left;">
                    <%= order.destination_Add %> <!-- Dynamic destination -->
                  </div>
 
                  <!-- Dotted Milestone Line -->
                  <div class="milestone-line"></div>
 
                  <!-- Origin and Destination Truck Icons -->
                  <div class="truck-icon origin">
                    <i class="fas fa-truck" style="font-size: 10px;"></i>
                  </div>
                  <div class="truck-icon destination">
                    <i class="fa-solid fa-shop" style="font-size: 10px;"></i>
                  </div>
                </div>
              </td> <!-- Combined Origin and Destination Address with <br> -->
              <td style="text-align: left; padding: 8px;">
                <%= order.total_Box %>
              </td> <!-- Box Count -->
              <td style="text-align: left; padding: 8px;">
                <span style="color: #007BFF;"><%= order.mode_Of_Payment.toLowerCase() %></span><br>
                <%= order.invoice_Value %>
              </td> <!-- Payment Type -->
              <td style="text-align: left; padding: 8px;">
                <% 
                  const courierName = order.Tagged_api.toLowerCase();
                  let logoPath = 'assets/images/logos/logo-dark.png';
                  
                  if (courierName.includes('delhivery')) {
                    logoPath = 'assets/images/logos/delhivery.png';
                  } else if (courierName.includes('express') || courierName.includes('expressbees')) {
                    logoPath = 'assets/images/logos/expressbees.png'; 
                  } else if (courierName.includes('dtdc')) {
                    logoPath = 'assets/images/logos/dtdc.png';
                  } else if (courierName.includes('bluedart')) {
                    logoPath = 'assets/images/BlueDart.png';
                  } else if (courierName.includes('fedex')) {
                    logoPath = 'assets/images/FedEx.png';
                  }
                %>
                <img src="<%= logoPath %>" alt="Courier Logo" style="height: 18px; width: auto;">
              </td>
              <td style="text-align: left; padding: 8px;">
                <span style="color: #007BFF;"><%= order.chargable_weight ? order.chargable_weight.toUpperCase() : 'N/A' %></span><br>
                <%= order.weight_unit ? order.weight_unit.toUpperCase() : 'N/A' %>
              </td> 
              <td style="text-align: left; padding: 8px;">
                ₹ <span style="color: #007BFF;"><%= order.total_rate || 'N/A' %></span>
              </td>
              
            </tr>
            <% }); %>
          </tbody>
        </table>
      
 
      </div>
    </div>
    
  </div>
  <!-- Offcanvas Component -->
  <div class="offcanvas offcanvas-end" tabindex="-1" id="orderDetailsCanvas"
    aria-labelledby="customOffcanvasLabel" style="width: auto;">

    <div class="offcanvas-body p-0">
      <!-- Order Summary Content -->
      <div class="container-fluid customcardcontainer">
        
        <section>
          <div class="">
            <div class="row d-flex justify-content-center align-items-center ">
              <div class="col-sm-12">
                <div class=" card-stepper" style="border-radius: 16px;">
 
                  <div class="card-body ">                    
                    <div class="row"> 
                      <div class="col-sm-8 map-container" style="background: linear-gradient(135deg, #fdfcfb 0%, #fffff3 100%);">
                                              
                        <div id="map" style="height: 400px; width: 100%; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);"></div>   
                        <div class="map-header info-card">
                          <h5 class="mb-2"><span class="text-black text-center font-weight-bold" id="map_info" style="text-transform: uppercase;"></span></h5>
                      </div>                    
                        <div  id="product-details"> </div>
                    </div>
                    <div class="col-sm-4 p-3" >
             
                   <h4 class="text-center font-weight-bold text-black">Order Tracking</h4>
                        
                        <div class=" detailedorder"> </div>
                    </div>
<!--                     
                    <div class="map-legend mt-2">
                      <span><img src="https://maps.google.com/mapfiles/ms/icons/blue-dot.png" width="20"> Origin</span>
                      <span><img src="https://maps.google.com/mapfiles/ms/icons/yellow-dot.png" width="20"> Intermediate</span>
                      <span><img src="https://maps.google.com/mapfiles/ms/icons/green-dot.png" width="20"> Current Location</span>
                      <span><img src="https://maps.google.com/mapfiles/ms/icons/red-dot.png" width="20"> Destination</span>
                  </div> -->
                 
                    </div>
                   
                    </div>
 
                  </div>
 
                </div>
              </div>
            </div>
          </div>
        </section>
 

      </div>
    </div>
    <div class="modal fade" id="clientFilterModal" tabindex="-1" aria-labelledby="clientFilterModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="clientFilterModalLabel">Filter by Client</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label for="clientSelect" class="form-label">Select Client</label>
              <select class="form-select" id="clientSelect">
                <option value="">All Clients</option>
                <!-- Client options will be populated dynamically -->
              </select>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary" id="applyClientFilter">Apply Filter</button>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Payment Mode Filter Modal -->
    <div class="modal fade" id="paymentFilterModal" tabindex="-1" aria-labelledby="paymentFilterModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="paymentFilterModalLabel">Filter by Payment Mode</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label for="paymentModeSelect" class="form-label">Select Payment Mode</label>
              <select class="form-select" id="paymentModeSelect">
                <option value="">All Payment Modes</option>
                <option value="COD">COD</option>
                <option value="Prepaid">Prepaid</option>
                <!-- Add more payment modes as needed -->
              </select>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary" id="applyPaymentFilter">Apply Filter</button>
          </div>
        </div>
      </div>
    </div>
 

            
        </div>
    </div>

</div>


<!-- this is a click pono script start-->
<script>
  const safeValue = (value) => value === null || value === undefined || value === "" ? 'N/A' : value;
  document.querySelectorAll(".lrNo").forEach(lrNoElement => {
  lrNoElement.addEventListener("click", function () {
    const lrNo = lrNoElement.getAttribute('data-lrno').trim(); // Get LR No from the data attribute
    const poNo = lrNoElement.getAttribute('data-pono').trim(); // Get PO No from the data attribute
    const vendorname = lrNoElement.getAttribute('data-vendor-type').trim(); // Get
    // Log the LR No and PO No to the console
    console.log("LR No:", lrNo, "PO No:", poNo,vendorname);
 
    if (!poNo) {
      alert("PO No is required.");
      return;
    }
 
      console.log("Fetching data for PO No:", poNo);
 
      // Display loading message or spinner
      const productDetails = document.getElementById('product-details');
      if (productDetails) {
        productDetails.innerHTML = '<p>Loading order details...</p>';
      }
      let eta = null;
 
      // Fetch data from backend
      axios.get(`/get-po/${poNo}`)
        .then(response => {
          console.log("Order details fetched:", response.data);
 
          const order = response.data.data.orderDetails;
          const client = response.data.data.clientDetails;
          const item = response.data.data.productDetails[0];  // Get the first product only
          eta = response.data.data.orderDetails.eta;
 
          // Check if product data exists
          if (!item || !item.product_name) {
            console.log("No product details available");
            return;
          }
 
          // Check if order data is available
          if (!order || Object.keys(order).length === 0) {
            alert(`No order details found for PO Number: ${poNo}`);
            productDetails.innerHTML = ''; // Clear the loading message
            return;
          }
 
          // Ask user for confirmation before displaying data
          // const confirmView = confirm(`Details found for PO No: ${poNo}. Do you want to view them?`);
          // if (!confirmView) {
          //   return;
          // }
 
          // Clear loading text
          productDetails.innerHTML = '';
 
          // Function to safely handle null or undefined values
          
          // document.getElementById("invoice_no").innerHTML = `${safeValue(order.invoice_no)}`
          // document.getElementById("order_no").innerHTML = `${safeValue(order.order_id)} / ${safeValue(order.po_no)} / ${safeValue(order.ds_docket_no)}`
 
          // Generate dynamic HTML content based on response
          productDetails.innerHTML = `
<div class="order-status">
    <div class="order-header" style="display: flex; justify-content: space-between; align-items: center; font-size: 16px; color: white; margin-bottom: 20px;">
        <span class="text-black">Order ID ${safeValue(order.order_id)}</span>
        <img id="fd-logo" src="${safeValue(order.fd_logo)}" alt="forwarder_Logo" style="width: 114px; height: 32px;">
       
    </div>
    <div class="order-details" style="margin-top: 15px;  display: flex; justify-content: space-between;">
        <div>
            <span>From</span>
            <span>${safeValue(order.origin_city)}, ${safeValue(order.origin_state)}</span>
        </div>
        <div>
            <span>To</span>
            <span>${safeValue(order.destination_city)}, ${safeValue(order.destination_state)}</span>
        </div>
        <div>
            <span>Current Location</span>
            <span>Dresden, DE</span>
        </div>
        <div>
            <span id="kms-left">Kms Left</span>
            <span id="kms-left-value">620</span>
        </div>
        <div>
            <span>Last Stop</span>
            <span>3 hours</span>
        </div>
    </div>
</div>
 
<div class="col-sm-12 p-3" >
 
 
    <!-- Order Details Table -->
    <div class="row mb-4" style=" display: flex; justify-content: space-between;">
        <div class="col-sm-6">
            <strong>Order ID:</strong> ${safeValue(order.order_id)}<br>
            <strong>Consignee Name:</strong> ${safeValue(order.consignee_name)}<br>
            <strong>PO No:</strong> ${safeValue(order.lr_No)}<br>
            <strong>Order Date:</strong> ${safeValue(new Date(order.order_date).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }))}
        </div>
        <div class="col-sm-6">
            <strong>LR No:</strong> ${safeValue(order.lr_No)}<br>
            <strong>LR Date:</strong> ${safeValue(order.lr_date)}<br>
            <strong>Payment Type:</strong> ${safeValue(order.payment_type)}<br>
            <strong>Invoice No:</strong> ${safeValue(order.invoice_no)}<br>
            <strong>Invoice Amount:</strong> ${safeValue(order.invoice_amount)}
        </div>
    </div>
 
    <!-- Box Details and Weight/Mode Section -->
    <div class="row mb-4">
        <div class="col-sm-6">
            <h5 style="font-weight: bold; margin-bottom: 10px; font-size: 12px;color:black;">Box Details</h5>
            <table style="width: 100%; border: 1px solid #c8c8c82b; border-collapse: collapse;">
                <thead style="background: linear-gradient(135deg, #fdfcfb 0%, #d8d8d8 100%);">
                    <tr>
                        <th style="padding: 8px; text-align: left;">No of Boxes</th>
                        <th style="padding: 8px; text-align: left;">Dimensions (L x W x H)</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td style="padding: 8px; border: 1px solid #c8c8c82b;">2</td>
                        <td style="padding: 8px; border: 1px solid #c8c8c82b;">40 x 30 x 20 cm</td>
                    </tr>
                </tbody>
            </table>
        </div>
 
        <div class="col-sm-6">
            <h5 style="font-weight: bold; margin-bottom: 10px; font-size: 12px;color:black;">Weight/Mode</h5>
            <table style="width: 100%; border: 1px solid #c8c8c82b; border-collapse: collapse;">
                <thead style="background: linear-gradient(135deg, #fdfcfb 0%, #d8d8d8 100%);">
                    <tr>
                        <th style="padding: 8px; text-align: left; ">Name</th>
                        <th style="padding: 8px; text-align: left; ">Actual</th>
                        <th style="padding: 8px; text-align: left; ">Unit </th>
                        <th style="padding: 8px; text-align: left; ">Chargeable</th>
                        <th style="padding: 8px; text-align: left;">Mode</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td style="padding: 8px; border: 1px solid #c8c8c82b;">Weight</td>
                        <td style="padding: 8px; border: 1px solid #c8c8c82b;">${safeValue(order.total_weight)}</td>
                        <td style="padding: 8px; border: 1px solid #c8c8c82b;">${safeValue(order.weight_unit)}</td>
                        <td style="padding: 8px; border: 1px solid #c8c8c82b;">${safeValue(order.chargable_weight)}</td>
                        <td style="padding: 8px; border: 1px solid #c8c8c82b;">${safeValue(order.aggrigator_type)}</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
 
    <!-- Product Details Section -->
    <div class="mb-4">
        <h5 style="font-weight: bold; margin-top: 20px; color: black; font-size: 12px;">Product Details</h5>
        <table style="width: 100%; border-collapse: collapse; border: 1px solid #c8c8c82b;">
            <thead style="background: linear-gradient(135deg, #fdfcfb 0%, #d8d8d8 100%);">
                <tr>
                    <th style="padding: 8px; text-align: left;">HSN</th>
                    <th style="padding: 8px; text-align: left;">Item</th>
                    <th style="padding: 8px; text-align: left;">Qty</th>
                    <th style="padding: 8px; text-align: left;">Amount</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td style="padding: 8px; border: 1px solid #c8c8c82b;">${safeValue(order.hsn_id)}</td>
                    <td style="padding: 8px; border: 1px solid #c8c8c82b;">${safeValue(item.product_name)}</td>
                    <td style="padding: 8px; border: 1px solid #c8c8c82b;">${safeValue(item.quantity)}</td>
                    <td style="padding: 8px; border: 1px solid #c8c8c82b;">${safeValue(item.order_value)}</td>
                </tr>
                <tr>
                    <td colspan="3" style="padding: 8px; text-align: right;  border-top: 1px solid #c8c8c82b;">
                        <strong>Total:</strong>
                    </td>
                    <td style="padding: 8px; border-top: 1px solid #c8c8c82b;">
                        <strong>${safeValue(order.invoice_Value)}</strong>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
 
    <!-- Shipper Section -->
    <div class="row mb-3" style="color: black; display: flex; justify-content: space-between;">
        <div class="col-sm-6">
            <div class="shipper-consignee">
                <div class="row">
                    <div class="col-sm-6"><strong>Pickup & Return Address:</strong></div>
                    <div class="col-sm-6">${safeValue(client.company_name)}<br>${safeValue(client.company_address)}<br>GST: ${safeValue(client.gst)}</div>
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="shipper-consignee">
                <div class="row">
                    <div class="col-sm-6"><strong>Delivery Address:</strong></div>
                    <div class="col-sm-6">${safeValue(order.consignee_name)}<br>${safeValue(order.consignee_address)}<br>GST: ${safeValue(order.shipper_gst_2)}</div>
                </div>
            </div>
        </div>
    </div>
 
</div>
 
          `;
 
          if (vendorname.toLowerCase() === 'delhivery/ltl-surface') {
      axios.get(`/delivery-status/${lrNo}`)
        .then(statusResponse => {
          const delivery = statusResponse.data;
          updateDeliveryStatus('delhivery', delivery.deliveryStatus, delivery.logoPath, lrNo, order, client);
          console.log("delivery in delhivery ltl", delivery);

          // Format the delivery status data for the route calculation
          const formattedDeliveryStatus = delivery.deliveryStatus
              .filter(status => status.location) // Filter out entries with no location
              .sort((a, b) => new Date(a.manifested_date) - new Date(b.manifested_date))
              .map(status => ({
                  location: status.location.split('(')[0].trim().replace(/_/g, ' '),
                  status: status.status,
                  date: status.manifested_date,
                  scan_remark: status.scan_remark
              }));

          console.log("formattedDeliveryStatus in delhivery ltl", formattedDeliveryStatus);

          // Call the route calculation function
          calculateAndDisplayRoute(
              formattedDeliveryStatus,
              order.consignee_address,
              eta
          );
        })
        .catch(statusError => {
          console.error("Error fetching delivery status:", statusError);
          alert("Could not fetch delivery status. Please try again later.");
        });
    }
    else if (vendorname.toLowerCase() === 'delhivery/standard-surface') {
      axios.get(`/delivery-standard-status/${lrNo}`)
        .then(statusResponse => {
          const delivery = statusResponse.data;
          updateDeliveryStdStatus('delhivery', delivery.deliveryStatus, delivery.logoPath, lrNo, order, client);
          console.log("delivery in delhivery standard",delivery)

            // Format the delivery status data for the route calculation
            const formattedDeliveryStatus = delivery.deliveryStatus
                .sort((a, b) => new Date(a.scan_datetime) - new Date(b.scan_datetime))
                .map(status => ({
                    location: status.scanned_location.split('(')[0].trim().replace(/_/g, ' '),
                    status: status.scan,
                    date: status.scan_datetime,
                    scan_remark: status.instructions
                }));
              console.log("formattedDeliveryStatus in delhivery standard",formattedDeliveryStatus)
            // Get the destination address from order details
            

            // Call the route calculation function
            calculateAndDisplayRoute(
                formattedDeliveryStatus,
                order.consignee_address,
                eta
            );
        })
        .catch(statusError => {
          console.error("Error fetching delivery status:", statusError);
          alert("Could not fetch delivery status. Please try again later.");
        });
   }
  
    else if (vendorname.toLowerCase() === 'dtdc/ltl') {
      axios.get(`/dtdc-ltl-status/${lrNo}`)
        .then(statusResponse => {
          const delivery = statusResponse.data;
          console.log("delivery in dtdc ltl",delivery)
          updateDTDCStatus('dtdc/ltl', delivery.deliveryStatus, delivery.logoPath, lrNo,order,client);
        })
        .catch(statusError => {
          console.error("Error fetching DTDC/LTL delivery status:", statusError);
          alert("Could not fetch delivery status. Please try again later.");
        });
    } else if (vendorname.toLowerCase() === 'dtdc/b2c smart express') {
      axios.get(`/dtdc-standard-status/${lrNo}`)
        .then(statusResponse => {
          const delivery = statusResponse.data;
          updateDTDCStatusStd('dtdc/standard', delivery.deliveryStatus, delivery.logoPath, lrNo, order, client);
          console.log("delivery in dtdc standard", delivery);

          // Format the delivery status data for the route calculation
          const formattedDeliveryStatus = delivery.deliveryStatus
            .filter(status => status.strOrigin) // Filter out entries with no origin
            .map(status => ({
              location: status.strOrigin,
              status: status.strAction,
              date: status.strActionDate,
              scan_remark: status.strRemarks || status.strManifestNo || ''
            }));

          // Get the final delivery location
         
          // If we have a final delivery location, add it to the route if it's different from the last location
         

          // Call the route calculation function
          calculateAndDisplayRoute(
            formattedDeliveryStatus,
            order.consignee_address, // Use as backup if needed
            eta
          );
        })
        .catch(statusError => {
          console.error("Error fetching DTDC Standard delivery status:", statusError);
          alert("Could not fetch delivery status. Please try again later.");
        });
    } else if (vendorname.toLowerCase() === 'expressbees/standard-surface' || vendorname.toLowerCase() === "expressbees/standard-air") {
        // First get the delivery status
        axios.get(`/expressbees-std/${lrNo}`)
          .then(statusResponse => {
            const delivery = statusResponse.data;
            console.log("express bees status:", delivery);
            updateExpressBeesStatus('expressbees', delivery.deliveryStatus, delivery.logoPath, lrNo, order, client);

            // Get the last location from delivery status array
            const lastLocation = delivery.deliveryStatus[delivery.deliveryStatus.length - 1].location;

            // Construct origin and destination strings
            const origin = lastLocation;
            const destination = `${order.consignee_address}`;
            console.log("origin in express bees",origin)
            console.log("destination in express bees",destination)
            console.log("eta in express bees",eta)
            // Calculate route using origin and destination
            calculateAndDisplayRoute(
                delivery.deliveryStatus,
                order.consignee_address,
                eta
            );
          })
          .catch(statusError => {
            console.error("Error fetching ExpressBees delivery status:", statusError);
            const errorMessage = statusError.response ? statusError.response.data.message : "Could not fetch delivery status. Please try again later.";
            alert(errorMessage);
          });
    }
  })
  .catch(error => {
    console.error("Error fetching order details:", error);
    const errorMessage = error.response ? error.response.data.message : "An unexpected error occurred.";
    alert(errorMessage);
    if (productDetails) {
      productDetails.innerHTML = '';
    }
  });
    });
  });
</script>
<script>
  // dtdc 
  function updateDTDCStatus(vendor, deliveryStatus, logoPath, lrNo, order, client) {
    console.log("in the function updateDTDCStatus");
    
    // Update the right logo dynamically from the delivery status response
    const rightLogo = document.getElementById('right-logo');
    if (rightLogo && logoPath) {
      rightLogo.src = logoPath;  // Set the new logo path
    }
   
    // Update the detailed order tracking section    Order Tracking
    const detailedOrderTracking = document.querySelector('.detailedorder');
    if (detailedOrderTracking) {
      detailedOrderTracking.innerHTML = `
        <div class="mb-4">
          <div >
            

            <!-- Static Order Created Package -->
            <div class="package " style="background:linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)">
              <div class="col-sm-8">
                Package from ${safeValue(client.company_name)}
              </div>
              <div class="order-id">
                Order ID ${safeValue(order.order_id)}
              </div>
              <div class="status">
                ${deliveryStatus[deliveryStatus.length - 1].strAction}
              </div>
              <div class="progress-bar" style="width: 81%;">
              </div>
              <div class="details">
                <div>
                  Customer<br/>
                  <strong>${safeValue(order.consignee_name)}</strong>
                </div>
                <div>
                  Weight<br/>
                  <strong>${safeValue(order.total_weight || 'N/A')} ${safeValue(order.weight_unit || 'N/A')} </strong>
                </div>
                <div>
                  Price<br/>
                  <strong>₹ ${safeValue(order.Invoice_amount || 'N/A')}</strong>
                </div>
                <div>
                  Departure<br/>
                  <strong>${new Date(order.order_date).toLocaleDateString()}</strong>
                </div>
              </div>
            </div>

            <div  class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
              <div class="col-sm-8">
                Package from ${safeValue(client.company_name)}
              </div>
              <div class="order-id">
                Order ID ${safeValue(order.order_id)}
              </div>
              <div class="status">
                order created
              </div>
              <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                <span style="color:#5a99fc;">View Details</span>
                <div class="details-balloon" style="display: none;">
                  <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                  <div>
                    Location<br/>
                    <strong>${safeValue(order.warehouse_address)}</strong>
                  </div>
                  <div>
                    Order Date<br/>
                    <strong>${new Date(order.order_date).toLocaleString()}</strong>
                  </div>
                </div>
              </div>
            </div>

            <div  class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
              <div class="col-sm-8">
                Package from ${safeValue(client.company_name)}
              </div>
              <div class="order-id">
                Order ID ${safeValue(order.order_id)}
              </div>
              <div class="status">
                order in process
              </div>
              <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                <span style="color:#5a99fc;">View Details</span>
                <div class="details-balloon" style="display: none;">
                  <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                  <div>
                    Location<br/>
                    <strong>${safeValue(order.warehouse_address)}</strong>
                  </div>
                  <div>
                    Update Date<br/>
                    <strong>${new Date(order.order_date).toLocaleString()}</strong>
                  </div>
                </div>
              </div>
            </div>

            ${(() => {
              // Define known status categories
              const readyToDispatchActions = ['Booked', 'Manifest Prepared'];
              const inTransitActions = ['THC OUT', 'LDS Updation', 'THC Arrived'];
              
              let output = '';
              let processedStatuses = new Set();

              // Process Ready to Dispatch statuses
              const readyToDispatchStatuses = deliveryStatus.filter(status => 
                readyToDispatchActions.includes(status.strAction)
              );

              if (readyToDispatchStatuses.length > 0) {
                const combinedDetails = readyToDispatchStatuses.map(status => `
                  <div>Status: ${safeValue(status.strAction)}</div>
                  <div>Location: ${safeValue(status.strOrigin || 'N/A')}</div>
                  <div>Updated On: ${new Date(status.strActionDate).toLocaleString()}</div>
                  <div>Updated Time: ${safeValue(status.strActionTime)}</div>
                `).join('<hr/>');

                output += `
                  <div class="package ready-to-dispatch" style="background:linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)">
                    <div class="col-sm-8">Ready to Dispatch from ${safeValue(readyToDispatchStatuses[0].strOrigin || order.warehouse_address)}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status ready">Ready to Dispatch</div>
                    <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                      <span style="color:#5a99fc;">View Details</span>
                      <div class="details-balloon" style="display: none;">
                        <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                        ${combinedDetails}
                      </div>
                    </div>
                  </div>
                `;
                readyToDispatchStatuses.forEach(status => processedStatuses.add(status.strAction));
              }

              // Process In Transit statuses
              const inTransitStatuses = deliveryStatus.filter(status =>
                inTransitActions.includes(status.strAction)
              );

              if (inTransitStatuses.length > 0) {
                const combinedDetails = inTransitStatuses.map(status => `
                  <div>Status: ${safeValue(status.strAction)}</div>
                  <div>Origin: ${safeValue(status.strOrigin || 'N/A')}</div>
                  <div>Destination: ${safeValue(status.strDestination || 'N/A')}</div>
                  <div>Updated On: ${new Date(status.strActionDate).toLocaleString()}</div>
                  <div>Updated Time: ${safeValue(status.strActionTime)}</div>
                  ${status.strVehicleNo ? `<div>Vehicle No: ${safeValue(status.strVehicleNo)}</div>` : ''}
                  ${status.strDriverName ? `<div>Driver: ${safeValue(status.strDriverName)}</div>` : ''}
                `).join('<hr/>');

                output += `
                  <div  class="package in-transit" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)">
                    <div class="col-sm-8">In Transit from ${safeValue(inTransitStatuses[0].strOrigin || 'N/A')}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status transit">In Transit</div>
                    <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                      <span style="color:#5a99fc;">View Details</span>
                      <div class="details-balloon" style="display: none;">
                        <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                        ${combinedDetails}
                      </div>
                    </div>
                  </div>
                `;
                inTransitStatuses.forEach(status => processedStatuses.add(status.strAction));
              }

              // Process any remaining unhandled statuses
              deliveryStatus.forEach(status => {
                if (!processedStatuses.has(status.strAction)) {
                  output += `
                    <div class="package custom-status" style="background:linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)">
                      <div class="col-sm-8">Status Update from ${safeValue(status.strOrigin || 'N/A')}</div>
                      <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                      <div class="status custom">${safeValue(status.strAction)}</div>
                      <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                        <span style="color:#5a99fc;">View Details</span>
                        <div class="details-balloon" style="display: none;">
                          <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                          <div>Status: ${safeValue(status.strAction)}</div>
                          <div>Origin: ${safeValue(status.strOrigin || 'N/A')}</div>
                          <div>Destination: ${safeValue(status.strDestination || 'N/A')}</div>
                          <div>Updated On: ${new Date(status.strActionDate).toLocaleString()}</div>
                          <div>Updated Time: ${safeValue(status.strActionTime)}</div>
                          ${status.strVehicleNo ? `<div>Vehicle No: ${safeValue(status.strVehicleNo)}</div>` : ''}
                          ${status.strDriverName ? `<div>Driver: ${safeValue(status.strDriverName)}</div>` : ''}
                        </div>
                      </div>
                    </div>
                  `;
                }
              });

              return output;
            })()}
          </div>
        </div>
      `;
    }
  }

  // dtdc 
  function updateDTDCStatusStd(vendor, deliveryStatus, logoPath, lrNo, order, client) {
    console.log("in the function updateDTDCStatus");
    
    // Update the right logo dynamically from the delivery status response
    const rightLogo = document.getElementById('right-logo');
    if (rightLogo && logoPath) {
      rightLogo.src = logoPath;  // Set the new logo path
    }
   
    // Update the detailed order tracking section dtdc
    const detailedOrderTracking = document.querySelector('.detailedorder');
    if (detailedOrderTracking) {
      detailedOrderTracking.innerHTML = `
        <div class="mb-4">
          <div class="">
        

            <!-- Static Order Created Package -->
            <div class="package " style="background:linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)">
              <div class="col-sm-8">
                Package from ${safeValue(client.company_name)}
              </div>
              <div class="order-id">
                Order ID ${safeValue(order.order_id)}
              </div>
              <div class="status">
                ${deliveryStatus[deliveryStatus.length - 1].strAction}
              </div>
              <div class="progress-bar" style="width: 81%;">
              </div>
              <div class="details">
                <div>
                  Customer<br/>
                  <strong>${safeValue(order.consignee_name)}</strong>
                </div>
                <div>
                  Weight<br/>
                  <strong>${safeValue(order.total_weight || 'N/A')} ${safeValue(order.weight_unit || 'N/A')} </strong>
                </div>
                <div>
                  Price<br/>
                  <strong>₹ ${safeValue(order.Invoice_amount || 'N/A')}</strong>
                </div>
                <div>
                  Departure<br/>
                  <strong>${new Date(order.order_date).toLocaleDateString()}</strong>
                </div>
              </div>
            </div>

            <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
              <div class="col-sm-8">
                Package from ${safeValue(client.company_name)}
              </div>
              <div class="order-id">
                Order ID ${safeValue(order.order_id)}
              </div>
              <div class="status">
                order created
              </div>
              <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                <span style="color:#5a99fc;">View Details</span>
                <div class="details-balloon" style="display: none;">
                  <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                  <div>
                    Location<br/>
                    <strong>${safeValue(order.warehouse_address)}</strong>
                  </div>
                  <div>
                    Order Date<br/>
                    <strong>${new Date(order.order_date).toLocaleString()}</strong>
                  </div>
                </div>
              </div>
            </div>

            <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
              <div class="col-sm-8">
                Package from ${safeValue(client.company_name)}
              </div>
              <div class="order-id">
                Order ID ${safeValue(order.order_id)}
              </div>
              <div class="status">
                order in process
              </div>
              <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                <span style="color:#5a99fc;">View Details</span>
                <div class="details-balloon" style="display: none;">
                  <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                  <div>
                    Location<br/>
                    <strong>${safeValue(order.warehouse_address)}</strong>
                  </div>
                  <div>
                    Update Date<br/>
                    <strong>${new Date(order.order_date).toLocaleString()}</strong>
                  </div>
                </div>
              </div>
            </div>

            ${(() => {
              // Define known status categories
              const readyToDispatchActions = ['Booked', 'Manifest Prepared',"Picked Up","Pickup Reassigned","Pickup Scheduled","Pickup Awaited"];
              const inTransitActions = ['In Transit', 'LDS Updation', 'THC Arrived','Reached At Destination','LINEHAUL DELAYED ROAD BLOCK / TRAFFIC JAM'];
              
              let output = '';
              let processedStatuses = new Set();

              // Process Ready to Dispatch statuses
              const readyToDispatchStatuses = deliveryStatus.filter(status => 
                readyToDispatchActions.includes(status.strAction)
              );

              if (readyToDispatchStatuses.length > 0) {
                const combinedDetails = readyToDispatchStatuses.map(status => `
                  <div>Status: ${safeValue(status.strAction)}</div>
                  <div>Location: ${safeValue(status.strOrigin || 'N/A')}</div>
                  <div>Updated On: ${new Date(status.strActionDate).toLocaleString()}</div>
                  <div>Updated Time: ${safeValue(status.strActionTime).slice(0,2)}:${safeValue(status.strActionTime).slice(2)}</div>
                `).join('<hr/>');

                output += `
                  <div class="package ready-to-dispatch" style="background:linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)">
                    <div class="col-sm-8">Ready to Dispatch from ${safeValue(readyToDispatchStatuses[0].strOrigin || order.warehouse_address)}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status ready">Ready to Dispatch</div>
                    <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                      <span style="color:#5a99fc;">View Details</span>
                      <div class="details-balloon" style="display: none;">
                        <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                        ${combinedDetails}
                      </div>
                    </div>
                  </div>
                `;
                readyToDispatchStatuses.forEach(status => processedStatuses.add(status.strAction));
              }

              // Process In Transit statuses
              const inTransitStatuses = deliveryStatus.filter(status =>
                inTransitActions.includes(status.strAction)
              );

              if (inTransitStatuses.length > 0) {
                const combinedDetails = inTransitStatuses.map(status => `
                  <div>Status: ${safeValue(status.strAction)}</div>
                  <div>Origin: ${safeValue(status.strOrigin || 'N/A')}</div>
                  <div>Destination: ${safeValue(status.strDestination || 'N/A')}</div>
                  <div>Updated On: ${new Date(status.strActionDate).toLocaleString()}</div>
                  <div>Updated Time: ${safeValue(status.strActionTime).slice(0,2)}:${safeValue(status.strActionTime).slice(2)}</div>
                  ${status.strVehicleNo ? `<div>Vehicle No: ${safeValue(status.strVehicleNo)}</div>` : ''}
                  ${status.strDriverName ? `<div>Driver: ${safeValue(status.strDriverName)}</div>` : ''}
                `).join('<hr/>');

                output += `
                  <div  class="package in-transit" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)">
                    <div class="col-sm-8">In Transit from ${safeValue(inTransitStatuses[0].strOrigin || 'N/A')}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status transit">In Transit</div>
                    <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                      <span style="color:#5a99fc;">View Details</span>
                      <div class="details-balloon" style="display: none;">
                        <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                        ${combinedDetails}
                      </div>
                    </div>
                  </div>
                `;
                inTransitStatuses.forEach(status => processedStatuses.add(status.strAction));
              }

              // Process any remaining unhandled statuses
              deliveryStatus.forEach(status => {
                if (!processedStatuses.has(status.strAction)) {
                  output += `
                    <div class="package custom-status" style="background:linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)">
                      <div class="col-sm-8">Status Update from ${safeValue(status.strOrigin || 'N/A')}</div>
                      <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                      <div class="status custom">${safeValue(status.strAction)}</div>
                      <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                        <span style="color:#5a99fc;">View Details</span>
                        <div class="details-balloon" style="display: none;">
                          <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                          <div>Status: ${safeValue(status.strAction)}</div>
                          <div>Origin: ${safeValue(status.strOrigin || 'N/A')}</div>
                          <div>Destination: ${safeValue(status.strDestination || 'N/A')}</div>
                          <div>Updated On: ${new Date(status.strActionDate).toLocaleString()}</div>
                          <div>Updated Time: ${safeValue(status.strActionTime).slice(0,2)}:${safeValue(status.strActionTime).slice(2)}</div>
                          ${status.strVehicleNo ? `<div>Vehicle No: ${safeValue(status.strVehicleNo)}</div>` : ''}
                          ${status.strDriverName ? `<div>Driver: ${safeValue(status.strDriverName)}</div>` : ''}
                        </div>
                      </div>
                    </div>
                  `;
                }
              });

              return output;
            })()}
          </div>
        </div>
      `;
    }
  }

function updateDeliveryStatus(vendor, deliveryStatus, logoPath, lrNo, order,client) {
  console.log("in the delivery ltl caseee")
  
  const rightLogo = document.getElementById('right-logo');
  if (rightLogo && logoPath) {
    rightLogo.src = logoPath;
  }
  // Delhivery LTL Tracking
  const detailedOrderTracking = document.querySelector('.detailedorder');
  if (detailedOrderTracking) {
    detailedOrderTracking.innerHTML = `
      <div class="mb-4">
        <div class="">
        
          <div class="package " style="background:linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)">
            <div class="col-sm-8">
              Package from ${safeValue(client.company_name)}
            </div>
            <div class="order-id">
              Order ID ${safeValue(order.order_id)}
            </div>
            <div class="status">
              ${deliveryStatus[deliveryStatus.length - 1].status}
            </div>
            <div class="progress-bar" style="width: 81%;">
            </div>
            <div class="details">
              <div>
                Customer<br/>
                <strong>${safeValue(order.consignee_name)}</strong>
              </div>
              <div>
                Weight<br/>
                <strong>${safeValue(order.total_weight || 'N/A')} ${safeValue(order.weight_unit || 'N/A')} </strong>
              </div>
              <div>
                Price<br/>
                <strong>₹ ${safeValue(order.Invoice_amount || 'N/A')}</strong>
              </div>
              <div>
                Departure<br/>
                <strong>${new Date(order.order_date).toLocaleDateString()}</strong>
              </div>
            </div>
          </div>

          <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
            <div class="col-sm-8">Package from ${safeValue(client.company_name)}</div>
            <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
            <div class="status">order created</div>
            <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
              <span style="color:#5a99fc;">View Details</span>
              <div class="details-balloon" style="display: none;">
                <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                <div>Location<br/><strong>${safeValue(order.warehouse_address)}</strong></div>
                <div>Order Date<br/><strong>${new Date(order.order_date).toLocaleString()}</strong></div>
              </div>
            </div>
          </div>

          <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
            <div class="col-sm-8">Package from ${safeValue(client.company_name)}</div>
            <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
            <div class="status">order in process</div>
            <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
              <span style="color:#5a99fc;">View Details</span>
              <div class="details-balloon" style="display: none;">
                <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                <div>Location<br/><strong>${safeValue(order.warehouse_address)}</strong></div>
                <div>Update Date<br/><strong>${new Date(order.order_date).toLocaleString()}</strong></div>
              </div>
            </div>
          </div>

          ${(() => {
            const readyToDispatchScans = ['MANIFESTED'];
            const inTransitScans = ['LEFT_ORIGIN', 'REACH_DESTINATION'];
            let output = '';
            let processedStatuses = new Set();

            // Process Ready to Dispatch statuses
            const readyToDispatchStatuses = deliveryStatus.filter(status => 
              readyToDispatchScans.includes(status.status)
            );

            if (readyToDispatchStatuses.length > 0) {
              const combinedDetails = readyToDispatchStatuses.map(status => `
                <div>Status: ${safeValue(status.status)}</div>
                <div>Location: ${safeValue(status.location || 'N/A')}</div>
                <div>Manifested Date: ${safeValue(status.manifested_date)}</div>
                <div>Scan Remark: ${safeValue(status.scan_remark)}</div>
              `).join('<hr/>');

              output += `
                <div class="package ready-to-dispatch" style="background:linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)">
                  <div class="col-sm-8">Ready to Dispatch from ${safeValue(readyToDispatchStatuses[0].location || order.warehouse_address)}</div>
                  <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                  <div class="status ready">Ready to Dispatch</div>
                  <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                    <span style="color:#5a99fc;">View Details</span>
                    <div class="details-balloon" style="display: none;">
                      <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                      ${combinedDetails}
                    </div>
                  </div>
                </div>
              `;
              readyToDispatchStatuses.forEach(status => processedStatuses.add(status.status));
            }

            // Process In Transit statuses
            const inTransitStatuses = deliveryStatus.filter(status =>
              inTransitScans.includes(status.status)
            );

            if (inTransitStatuses.length > 0) {
              const combinedDetails = inTransitStatuses.map(status => `
                <div>Status: ${safeValue(status.status)}</div>
                <div>Location: ${safeValue(status.location || 'N/A')}</div>
                <div>Manifested Date: ${safeValue(status.manifested_date)}</div>
                <div>Scan Remark: ${safeValue(status.scan_remark)}</div>
              `).join('<hr/>');

              output += `
                <div  class="package in-transit" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)">
                  <div class="col-sm-8">In Transit from ${safeValue(inTransitStatuses[0].location || 'N/A')}</div>
                  <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                  <div class="status transit">In Transit</div>
                  <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                    <span style="color:#5a99fc;">View Details</span>
                    <div class="details-balloon" style="display: none;">
                      <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                      ${combinedDetails}
                    </div>
                  </div>
                </div>
              `;
              inTransitStatuses.forEach(status => processedStatuses.add(status.status));
            }

            // Process remaining statuses
            deliveryStatus.forEach(status => {
              if (!processedStatuses.has(status.status)) {
                output += `
                  <div class="package custom-status" style="background:linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)">
                    <div class="col-sm-8">Status Update from ${safeValue(status.location || 'N/A')}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status custom">${safeValue(status.status)}</div>
                    <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                      <span style="color:#5a99fc;">View Details</span>
                      <div class="details-balloon" style="display: none;">
                        <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                        <div>Status: ${safeValue(status.status)}</div>
                        <div>Location: ${safeValue(status.location || 'N/A')}</div>
                        <div>Manifested Date: ${safeValue(status.manifested_date)}</div>
                        <div>Scan Remark: ${safeValue(status.scan_remark)}</div>
                        <div>Estimated Delivery: ${status.estimated_date ? new Date(status.estimated_date).toLocaleString() : 'N/A'}</div>
                        <div>Promised Delivery: ${status.promised_delivery_date ? new Date(status.promised_delivery_date).toLocaleString() : 'N/A'}</div>
                        <div>Pickup Date: ${status.pickup_date ? new Date(status.pickup_date).toLocaleString() : 'N/A'}</div>
                        <div>Delivered Date: ${status.delivered_date ? new Date(status.delivered_date).toLocaleString() : 'N/A'}</div>
                      </div>
                    </div>
                  </div>
                `;
              }
            });

            return output;
          })()}
        </div>
      </div>
    `;
  }
}
function updateDeliveryStdStatus(vendor, deliveryStatus, logoPath, lrNo, order, client) {
  // Update the right logo dynamically from the delivery status response
  const rightLogo = document.getElementById('right-logo');
  if (rightLogo && logoPath) {
    rightLogo.src = logoPath;  // Set the new logo path
  }
  // Delhivery Standard Tracking
  // Update the detailed order tracking section
  const detailedOrderTracking = document.querySelector('.detailedorder');
  if (detailedOrderTracking) {
    detailedOrderTracking.innerHTML = `
      <div class="mb-4">
        <div class="">
       

          <!-- Static Order Created Package -->
          <div class="package " style="background:linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)">
            <div class="col-sm-8">
              Package from ${safeValue(client.company_name)}
            </div>
            <div class="order-id">
              Order ID ${safeValue(order.order_id)}
            </div>
            <div class="status">
              ${deliveryStatus[deliveryStatus.length - 1].scan}
            </div>
            <div class="progress-bar" style="width: 81%;">
            </div>
            <div class="details">
              <div>
                Customer<br/>
                <strong>${safeValue(order.consignee_name)}</strong>
              </div>
              <div>
                Weight<br/>
                <strong>${safeValue(order.total_weight || 'N/A')} ${safeValue(order.weight_unit || 'N/A')} </strong>
              </div>
              <div>
                Price<br/>
                <strong>₹ ${safeValue(order.Invoice_amount || 'N/A')}</strong>
              </div>
              <div>
                Departure<br/>
                <strong>${new Date(order.order_date).toLocaleDateString()}</strong>
              </div>
            </div>
          </div>

          <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
            <div class="col-sm-8">
              Package from ${safeValue(client.company_name)}
            </div>
            <div class="order-id">
              Order ID ${safeValue(order.order_id)}
            </div>
            <div class="status">
              order created
            </div>
            <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
              <span style="color:#5a99fc;">View Details</span>
              <div class="details-balloon" style="display: none;">
                <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                <div>
                  Location<br/>
                  <strong>${safeValue(order.warehouse_address)}</strong>
                </div>
                <div>
                  Order Date<br/>
                  <strong>${new Date(order.order_date).toLocaleString()}</strong>
                </div>
              </div>
            </div>
          </div>

          <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
            <div class="col-sm-8">
              Package from ${safeValue(client.company_name)}
            </div>
            <div class="order-id">
              Order ID ${safeValue(order.order_id)}
            </div>
            <div class="status">
              order in process
            </div>
            <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
              <span style="color:#5a99fc;">View Details</span>
              <div class="details-balloon" style="display: none;">
                <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                <div>
                  Location<br/>
                  <strong>${safeValue(order.warehouse_address)}</strong>
                </div>
                <div>
                  Update Date<br/>
                  <strong>${new Date(order.order_date).toLocaleString()}</strong>
                </div>
              </div>
            </div>
          </div>

          ${(() => {
            // Define known status categories
            const readyToDispatchScans = ['Manifested'];
            const inTransitScans = ['In Transit', 'Pending', 'Dispatched'];
            
            let output = '';
            let processedStatuses = new Set();

            // Process Ready to Dispatch statuses
            const readyToDispatchStatuses = deliveryStatus.filter(status => 
              readyToDispatchScans.includes(status.scan)
            );

            if (readyToDispatchStatuses.length > 0) {
              const combinedDetails = readyToDispatchStatuses.map(status => `
                <div>Status: ${safeValue(status.scan)}</div>
                <div>Location: ${safeValue(status.scanned_location || 'N/A')}</div>
                <div>Scan Remark: ${safeValue(status.instructions || 'N/A')}</div>
                <div>Scan Date: ${status.scan_datetime? new Date(status.status_datetime).toLocaleString() : 'N/A'}</div>
              `).join('<hr/>');

              output += `
                <div class="package ready-to-dispatch" style="background:linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)">
                  <div class="col-sm-8">Ready to Dispatch from ${safeValue(readyToDispatchStatuses[0].location || order.warehouse_address)}</div>
                  <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                  <div class="status ready">Ready to Dispatch</div>
                  <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                    <span style="color:#5a99fc;">View Details</span>
                    <div class="details-balloon" style="display: none;">
                      <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                      ${combinedDetails}
                    </div>
                  </div>
                </div>
              `;
              readyToDispatchStatuses.forEach(status => processedStatuses.add(status.scan));
            }

            // Process In Transit statuses
            const inTransitStatuses = deliveryStatus.filter(status =>
              inTransitScans.includes(status.scan)
            );

            if (inTransitStatuses.length > 0) {
              const combinedDetails = inTransitStatuses.map(status => `
                <div>Status: ${safeValue(status.scan)}</div>
                <div>Location: ${safeValue(status.scanned_location || 'N/A')}</div>
                <div>Scan Remark: ${safeValue(status.instructions || 'N/A')}</div>
                <div>Scan Date:${status.scan_datetime? new Date(status.status_datetime).toLocaleString() : 'N/A'}</div>
           
              `).join('<hr/>');

              output += `
                <div  class="package in-transit" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)">
                  <div class="col-sm-8">In Transit from ${safeValue(inTransitStatuses[0].location || 'N/A')}</div>
                  <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                  <div class="status transit">In Transit</div>
                  <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                    <span style="color:#5a99fc;">View Details</span>
                    <div class="details-balloon" style="display: none;">
                      <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                      ${combinedDetails}
                    </div>
                  </div>
                </div>
              `;
              inTransitStatuses.forEach(status => processedStatuses.add(status.scan));
            }

            // Process any remaining unhandled statuses
            deliveryStatus.forEach(status => {
              if (!processedStatuses.has(status.scan)) {
                output += `
                  <div class="package custom-status" style="background:linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)">
                    <div class="col-sm-8">Status Update from ${safeValue(status.scanned_location || 'N/A')}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status custom">${safeValue(status.scan)}</div>
                    <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                      <span style="color:#5a99fc;">View Details</span>
                      <div class="details-balloon" style="display: none;">
                        <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                        <div>Status: ${safeValue(status.scan)}</div>
                        <div>Location: ${safeValue(status.scanned_location || 'N/A')}</div>
                        <div>Scan Remark: ${safeValue(status.instructions || 'N/A')}</div>
                        <div> Date: ${status.scan_datetime? new Date(status.status_datetime).toLocaleString() : 'N/A'}</div>
                        
                      </div>
                    </div>
                  </div>
                `;
              }
            });

            return output;
          })()}
        </div>
      </div>
    `;
  }
}
function updateExpressBeesStatus(vendor, deliveryStatus, logoPath, lrNo, order,client) {
  // Update the right logo dynamically from the delivery status response
  console.log("order in expressbees",order,client)
  const rightLogo = document.getElementById('right-logo');
  if (rightLogo && logoPath) {
    rightLogo.src = logoPath;  // Set the new logo path
  }
 
  // Update the detailed order tracking section     Express Bees Tracking
  const detailedOrderTracking = document.querySelector('.detailedorder');
  if (detailedOrderTracking) {
    detailedOrderTracking.innerHTML = `
      <div class="mb-4">
        <div class="">
          
          <!-- Static Order Created Package -->
          <div class="package " style="background:linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)">
            <div class="col-sm-8">
              Package from ${safeValue(client.company_name)}
            </div>
            <div class="order-id">
              Order ID ${safeValue(order.order_id)}
            </div>
            <div class="status">
              ${deliveryStatus[deliveryStatus.length - 1].message}
            </div>
            <div class="progress-bar" style="width: 81%;">
            </div>
            <div class="details">
              <div>
                Customer<br/>
                <strong>${safeValue(order.consignee_name)}</strong>
              </div>
              <div>
                Weight<br/>
                <strong>${safeValue(order.chargable_weight || 'N/A')} ${safeValue(order.weight_unit || 'N/A')} </strong>
              </div>
              <div>
                Price<br/>
                <strong>₹ ${safeValue(order.Invoice_amount || 'N/A')}</strong>
              </div>
              <div>
                Departure<br/>
                <strong>${
                  deliveryStatus.find(status => status.message === 'In Transit') 
                    ? new Date(deliveryStatus.find(status => status.message === 'In Transit').event_time).toLocaleDateString()
                    : new Date(order.order_date).toLocaleDateString()
                }</strong>
              </div>
            </div>
          </div>

          <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
            <div>
              Package from ${safeValue(client.company_name)}
            </div>
            <div class="order-id">
              Order ID ${safeValue(order.order_id)}
            </div>
            <div class="status">
              order created
            </div>
            <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
              <span style="color:#5a99fc;">View Details</span>
              <div class="details-balloon" style="display: none;">
                <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                <div>
                  Location<br/>
                  <strong>${safeValue(order.warehouse_address)}</strong>
                </div>
                <div>
                  Order Date<br/>
                  <strong>${new Date(order.order_date).toLocaleString()}</strong>
                </div>
              </div>
            </div>
          </div>

          <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
            <div>
              Package from ${safeValue(client.company_name)}
            </div>
            <div class="order-id">
              Order ID ${safeValue(order.order_id)}
            </div>
            <div class="status">
              order in process
            </div>
            <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
              <span style="color:#5a99fc;">View Details</span>
              <div class="details-balloon" style="display: none;">
                <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                <div>
                  Location<br/>
                  <strong>${safeValue(order.warehouse_address)}</strong>
                </div>
                <div>
                  Update Date<br/>
                  <strong>${new Date(order.order_date).toLocaleString()}</strong>
                </div>
              </div>
            </div>
          </div>

          ${(() => {
            // Define known status categories
            const readyToDispatchMessages = ['Data Received', 'Pickup Not Done'];
            const inTransitMessages = ['Picked','Out For Pickup','Pickup Done'];
            
            let output = '';
            let processedStatuses = new Set();

            // Process Ready to Dispatch statuses
            const readyToDispatchStatuses = deliveryStatus.filter(status => 
              readyToDispatchMessages.includes(status.message)
            );

            if (readyToDispatchStatuses.length > 0) {
              const combinedDetails = readyToDispatchStatuses.map(status => `
                <div>Status: ${safeValue(status.message)}</div>
                <div>Location: ${safeValue(status.location || 'N/A')}</div>
                <div>Event Time: ${status.event_time? new Date(status.event_time).toLocaleString() : 'N/A'}</div>
              `).join('<hr/>');

              output += `
                <div class="package ready-to-dispatch" style="background:linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)">
                  <div>Ready to Dispatch from ${safeValue(readyToDispatchStatuses[0].location || order.warehouse_address)}</div>
                  <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                  <div class="status ready">Ready to Dispatch</div>
                  <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                    <span style="color:#5a99fc;">View Details</span>
                    <div class="details-balloon" style="display: none;">
                      <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                      ${combinedDetails}
                    </div>
                  </div>
                </div>
              `;
              readyToDispatchStatuses.forEach(status => processedStatuses.add(status.message));
            }

            // Process In Transit statuses
            const inTransitStatuses = deliveryStatus.filter(status =>
              inTransitMessages.includes(status.message)
            );

            if (inTransitStatuses.length > 0) {
              const combinedDetails = inTransitStatuses.map(status => `
                <div>Status: ${safeValue(status.message)}</div>
                <div>Location: ${safeValue(status.location || 'N/A')}</div>
                <div>Event Time: ${status.event_time? new Date(status.event_time).toLocaleString() : 'N/A'}</div>
              `).join('<hr/>');

              output += `
                <div  class="package in-transit" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)">
                  <div>Pick up  from ${safeValue(inTransitStatuses[0].location || 'N/A')}</div>
                  <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                  <div class="status pickup ">Pickup details</div>
                  <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                    <span style="color:#5a99fc;">View Details</span>
                    <div class="details-balloon" style="display: none;">
                      <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                      ${combinedDetails}
                    </div>
                  </div>
                </div>
              `;
              inTransitStatuses.forEach(status => processedStatuses.add(status.message));
            }

            // Process any remaining unhandled statuses
            deliveryStatus.forEach(status => {
              if (!processedStatuses.has(status.message)) {
                output += `
                  <div class="package custom-status" style="background:linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)">
                    <div>Status Update from ${safeValue(status.location || 'N/A')}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status custom">${safeValue(status.message)}</div>
                    <div class="info-icon" onclick="event.stopPropagation(); this.querySelector('.details-balloon').style.display = this.querySelector('.details-balloon').style.display === 'none' ? 'block' : 'none'">
                      <span style="color:#5a99fc;">View Details</span>
                      <div class="details-balloon" style="display: none;">
                        <span class="close-details" onclick="event.stopPropagation(); event.target.closest('.details-balloon').style.display = 'none'">×</span>
                        <div>Status: ${safeValue(status.message)}</div>
                        <div>Location: ${safeValue(status.location || 'N/A')}</div>
                        <div>Event Time: ${status.event_time? new Date(status.event_time).toLocaleString() : 'N/A'}</div>
                      </div>
                    </div>
                  </div>
                `;
              }
            });

            return output;
          })()}
        </div>
      </div>
    `;
  }
}

 

  // Function to toggle the visibility of info-balloon
  function toggleBalloon(item) {
    // Close all open balloons before opening the new one
    const allBalloons = document.querySelectorAll('.info-balloon');
    allBalloons.forEach(function(balloon) {
      balloon.style.display = 'none';
    });
 
    // Get the clicked balloon and toggle its display
    var balloon = item.querySelector('.info-balloon');
    balloon.style.display = balloon.style.display === 'none' ? 'block' : 'none';
  }
  
 
  // Function to close the info balloon when clicking outside
  function closeBalloonOutside(event) {
    const allBalloons = document.querySelectorAll('.info-balloon');
    allBalloons.forEach(function(balloon) {
      // Check if the click is outside the balloon and its parent (li)
      if (!balloon.contains(event.target) && !event.target.closest('.progressList_item')) {
        balloon.style.display = 'none';
      }
    });
  }
 
  // Add event listener to close balloons if clicked outside
  document.addEventListener('click', closeBalloonOutside);
 
  // Function to close the info balloon manually (close button)
  function closeBalloon(event, element) {
    event.stopPropagation();  // Stop the event from propagating to parent
    var balloon = element.closest('.info-balloon');
    balloon.style.display = 'none';
  }
</script>
 
 
<script>
  let token = null;
document.addEventListener("DOMContentLoaded",async()=>{
  try {
     const request =await axios.get('/get-api-token');
     console.log("get the data from the /get-api-token",request.data);
     token = request.data.token;
     console.log("token",token)
  } catch (error) {
    console.log("error getting",error);
  }
})
let apiKeyLtl = "<%= apiLTL %>";
let apiKeyStd = "<%= apiSTD %>";
let apiKey = null;
let TaggedApi = null;
console.log("api key",apiKeyLtl,apiKeyStd)
document.querySelectorAll('.print-label').forEach(item => {
    item.addEventListener('click', async function (event) {
        event.preventDefault(); // Prevent default link behavior
 
        const clientType = this.dataset.clientType;
 
        if (clientType==='DTDC/LTL'){
          apiKey = apiKeyLtl;
          TaggedApi = 'DTDC'
          console.log("in the DTDC/LTL")
        }
        else {
          apiKey = apiKeyStd;
          TaggedApi = 'DTDC'
        }
        let labelCode = this.dataset.labelCode;
        const awbNo = this.dataset.awbNumber;
 
        console.log("Clicked Label Info:", { labelCode, clientType, awbNo });
 
        // Adjust labelCode for Delhivery
        if (clientType === 'Delhivery') {
            const delhiveryLabelMap = {
                "SHIP_LABEL_4X6": "sm",
                "SHIP_LABEL_A4": "a4",
                "SHIP_LABEL_A6": "md",
                "SHIP_LABEL_POD": "std",
                "ROUTE_LABEL_A4": "a4",
                "ROUTE_LABEL_4X4": "md"
            };
            labelCode = delhiveryLabelMap[labelCode] || "std"; // Fallback to 'std' if no match
        }
 
        console.log("Updated Label Code:", labelCode);
 
        let apiUrl = '';
        let headers = {};
// Determine API based on client type
if (clientType === 'Delhivery') {
        console.log("Client Type: Delhivery");
 
        apiUrl = `https://ltl-clients-api.delhivery.com/label/get_urls/${labelCode}/${awbNo}`;
        headers = {
          'Authorization': `Bearer ${token}`, // Use the token fetched earlier
          'Content-Type': 'application/json'
        };
 
        try {
          const response = await axios.get('/delivery-shipping-label-links', {
            params: { apiUrl, token, awbNo }
          });
 
          if (response.data.success) {
            const imageResults = response.data.data;
            imageResults.forEach((image, index) => {
              const imageUrl = image.imageUrl; // This will be the URL to the saved image
 
              // Create a download link
              const downloadLink = document.createElement('a');
              downloadLink.href = imageUrl; // The URL of the image to download
              downloadLink.download = `shipping_label_${awbNo}__${labelCode}_${index + 1}.png`; // File name for download
              downloadLink.innerText = `Download Shipping Label ${index + 1}`;
 
              // Append the link temporarily to the body and trigger a click to start the download
              document.body.appendChild(downloadLink);
              downloadLink.click();
              document.body.removeChild(downloadLink);
            });
          } else {
            console.error("API response indicates failure:", response.data);
          }
        } catch (error) {
          console.error('Error fetching Delhivery label:', error);
        }
        
 
 
        } else if (clientType === 'DTDC/LTL') {
            console.log("Client Type: DTDC");
            console.log("dispatch api key here",apiKey)
            // console.log("sdsf",dsdsd)
            apiUrl = `https://dtdcapi.shipsy.io/api/customer/integration/consignment/shippinglabel/stream?reference_number=${awbNo}&label_code=${labelCode}&label_format=pdf`;
            headers = {
                'api-key': apiKey, // Ensure you have the correct API key
                'Content-Type': 'application/json'
            };
 
            try {
                const response = await axios.get(apiUrl, {
                    headers: headers,
                    responseType: 'blob' // Expecting a binary response for file download
                });
                console.log("DTDC API Response:", response.data);
 
                const url = window.URL.createObjectURL(new Blob([response.data], { type: 'application/pdf' }));
                const newTab = window.open(url);
                newTab.onload = () => {
                    const downloadLink = newTab.document.createElement('a');
                    downloadLink.href = url;
                    downloadLink.download = `${awbNo}_${labelCode}.pdf`;
                    downloadLink.innerText = 'Download PDF';
                    newTab.document.body.appendChild(downloadLink);
                };
            } catch (error) {
                console.error('Error fetching DTDC label:', error);
            }
        } else {
            console.error("Unknown client type:", clientType);
        }
    });
});
 
</script>
 
<script>
  // JavaScript to handle "select all" checkbox functionality
  document.getElementById('selectAll').addEventListener('change', function () {
      const checkboxes = document.querySelectorAll('.rowCheckbox');
      checkboxes.forEach(checkbox => {
          checkbox.checked = this.checked;
          toggleRowHighlight(checkbox);
      });
      updateSelectedCount(); // Update the count of selected checkboxes
  });
 
  // Add event listener to each row checkbox
  const checkboxes = document.querySelectorAll('.rowCheckbox');
  checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function () {
          toggleRowHighlight(this);
          updateSelectedCount(); // Update the count of selected checkboxes
      });
  });
 
  // Function to toggle row highlight based on checkbox state
  function toggleRowHighlight(checkbox) {
      const row = checkbox.closest('tr'); // Get the parent row of the checkbox
      if (checkbox.checked) {
          row.style.backgroundColor = '#e0f7fa'; // Highlight color
      } else {
          row.style.backgroundColor = '#'; // Default row color
      }
  }
 
 
</script>
 
<script>
  let clinetAggrigator = null;
  document.getElementById('client_select').addEventListener('change', async function () {
  const clientId = this.value;
  clinetAggrigator = clientId
 
  // Clear the table if no client is selected
  if (!clientId) {
    document.getElementById('table-body').innerHTML = '';
    return;
  }
 
  try {
    // Fetch data using axios
    const response = await axios.get(`/fetch-orders`, {
      params: { client_id: clientId },
    });
 
    const data = response.data;
 
    // Update the table with new data
    const tableBody = document.getElementById('table-body');
    tableBody.innerHTML = ''; // Clear existing rows
 
    data.forEach((item) => {
      tableBody.innerHTML += `
        <tr>
          <td style="text-align: left; padding: 8px;"><input type="checkbox" class="row-checkbox" /></td>
          <td class="text-left">
            <span class="order-id" 
              data-bs-toggle="offcanvas" 
              data-bs-target="#orderDetailsCanvas" 
              aria-controls="orderDetailsCanvas" 
              style="color: #1e6bd7; font-size: 12px; cursor: pointer;">
              ${item.order_id}
            </span><br> 
            <span class="po-no" style="font-size: 12px; color: #555;">
              ${item.po_no}
            </span>
          </td>
          <td class="text-left" style="font-size: 12px; color: #555;">
            ${item.order_date}
          </td>
          <td class="text-left" style="font-size: 12px; color: #555;">
            <div class="milestone-container">
              <div class="origin">${item.warehouse_address}</div>
              <div class="destination">${item.consignee_address}</div>
              <div class="milestone-line">
                <div class="truck-icon origin"><i class="fa-solid fa-shop" style="font-size: 10px;"></i></div>
                <div class="truck-icon destination"><i class="fas fa-truck" style="font-size: 10px;"></i></div>
              </div>
            </div>
          </td>
          <td class="text-left" style="font-size: 12px; color: #555;">
            ${item.total_boxes || 0}
          </td>
          <td class="text-left">
            ${item.payment_type}<br>
            <h5 style="font-size: 12px; color: #1f50b5;">
              ₹ ${item.amount}
            </h5>
          </td>
          <td class="text-left p-0" style="padding: 10px !important;">
           <button class="btn-assign-lr btn btn-success btn-square btn-outline-dashed" 
                              style="display: flex;flex-direction: row;flex-wrap: nowrap;align-content: center;justify-content: space-around;align-items: center;">
                              <i class="ti ti-truck menu-icon" style="font-size: 12px;"></i>&nbsp;&nbsp;Assign LR
                            </button>
          </td>
        </tr>`;
    });
  } catch (error) {
    console.error('Error fetching data:', error);
  }
});
 
</script>
 
<script>
// Handle submenu toggle
document.querySelectorAll('.dropdown-submenu > a').forEach(function (element) {
  element.addEventListener('click', function (e) {
    e.preventDefault();
    e.stopPropagation();
 
    // Close all open submenus
    var openSubmenus = document.querySelectorAll('.dropdown-submenu .dropdown-menu');
    openSubmenus.forEach(function (submenu) {
      submenu.style.display = 'none';
    });
 
    // Open the current submenu
    var currentSubmenu = this.nextElementSibling;
    currentSubmenu.style.display = 'block';
  });
});
</script>
<script>
  document.addEventListener('DOMContentLoaded', function () {
      // Add event listener to all "Cancel LR/AWB" buttons
      document.querySelectorAll('.cancel-lr').forEach(button => {
          button.addEventListener('click', async function (event) {
              event.preventDefault(); // Prevent default link behavior
  
              const clientType = this.getAttribute('data-client-type'); // Get client type
              const lrNumber = this.getAttribute('data-awb-number');
               // Get LR number
               const po_number = this.getAttribute("data-poid")
               console.log("po_number: " + po_number)
  
              if (!clientType || !lrNumber) {
                  console.error('Client type or LR number is missing.');
                  return;
              }
  
              console.log(`Cancelling LR for client: ${clientType}, LR: ${lrNumber} and poid: ${po_number}`);
              // console.log("skjdksdjksd",dsdsdsd)
  
              try {
                  let response;
  
                  // Handle different client types
                  if (clientType === 'Delhivery/Standard-Surface' || clientType==="Delhivery/standard-surface" || clientType==="Delhivery/Standard-Air" || clientType==="Delhivery/standard-air") {
                      // Call the backend endpoint for Delhivery standard surface cancellation
                      response = await axios.post('/api/cancel-delhivery-standard', { lrNumber, po_number});
                  } else if (clientType === 'Delhivery/LTL-surface') {
                      // Directly call the Delhivery LTL surface cancellation API
                      const apiUrl = `https://ltl-clients-api.delhivery.com/lrn/cancel/${lrNumber}`;
                      // const token = 'YOUR_LTL_TOKEN'; // Replace with your actual token
                      const headers = {
                          'Content-Type': 'application/json',
                          'Authorization': `Bearer ${token}` // Add the Bearer token
                      };
  
                      response = await axios.delete(apiUrl, { headers });
                      if (response.data.success) {
                              await axios.post('/api/update-order-status', { po_number, status: 2 });
                          }
                  } else if (clientType === 'DTDC/LTL') {
                      const apiUrl = 'https://demodashboardapi.shipsy.in/api/customer/integration/consignment/cancel';
                      const headers = {
                          'Content-Type': 'application/json',
                          'api-key': apiKey // Use the API key for DTDC
                      };
                      const requestBody = {
                          "AWBNo": [lrNumber], // LR number to cancel
                          "customerCode": "GL017" // Replace with your customer code
                      };
                      response = await axios.post(apiUrl, requestBody, { headers });
                                          if (response.data.success) {
                            await axios.post('/api/update-order-status', { po_number, status: 2 });
                        }
                  } else if (clientType === 'expressbees/Standard-Surface' || clientType === 'expressbees/Standard-Air') {
                      const expressbeeTokenResponse = await axios.get('/api-token-for-expressbees');
                      const expressbeeToken = expressbeeTokenResponse.data.token;
  
                      const apiUrl = 'https://shipment.xpressbees.com/api/shipments2/cancel';
                      const headers = {
                          'Content-Type': 'application/json',
                          'Authorization': `Bearer ${expressbeeToken}` // Add the Bearer token for Expressbee
                      };
                      const requestBody = {
                          "awb": lrNumber // LR number to cancel
                      };
                      response = await axios.post(apiUrl, requestBody, { headers });
                                        if (response.data.success) {
                          await axios.post('/api/update-order-status', { po_number, status: 2 });
                      }
                  } else {
                      console.error('Unsupported client type:', clientType);
                      return;
                  }
  
                  // Updated condition to handle different API response structures
                  if (
                    (clientType === 'Delhivery/Standard-Surface' || clientType === 'Delhivery/standard-surface' || clientType === 'Delhivery/Standard-Air' || clientType === 'Delhivery/standard-air') && 
                    response.data.status === true // Check for success in Delhivery standard response
                ) {
                    // SweetAlert for success (Delhivery Standard)
                    Swal.fire({
                        title: 'Success!',
                        text: `LR ${lrNumber} cancelled successfully for ${clientType}.`,
                        icon: 'success',
                        confirmButtonText: 'OK'
                    });
                    console.log('Delhivery cancellation response:', response.data);
                } else if (
                    (clientType === 'expressbees/Standard-Surface' || clientType === 'expressbees/Standard-Air') && 
                    response.data.status === true // Express Bees API success condition
                ) {
                    // SweetAlert for success (Express Bees)
                    Swal.fire({
                        title: 'Success!',
                        text: `LR ${lrNumber} cancelled successfully for ${clientType}.`,
                        icon: 'success',
                        confirmButtonText: 'OK'
                    });
                    console.log('Express Bees cancellation response:', response.data);
                } else if (response.data.success) {
                    // SweetAlert for success (DTDC, etc.)
                    Swal.fire({
                        title: 'Success!',
                        text: `LR ${lrNumber} cancelled successfully for ${clientType}.`,
                        icon: 'success',
                        confirmButtonText: 'OK'
                    });
                    console.log('Cancellation response:', response.data);
                } else {
                    // SweetAlert for failure
                    Swal.fire({
                        title: 'Failure!',
                        text: `Failed to cancel LR ${lrNumber} for ${clientType}.`,
                        icon: 'error',
                        confirmButtonText: 'Try Again'
                    });
                    console.error('Cancellation failed:', response.data);
                }
            } catch (error) {
                console.error('Error cancelling LR:', error);
 
                // SweetAlert for error
                Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while cancelling the LR. Please try again.',
                    icon: 'error',
                    confirmButtonText: 'Close'
                });
            }
        });
    });
});
</script>


<script>
  // Define table variable in global scope
  let dataTable;

  $(document).ready(function() {
    // Initialize DataTable if not already initialized
    if ($.fn.dataTable.isDataTable('#datatable_2')) {
      dataTable = $('#datatable_2').DataTable();
    } else {
      dataTable = $('#datatable_2').DataTable({
        "ordering": false,
      "searching": true,
      "lengthChange": false,
      "info": true,
      "paging": true,
      // Modified DOM structure to position buttons to the right
      "dom": '<"row mb-3"<"col-md-6"l><"col-md-6 d-flex justify-content-end"B>>rtip',
      "language": {
        "info": "<div style='float: left;'>Showing _START_ to _END_ of _TOTAL_ entries</div>"
      },
      "pagingType": "full_numbers",
      "pageLength": 10,
      // Export buttons configuration with export options to include filtered data
      "buttons": [
        {
          extend: 'csv',
          text: '<i class="fas fa-file-csv"></i> CSV',
          className: 'btn btn-sm btn-primary me-1',
          title: 'order delivered data',
          exportOptions: {
            columns: ':visible',
            search: 'applied',
            order: 'applied'
          }
        },
        {
          extend: 'excel',
          text: '<i class="fas fa-file-excel"></i> Excel',
          className: 'btn btn-sm btn-success me-1',
          title: 'order delivered data Export',
          exportOptions: {
            columns: ':visible',
            search: 'applied',
            order: 'applied'
          }
        },
        {
          extend: 'pdf',
          text: '<i class="fas fa-file-pdf"></i> PDF',
          className: 'btn btn-sm btn-danger me-1',
          title: 'order delivered data Export',
          exportOptions: {
            columns: ':visible',
            search: 'applied',
            order: 'applied'
          }
        },
        {
          extend: 'print',
          text: '<i class="fas fa-print"></i> Print',
          className: 'btn btn-sm btn-secondary me-1',
          title: 'order delivered data',
          exportOptions: {
            columns: ':visible',
            search: 'applied',
            order: 'applied'
          }
        }
      ],
      "drawCallback": function() {
        // Style pagination buttons
        $('.paginate_button').addClass('btn btn-sm').css({
          'background-color': '#e3f2fd',
          'border-color': '#90caf9',
          'color': '#1976d2',
          'margin': '0 2px',
          'border-radius': '4px'
        });
        
        $('.paginate_button.current').css({
          'background-color': '#1976d2',
          'color': '#fff !important',
          'border-color': '#1976d2'
        });

        $('.paginate_button.disabled').css({
          'opacity': '0.5',
          'cursor': 'not-allowed'
        });
        
        // Style the buttons container to align right
        $('.dt-buttons').css({
          'display': 'flex',
          'justify-content': 'flex-end',
          'margin-bottom': '10px',
          'margin-right': '10px'
        });
        
        // Style individual buttons
        $('.dt-button').addClass('btn btn-sm mx-1').css({
          'border-radius': '4px'
        });
      }
    });
    }

    // Add filter indicators container if it doesn't exist
    if ($('.filter-indicators').length === 0) {
      $('.row.mx-0.p-4').after(
        `<div class="filter-indicators d-flex flex-wrap mx-4 mb-3"></div>`
      );
    }

    // Handle filter option clicks
    $('.filter-option').on('click', function(e) {
      e.preventDefault();
      const filterType = $(this).data('filter-type');
      
      if (filterType === 'client') {
        // Populate client dropdown before showing the modal
        populateClientFilter();
        $('#clientFilterModal').modal('show');
      } else if (filterType === 'payment') {
        // Populate payment dropdown before showing the modal
        populatePaymentFilter();
        $('#paymentFilterModal').modal('show');
      } else if (filterType === 'date') {
        // For date filter, we're using the inline controls
        // No need to show a modal
      }
    });

    // Apply client filter
    $('#applyClientFilter').on('click', function() {
      const selectedClientId = $('#clientSelect').val();
      
      // Custom filtering function for client ID
      $.fn.dataTable.ext.search.push(
        function(settings, data, dataIndex) {
          // If no client is selected, show all rows
          if (!selectedClientId) return true;
          
          // Get the client ID from the row data attribute
          const rowClientId = $(dataTable.row(dataIndex).node()).data('client');
          
          // Return true if the client ID matches
          return rowClientId == selectedClientId;
        }
      );
      
      // Apply the filter
      dataTable.draw();
      
      // Remove the filter function after applying
      $.fn.dataTable.ext.search.pop();
      
      // Close the modal
      $('#clientFilterModal').modal('hide');
      
      // Show active filter indicator
      if (selectedClientId) {
        const clientName = $('#clientSelect option:selected').text();
        showActiveFilter('client', clientName);
      } else {
        $('#active-filter-client').remove();
      }
    });

    // Apply payment filter
    $('#applyPaymentFilter').on('click', function() {
      const selectedPaymentMode = $('#paymentModeSelect').val();
      
      // Custom filtering function for payment mode
      $.fn.dataTable.ext.search.push(
        function(settings, data, dataIndex) {
          // If no payment mode is selected, show all rows
          if (!selectedPaymentMode) return true;
          
          // Get the payment mode from the row data attribute
          const rowPaymentMode = $(dataTable.row(dataIndex).node()).data('payment');
          
          // Return true if the payment mode matches
          return rowPaymentMode === selectedPaymentMode;
        }
      );
      
      // Apply the filter
      dataTable.draw();
      
      // Remove the filter function after applying
      $.fn.dataTable.ext.search.pop();
      
      // Close the modal
      $('#paymentFilterModal').modal('hide');
      
      // Show active filter indicator
      if (selectedPaymentMode) {
        showActiveFilter('payment', selectedPaymentMode);
      } else {
        $('#active-filter-payment').remove();
      }
    });

    // Date range filtering
    $('#apply-date-filter').on('click', function() {
      const minDate = $('#min-date').val() ? new Date($('#min-date').val()) : null;
      const maxDate = $('#max-date').val() ? new Date($('#max-date').val()) : null;
      
      // Add custom filtering function
      $.fn.dataTable.ext.search.push(
        function(settings, data, dataIndex) {
          // Skip if no date filters are set
          if (!minDate && !maxDate) return true;
          
          // Get date from the row (column 2 - LR DATE)
          const dateStr = data[2];
          try {
            // Parse the date from the cell
            const date = new Date(dateStr);
            
            // Skip invalid dates
            if (isNaN(date.getTime())) return true;
            
            // Check if date is within range
            let valid = true;
            if (minDate && date < minDate) valid = false;
            if (maxDate && date > maxDate) valid = false;
            
            return valid;
          } catch (e) {
            return true; // If date parsing fails, include the row
          }
        }
      );
      
      // Apply the filter
      dataTable.draw();
      
      // Remove the filter function after applying
      $.fn.dataTable.ext.search.pop();
      
      // Show active filter indicator for date range
      if (minDate || maxDate) {
        let dateRangeText = '';
        if (minDate && maxDate) {
          dateRangeText = `${minDate.toLocaleDateString()} - ${maxDate.toLocaleDateString()}`;
        } else if (minDate) {
          dateRangeText = `From: ${minDate.toLocaleDateString()}`;
        } else if (maxDate) {
          dateRangeText = `To: ${maxDate.toLocaleDateString()}`;
        }
        
        showActiveFilter('date', dateRangeText);
      } else {
        $('#active-filter-date').remove();
      }
    });

    // Clear date filter
    $('#clear-date-filter').on('click', function() {
      $('#min-date').val('');
      $('#max-date').val('');
      $('#active-filter-date').remove();
      dataTable.draw();
    });

    // Handle quick date range options
    $('.date-range-option').on('click', function(e) {
      e.preventDefault();
      const range = $(this).data('range');
      const today = new Date();
      let startDate, endDate;
      
      switch(range) {
        case 'today':
          startDate = new Date(today);
          endDate = new Date(today);
          break;
        case 'yesterday':
          startDate = new Date(today);
          startDate.setDate(startDate.getDate() - 1);
          endDate = new Date(startDate);
          break;
        case 'last7days':
          endDate = new Date(today);
          startDate = new Date(today);
          startDate.setDate(startDate.getDate() - 6);
          break;
        case 'last30days':
          endDate = new Date(today);
          startDate = new Date(today);
          startDate.setDate(startDate.getDate() - 29);
          break;
        case 'thisMonth':
          startDate = new Date(today.getFullYear(), today.getMonth(), 1);
          endDate = new Date(today);
          break;
        case 'lastMonth':
          startDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);
          endDate = new Date(today.getFullYear(), today.getMonth(), 0);
          break;
      }
      
      // Format dates for input fields (YYYY-MM-DD)
      $('#min-date').val(formatDateForInput(startDate));
      $('#max-date').val(formatDateForInput(endDate));
      
      // Trigger the apply filter button
      $('#apply-date-filter').click();
    });

    // Initialize search functionality
    $('#search-input').on('keyup', function() {
      dataTable.search(this.value).draw();
    });

    $('#button-addon2').on('click', function() {
      dataTable.search($('#search-input').val()).draw();
    });
  });

  // Helper function to format date for input field
  function formatDateForInput(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }

  // Function to populate client filter dropdown
  function populateClientFilter() {
    const clientSelect = $('#clientSelect');
    clientSelect.empty();
    clientSelect.append('<option value="">All Clients</option>');
    
    // Get unique client IDs and names from the table
    const clientMap = new Map(); // Use Map to store client_id -> company_name pairs
    
    // Get client data from data attributes
    $('#datatable_2 tbody tr').each(function() {
      const clientId = $(this).data('client');
      const companyName = $(this).data('company-name') || `Client ${clientId}`;
      
      if (clientId && !clientMap.has(clientId)) {
        clientMap.set(clientId, companyName);
        clientSelect.append(`<option value="${clientId}">${companyName}</option>`);
      }
    });
  }

  // Function to populate payment filter dropdown
  function populatePaymentFilter() {
    const paymentSelect = $('#paymentModeSelect');
    paymentSelect.empty();
    paymentSelect.append('<option value="">All Payment Modes</option>');
    
    // Get unique payment modes from the table
    const paymentModes = new Set();
    
    // Get payment modes from data attributes
    $('#datatable_2 tbody tr').each(function() {
      const paymentMode = $(this).data('payment');
      if (paymentMode && !paymentModes.has(paymentMode)) {
        paymentModes.add(paymentMode);
        paymentSelect.append(`<option value="${paymentMode}">${paymentMode}</option>`);
      }
    });
  }

  // Function to show active filter indicator
  function showActiveFilter(type, value) {
    // Create or update active filter indicator
    let filterIndicator = $('#active-filter-' + type);
    if (filterIndicator.length === 0) {
      // Create new indicator if it doesn't exist
      $('.filter-indicators').append(
        `<span id="active-filter-${type}" class="badge bg-primary me-2 mb-2">
          ${type === 'client' ? 'Client' : type === 'payment' ? 'Payment' : 'Date'}: ${value}
          <button type="button" class="btn-close btn-close-white ms-2" aria-label="Close" 
            onclick="clearFilter('${type}')"></button>
        </span>`
      );
    } else {
      // Update existing indicator
      filterIndicator.html(
        `${type === 'client' ? 'Client' : type === 'payment' ? 'Payment' : 'Date'}: ${value}
        <button type="button" class="btn-close btn-close-white ms-2" aria-label="Close" 
          onclick="clearFilter('${type}')"></button>`
      );
    }
  }

  // Function to clear filter (accessible from HTML)
  function clearFilter(type) {
    // Get the DataTable instance
    const table = $('#datatable_2').DataTable();
    
    // Remove the filter indicator
    $('#active-filter-' + type).remove();
    
    // Reset the corresponding filter
    if (type === 'client') {
      $('#clientSelect').val('');
      // Use custom filtering to clear client filter
      $.fn.dataTable.ext.search.push(function() { return true; });
      table.draw();
      $.fn.dataTable.ext.search.pop();
    } else if (type === 'payment') {
      $('#paymentModeSelect').val('');
      // Use custom filtering to clear payment filter
      $.fn.dataTable.ext.search.push(function() { return true; });
      table.draw();
      $.fn.dataTable.ext.search.pop();
    } else if (type === 'date') {
      $('#min-date').val('');
      $('#max-date').val('');
      table.draw();
    }
  }
</script>
<!-- Add this before closing </body> tag -->
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAUn2MQSdLGnXLCK3smc1Y3lFgc76fwwh8&callback=initMap" async defer></script>


<script>
  let map;
  let directionsService;
  let directionsRenderer;
  let markers = [];

  function initMap() {
      directionsService = new google.maps.DirectionsService();
      directionsRenderer = new google.maps.DirectionsRenderer({
          suppressMarkers: true,
          polylineOptions: {
              strokeColor: '#0000FF', // Blue color for the route
              strokeWeight: 4
          }
      });
      
      const styles = [
        {
          stylers: [
            { saturation: -80 },
            { lightness: 20 }
          ]
        }
      ];
      
      map = new google.maps.Map(document.getElementById("map"), {
          zoom: 20,
          center: { lat: 20.5937, lng: 78.9629 },
          mapTypeControl: false,
          fullscreenControl: true,
          streetViewControl: false,
          styles: styles
      });
      
      directionsRenderer.setMap(map);
  }

  function createMarker(position, type, title, status) {
      let iconUrl;
      switch(type) {
          case 'origin':
              iconUrl = 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png';
              break;
          case 'intermediate':
              iconUrl = 'https://maps.google.com/mapfiles/ms/icons/yellow-dot.png';
              break;
          case 'current':
              iconUrl = 'https://maps.google.com/mapfiles/ms/icons/green-dot.png';
              break;
          case 'destination':
              iconUrl = 'https://maps.google.com/mapfiles/ms/icons/red-dot.png';
              break;
          default:
              iconUrl = 'https://maps.google.com/mapfiles/ms/icons/grey-dot.png';
      }

      const marker = new google.maps.Marker({
          position: position,
          map: map,
          icon: {
              url: iconUrl,
              scaledSize: new google.maps.Size(40, 40)
          },
          title: title,
          animation: google.maps.Animation.DROP
      });

      const infoWindow = new google.maps.InfoWindow({
          content: `<div style="padding: 10px">
              <strong>${title}</strong>
              ${status ? `<br><small>${status}</small>` : ''}
          </div>`
      });

      marker.addListener('click', () => {
          infoWindow.open(map, marker);
      });

      markers.push(marker);
      return marker;
  }

  function calculateAndDisplayRoute(deliveryStatus, finalDestination, eta) {
    markers.forEach(marker => marker.setMap(null));
    markers = [];
    
    const geocoder = new google.maps.Geocoder();
    const bounds = new google.maps.LatLngBounds();

    const processLocations = async () => {
        try {
            const routeService = new google.maps.DirectionsService();
            const geocodedLocations = [];
            let totalDistance = 0;
            let totalDurationInDays = parseInt(eta) || 5;

            // Filter unique locations while preserving order
            const uniqueDeliveryStatus = deliveryStatus.filter((status, index, self) =>
                index === self.findIndex(s => s.location === status.location)
            );
            
            const firstDate = new Date(uniqueDeliveryStatus[0].date);
            const currentDate = new Date();
            const elapsedDays = Math.floor((currentDate - firstDate) / (1000 * 60 * 60 * 24));

            // Geocode all locations
            for (let i = 0; i < uniqueDeliveryStatus.length; i++) {
                const location = uniqueDeliveryStatus[i].location;
                const status = uniqueDeliveryStatus[i].status;
                const date = uniqueDeliveryStatus[i].date;

                try {
                    const results = await new Promise((resolve, reject) => {
                        geocoder.geocode({ address: location + ', India' }, (results, geoStatus) => {
                            if (geoStatus === 'OK') resolve(results);
                            else reject(geoStatus);
                        });
                    });

                    const markerType = i === uniqueDeliveryStatus.length - 1 ? 'current' : 
                                     i === 0 ? 'origin' : 'intermediate';
                    
                    createMarker(
                        results[0].geometry.location,
                        markerType,
                        location,
                        `Status: ${status}<br>Date: ${new Date(date).toLocaleString()}`
                    );
                    
                    bounds.extend(results[0].geometry.location);
                    geocodedLocations.push(results[0].geometry.location);
                } catch (error) {
                    console.error(`Error geocoding location ${location}:`, error);
                }
            }

            // Add destination marker if different from last location
            if (finalDestination && finalDestination !== uniqueDeliveryStatus[uniqueDeliveryStatus.length - 1].location) {
                try {
                    const results = await new Promise((resolve, reject) => {
                        geocoder.geocode({ address: finalDestination + ', India' }, (results, geoStatus) => {
                            if (geoStatus === 'OK') resolve(results);
                            else reject(geoStatus);
                        });
                    });
                    
                    createMarker(
                        results[0].geometry.location,
                        'destination',
                        finalDestination,
                        'Final Destination'
                    );
                    
                    bounds.extend(results[0].geometry.location);
                    geocodedLocations.push(results[0].geometry.location);
                } catch (error) {
                    console.error(`Error geocoding destination ${finalDestination}:`, error);
                }
            }

            // Calculate route through all points
            if (geocodedLocations.length >= 2) {
                const waypoints = geocodedLocations.slice(1, -1).map(location => ({
                    location: location,
                    stopover: true
                }));

                const routeRequest = {
                    origin: geocodedLocations[0],
                    destination: geocodedLocations[geocodedLocations.length - 1],
                    waypoints: waypoints,
                    optimizeWaypoints: false, // Don't reorder waypoints
                    travelMode: google.maps.TravelMode.DRIVING
                };

                const response = await new Promise((resolve, reject) => {
                    routeService.route(routeRequest, (result, status) => {
                        if (status === 'OK') resolve(result);
                        else reject(status);
                    });
                });

                // Calculate total distance and remaining distance
                totalDistance = response.routes[0].legs.reduce((acc, leg) => acc + leg.distance.value, 0);
                const remainingDistance = response.routes[0].legs[response.routes[0].legs.length - 1].distance.value;
                const completedDistance = totalDistance - remainingDistance;
                
                const remainingDays = Math.max(0, totalDurationInDays - elapsedDays);
                const completedPercentage = ((completedDistance / totalDistance) * 100).toFixed(1);
                
                // Update the map and directions
                directionsRenderer.setDirections(response);
                map.fitBounds(bounds);

                // Update UI elements
                const durationText = remainingDays === 0 ? "Delivery overdue" :
                                   remainingDays === 1 ? "1 day remaining" :
                                   `${remainingDays} days remaining`;

                document.getElementById("total_distance").textContent = `${(totalDistance/1000).toFixed(1)} km`;
                document.getElementById("distance").textContent = `${(remainingDistance/1000).toFixed(1)} km`;
                document.getElementById("duration").textContent = durationText;
                document.getElementById("map_info").textContent = 
                    `Total: ${(totalDistance/1000).toFixed(1)}km | ` +
                    `Remaining: ${(remainingDistance/1000).toFixed(1)}km | ` +
                    `Progress: ${completedPercentage}% | ` +
                    `ETA: ${durationText}`;
            }

        } catch (error) {
            console.error('Error in route calculation:', error);
        }
    };

    processLocations();
}

</script>
<script>
  // Add this script in your JavaScript section
document.querySelectorAll('.print-label').forEach(function(element) {
    element.addEventListener('click', async function(e) {
        e.preventDefault();
        
        // Get data from attributes
        const courier = this.getAttribute('data-courier');
        const clientId = this.getAttribute('client-id');
        const aggrigatorId = this.getAttribute('aggrigator-id');

        const awbNumber = this.getAttribute('data-awb-number');
        const poId = this.getAttribute('data-poid');
        const labelSize = this.getAttribute('data-size');
        console.log("data-courier: " + courier)
        console.log("data-awb-number: " + awbNumber)
        console.log("data-poid: " + poId)
        console.log("data-size: " + labelSize)
        console.log("client-id: " + clientId)
        console.log("aggrigator-id: " + aggrigatorId)
        
        try {
            Swal.fire({
                title: 'Generating Label...',
                text: 'Please wait while we generate your shipping label',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            const response = await axios.get('/get-shipping-label', {
    params: {
        courier,
        awbNumber,
        poId,
        labelSize,
        clientId,
        aggrigatorId
    },
    responseType: 'blob'
});

            const blob = new Blob([response.data], { type: 'application/pdf' });
            const url = window.URL.createObjectURL(blob);
            
            const link = document.createElement('a');
            link.href = url;
            link.download = `shipping-label-${awbNumber}-${labelSize}.pdf`;
            link.style.display = 'none';
            document.body.appendChild(link);
            
            link.click();
            
            setTimeout(() => {
                document.body.removeChild(link);
                window.URL.revokeObjectURL(url);
            }, 100);

            Swal.close();

        } catch (error) {
            console.error('Error fetching label:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error', 
                text: 'Failed to generate shipping label. Please try again.'
            });
        }
    });
});

</script>
            <%- include('../partials/footer') %>

            <!-- स्क्रिप्ट्स -->
            <script src="/js/main.js"></script>
        </body>
    </html>
