<%- include('../partials/header') %>
  <%- include('../partials/left-sidebar') %>

    <main>
      <div class="container-fluid">
        <!-- header breadcrumb part start here  -->
        <div class="row">
          <div class="col-12">
            <h1>Forwarder List</h1>
            <nav class="breadcrumb-container d-none d-sm-block d-lg-inline-block" aria-label="breadcrumb">
              <ol class="breadcrumb pt-0">
                <li class="breadcrumb-item"><a href="#">Home</a></li>
                <li class="breadcrumb-item"><a href="#">Library</a></li>
                <li class="breadcrumb-item active" aria-current="page">Data</li>
              </ol>
            </nav>
            <div class="separator mb-5"></div>
          </div>
        </div>
        <!-- header breadcrumb part end here  -->

        <!-- Display Options Section -->
        <div class="row">
          <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-2">
              <div class="d-flex align-items-center">
                <!-- Search is now handled by DataTable's built-in search -->
              </div>
              <div class="top-right-button-container">
                <button type="button" class="btn btn-outline-primary btn-lg" data-toggle="modal" data-backdrop="static"
                  data-target="#exampleModal">
                  <i class="fas fa-plus me-2"></i>ADD NEW
                </button>
              </div>
            </div>
            <div class="separator"></div>
          </div>
        </div>

        <!-- body part start here  -->
        <div class="row">
          <div class="col-12 mb-4 data-table-rows data-tables-hide-filter">
            <!-- Data Table Container -->
            <div class="p-2">
              <div class="card-body">
                <table id="forwarder_details" class="data-table responsive wrap" data-order="[[ 1, &quot;desc&quot; ]]">
                  <thead>
                    <tr>
                      <th>Logo</th>
                      <th>Forwarder Name</th>
                      <th>Service Type</th>
                      <th>Category</th>
                      <th>Variant</th>
                      <th>Volume/shipment</th>
                      <th>Action</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% if (result && result.length> 0) { %>
                      <% console.log('Number of forwarders:', result.length); %>
                        <% console.log('First forwarder:', result[0]); %>
                          <% result.forEach((forwarder)=> { %>
                            <% const taggedApi=(forwarder.Tagged_api || '' ).toLowerCase(); let
                              logoPath='/assets/images/logos/logo-dark.png' ; if (taggedApi.includes('delhivery')) {
                              logoPath='/assets/images/logos/delhivery.png' ; } else if (taggedApi.includes('xpress') ||
                              taggedApi.includes('xpressbees')) { logoPath='/assets/images/logos/expressbees.png' ; }
                              else if (taggedApi.includes('dtdc')) { logoPath='/assets/images/logos/dtdc.png' ; } else
                              if (taggedApi.includes('bluedart')) { logoPath='/assets/images/BlueDart.png' ; } else if
                              (taggedApi.includes('fedex')) { logoPath='/assets/images/FedEx.png' ; } else if
                              (forwarder.logo_path) { logoPath=forwarder.logo_path; } %>
                              <tr>
                                <td>
                                  <img src="<%= logoPath %>" alt="<%= forwarder.company_name %>"
                                    style="width: 60px; height: 45px; object-fit: contain;">
                                </td>
                                <td>
                                  <%= forwarder.company_name %>
                                </td>
                                <td>
                                  <%= forwarder.service_type %>
                                </td>
                                <td>
                                  <%= forwarder.courier_type %>
                                </td>
                                <td>
                                  <% if (forwarder.delhivery_api_variant==1) { %>
                                    <span class="badge bg-info">Dispatch</span>
                                    <% } else if (forwarder.delhivery_api_variant==2) { %>
                                      <span class="badge bg-success">QuickNFly</span>
                                      <% } else { %>
                                        <span class="badge bg-secondary">Normal</span>
                                        <% } %>
                                </td>
                                <td>
                                  <% if (forwarder.packet_shipment==0) { %>
                                    <% if (forwarder.business_volume==1) { %>
                                      <span class="badge badge-info">Basic</span><br><small>(0 - 25,000)</small>
                                      <% } else if (forwarder.business_volume==2) { %>
                                        <span class="badge badge-info">Lite</span><br><small>(25,001 - 50,000)</small>
                                        <% } else if (forwarder.business_volume==3) { %>
                                          <span class="badge badge-info">LitePro</span><br><small>(50,001 -
                                            100,000)</small>
                                          <% } else if (forwarder.business_volume==4) { %>
                                            <span class="badge badge-info">Premium</span><br><small>(100,001 -
                                              250,000)</small>
                                            <% } else if (forwarder.business_volume==5) { %>
                                              <span class="badge badge-info">Advance</span><br><small>(250,001 -
                                                500,000)</small>
                                              <% } else if (forwarder.business_volume==6) { %>
                                                <span
                                                  class="badge badge-info">AdvancedPro</span><br><small>(500,001+)</small>
                                                <% } else if (forwarder.business_volume==7) { %>
                                                  <span class="badge badge-info">Enterprise</span>
                                                  <% } %>
                                                    <% } else { %>
                                                      <% if (forwarder.packet_shipment==1) { %>
                                                        <span>0-500(PKT)</span>
                                                        <% } else if (forwarder.packet_shipment==2) { %>
                                                          <span>500-1000(PKT)</span>
                                                          <% } else if (forwarder.packet_shipment==3) { %>
                                                            <span>1000-1500(PKT)</span>
                                                            <% } else if (forwarder.packet_shipment==4) { %>
                                                              <span>1500-2000(PKT)</span>
                                                              <% } else if (forwarder.packet_shipment==5) { %>
                                                                <span>2000-2500(PKT)</span>
                                                                <% } else if (forwarder.packet_shipment==6) { %>
                                                                  <span>2500-3000(PKT)</span>
                                                                  <% } else if (forwarder.packet_shipment==7) { %>
                                                                    <span>3000-3500(PKT)</span>
                                                                    <% } else if (forwarder.packet_shipment==8) { %>
                                                                      <span>3500-4000(PKT)</span>
                                                                      <% } else if (forwarder.packet_shipment==9) { %>
                                                                        <span>4000+</span>
                                                                        <% } %>
                                                                          <% } %>
                                </td>
                                <td>
                                  <div style="display: flex; gap: 2px;">
                                    <div class="dropdown">
                                      <button class="btn btn-sm dropdown-toggle" type="button"
                                        data-bs-toggle="dropdown">
                                        <i class="fas fa-edit" style="color:#5a99fc"></i>
                                      </button>
                                      <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" href="#"
                                            onclick="editParentalDetails('<%= forwarder.id %>')">Parental Details</a>
                                        </li>
                                        <li><a class="dropdown-item" href="#"
                                            onclick="editAdditionalCharges('<%= forwarder.id %>','<%= forwarder.courier_type%>')">Additional
                                            Charges</a></li>
                                        <% if (forwarder.courier_type && forwarder.courier_type.toLowerCase()==='ltl' )
                                          { %>
                                          <li>
                                            <hr class="dropdown-divider">
                                          </li>
                                          <li><a class="dropdown-item" href="#"
                                              onclick="editLTLRateList('<%= forwarder.id %>')">LTL Rate List</a></li>
                                          <li><a class="dropdown-item" href="#"
                                              onclick="editLTLZoneMapping('<%= forwarder.id %>')">LTL Zone Mapping</a>
                                          </li>
                                          <li><a class="dropdown-item" href="#"
                                              onclick="editLTLTAT('<%= forwarder.id %>')">LTL TAT</a></li>
                                          <% } else if (forwarder.courier_type &&
                                            forwarder.courier_type.toLowerCase()==='express' ) { %>
                                            <li>
                                              <hr class="dropdown-divider">
                                            </li>
                                            <li><a class="dropdown-item" href="#"
                                                onclick="editExpressRateList('<%= forwarder.id %>')">Express Rate
                                                List</a></li>
                                            <% } %>
                                      </ul>
                                    </div>
                                    <button class="btn btn-sm" onclick="deleteForwarder('<%= forwarder.id %>')">
                                      <i class="fas fa-trash" style="color:rgb(255, 159, 159)"></i>
                                    </button>
                                  </div>
                                </td>
                              </tr>
                              <% }) %>
                                <% } else { %>
                                  <tr>
                                    <td colspan="7" class="text-center">
                                      <div class="py-4">
                                        <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                                        <p class="mb-0 text-muted">No forwarders found.</p>
                                        <small class="text-muted">Debug: <%= typeof result %> | Length: <%= result ?
                                              result.length : 'undefined' %></small>
                                      </div>
                                    </td>
                                  </tr>
                                  <% } %>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
        <!-- body part end  -->
      </div>
    </main>


    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
      aria-hidden="true">
      <div class="modal-dialog modal-xl" role="document" style="max-width: 1450px;">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="exampleModalLabel">Add New</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body" style="max-height: 70vh; overflow-y: auto;">

            <!-- Add your page-specific content here -->
            <div class="">
              <div class="card p-4">
                <h2 class="text-primary mb-4"><i class="fas fa-truck"></i> Courier Onboarding</h2>


                <!-- Radio Buttons -->
                <form id="basicForm">
                  <!-- Step 1: Choose API -->
                  <div class="row">
                    <div class="col-md-4">
                      <div class="mb-2 fw-bold">Step 1: Choose Segment</div>
                      <div class="d-flex align-items-center flex-wrap gap-3 my-3">
                        <div class="form-check form-check-inline">
                          <input class="form-check-input" type="radio" name="chooseAPi" id="standardService"
                            value="standard" onchange="checkAndShowZoneMapping()">
                          <label class="form-check-label" for="standardService">Express</label>
                        </div>
                        <div class="form-check form-check-inline">
                          <input class="form-check-input" type="radio" name="chooseAPi" id="ecomService" value="ecom">
                          <label class="form-check-label" for="ecomService">E-com</label>
                        </div>
                        <div class="form-check form-check-inline">
                          <input class="form-check-input" type="radio" name="chooseAPi" id="ltlService" value="ltl">
                          <label class="form-check-label" for="ltlService">Heavy Shipment</label>
                        </div>
                      </div>
                    </div>

                    <!-- Step 2: Select Business Volume -->
                    <div class="col-md-4">
                      <div class="mb-2 fw-bold">Step 2: Select Business Volume</div>
                      <div class="form-group mb-2" id="group-business-volume" style="display:none;">
                        <label for="businessVolume" class="required-field">Business Volume</label>
                        <select class="form-select form-control" id="businessVolume" name="plan_id" required disabled>
                          <option value="">Select Volume</option>
                          <% plans.forEach(plan=> { %>
                            <option value="<%= plan.id %>">
                              <%= plan.name %>
                                (
                                <% if (plan.min_volume && plan.max_volume) { %>
                                  <%= (plan.min_volume / 1000).toFixed(1) %>k - <%= (plan.max_volume / 1000).toFixed(1)
                                      %>k /Month
                                      <% } else if (plan.min_volume && !plan.max_volume) { %>
                                        <%= (plan.min_volume / 100000).toFixed(1) %>L+ /Month
                                          <% } %>
                                            )
                            </option>
                            <% }); %>
                        </select>
                      </div>
                      <div class="form-group mb-2" id="group-monthly-parcels" style="display:none;">
                        <label for="stepMonthlyParcels" class="required-field">No. of Shipment Per Month</label>
                        <select id="stepMonthlyParcels" name="monthly_parcels" class="form-select form-control" required
                          disabled>
                          <option value="">Select shipment</option>
                          <option value="1">0 - 500 Shipment</option>
                          <option value="2">500 - 1000 Shipment</option>
                          <option value="3">1000 - 1500 Shipment</option>
                          <option value="4">1500 - 2000 Shipment</option>
                          <option value="5">2000 - 2500 Shipment</option>
                          <option value="6">2500 - 3000 Shipment</option>
                          <option value="7">3000 - 3500 Shipment</option>
                          <option value="8">3500 - 4000 Shipment</option>
                          <option value="9">4000 Above</option>
                        </select>
                      </div>
                    </div>

                    <!-- Step 3: Select Courier and Shipment Type (side by side) -->
                    <div class="col-md-4">
                      <div class="mb-2 fw-bold">Step 3: Select Courier and Shipment Type</div>
                      <div class="row g-3">
                        <div class="col-md-6">
                          <div class="form-group mb-0">
                            <label for="courierSelect" class="form-label">Courier</label>
                            <select class="form-select form-control" id="courierSelect"
                              onchange="console.log('Courier changed to:', this.value); updateServiceTabs();">
                              <option disabled selected>Select courier</option>
                              <option value="dtdc">DTDC</option>
                              <option value="delhivery">Delhivery</option>
                              <option value="xpressbees">Xpressbees</option>
                              <option value="bluedart">Blue Dart</option>
                              <option value="gati">Gati</option>
                              <option value="dpworld">DP World</option>
                              <option value="safeexpress">Safe Express</option>
                              <option value="shadowfax">Shadow Fax</option>
                            </select>
                          </div>
                        </div>
                        <div class="col-md-6">
                          <div class="form-group mb-0">
                            <label for="shipmentType" class="form-label">Shipment Type</label>
                            <select class="form-select form-control" id="shipmentType" name="shipmentType">
                              <option value="NON-Document">NON-Document</option>
                              <option value="Document">Document</option>
                            </select>
                          </div>
                        </div>
                        <!-- Delhivery API Variant -->
                        <div class="col-md-12" id="delhiveryVariantContainer" style="display: none;">
                          <div class="form-group mb-0">
                            <label for="delhiveryVariantSelect" class="form-label">API Variant</label>
                            <select class="form-select form-control" id="delhiveryVariantSelect"
                              name="delhiveryApiVariant">
                              <option value="1">DELHIVERY DISPATCH</option>
                              <option value="2">DELHIVERY QUICKNFLY</option>
                            </select>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div class=" flex-row gap-4 mb-4" id="basicDetails" style="display: none !important;">
                    <!-- Basic Details -->
                    <div class="flex-fill d-flex flex-column p-3" style="min-width: 340px;">
                      <h5 class="mb-3 fw-bold border-bottom pb-2">Basic Details</h5>
                      <div class="row g-3">
                        <div class="col-12 col-md-6">
                          <label for="companyAddress" class="form-label">Address</label>
                          <input id="companyAddress" name="companyAddress" class="form-control" required="">
                        </div>
                        <div class="col-12 col-md-6">
                          <label for="companyCountry" class="form-label">Country</label>
                          <input id="companyCountry" type="text" name="companyCountry" class="form-control"
                            placeholder="Enter the country" pattern="[A-Za-z ]+"
                            title="Only letters and spaces are allowed"
                            oninput="this.value = this.value.replace(/[^A-Za-z ]/g, '')" required="">
                        </div>
                        <div class="col-12 col-md-6">
                          <label for="companyState" class="form-label">State</label>
                          <input id="companyState" name="companyState" class="form-control"
                            placeholder="Enter the state" pattern="[A-Za-z ]+"
                            title="Only letters and spaces are allowed"
                            oninput="this.value = this.value.replace(/[^A-Za-z ]/g, '')" required="">
                        </div>
                        <div class="col-12 col-md-6">
                          <label for="companyDistrict" class="form-label">City</label>
                          <input id="companyDistrict" name="companyDistrict" class="form-control"
                            placeholder="Enter the city" pattern="[A-Za-z ]+"
                            title="Only letters and spaces are allowed"
                            oninput="this.value = this.value.replace(/[^A-Za-z ]/g, '')" required="">
                        </div>

                        <div class="col-12 col-md-6">
                          <label for="fromDate" class="form-label">Contract From</label>
                          <input class="form-control" type="date" id="fromDate" name="fromDate">
                        </div>
                        <div class="col-12 col-md-6">
                          <label for="fromTo" class="form-label">Contract To</label>
                          <input class="form-control" type="date" id="fromTo" name="fromTo">
                        </div>
                        <div class="col-12 col-md-6">
                          <label for="creditTerms" class="form-label">Credit Terms</label>
                          <select id="creditTerms" name="creditTerms" class="form-select form-control">
                            <option value="15">15 Days</option>
                            <option value="30">30 Days</option>
                          </select>
                        </div>
                        <div class="col-12 col-md-6">
                          <label for="vat" class="form-label">VAT/TIN No.</label>
                          <input id="vat" name="vat" type="text" class="form-control" required="">
                        </div>
                        <div class="col-12 col-md-6">
                          <label for="company_uin" class="form-label">Company UIN</label>
                          <input id="company_uin" name="company_uin" type="text" class="form-control" required="">
                        </div>
                      </div>
                    </div>
                    <!-- Courier KYC Details -->
                    <div class="flex-fill d-flex flex-column p-3  " style="min-width: 340px;">
                      <h5 class="mb-3 fw-bold border-bottom pb-2">Courier KYC Details</h5>
                      <div class="row g-3">
                        <div class="col-12 col-md-6">
                          <label for="company_pan" class="form-label">PAN Card</label>
                          <input id="company_pan" name="company_pan" type="text" class="form-control" required="">
                        </div>
                        <div class="col-12 col-md-6">
                          <label for="gstNo" class="form-label">GST No.</label>
                          <input id="gstNo" name="gstNo" type="text" class="form-control" required="">
                        </div>
                        <div class="col-12 col-md-6">
                          <label for="Bank_account_name" class="form-label">Bank Account Name</label>
                          <input id="Bank_account_name" name="Bank_account_name" type="text" class="form-control"
                            required="">
                        </div>
                        <div class="col-12 col-md-6">
                          <label for="billingCycle" class="form-label">Billing Cycle</label>
                          <select id="billingCycle" name="billingCycle" class="form-select form-control">
                            <option value="weekly">Weekly</option>
                            <option value="fortnight">Fortnight</option>
                            <option value="monthly">Monthly</option>
                          </select>
                        </div>
                        <div class="col-12 col-md-6">
                          <label for="accountNumber" class="form-label">Account Number</label>
                          <input id="accountNumber" name="accountNumber" type="text" class="form-control" required="">
                        </div>
                        <div class="col-12 col-md-6">
                          <label for="account_type" class="form-label">Account Type</label>
                          <select id="account_type" name="account_type" class="form-select form-control">
                            <option value="savings">Savings</option>
                            <option value="current">Current</option>
                          </select>
                        </div>
                        <div class="col-12 col-md-6">
                          <label for="chooseBank" class="form-label">Bank Name</label>
                          <select id="chooseBank" name="chooseBank" class="form-select form-control ">
                            <option value="State Bank Of India">State Bank Of India</option>
                            <option value="Kotak Mahindra Bank">Kotak Mahindra Bank</option>
                            <option value="HDFC Bank LTD">HDFC Bank LTD</option>
                          </select>
                        </div>
                        <div class="col-12 col-md-6">
                          <label for="ifscCode" class="form-label">IFSC Code</label>
                          <input id="ifscCode" name="ifscCode" type="text" class="form-control" required="">
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="mb-4" id="zoneMappingFileExpress" style="display: none;">
                    <div class="row">
                      <!-- Column 1: Upload Section -->
                      <div class="col-sm-4">
                        <label for="zoneMappingFile" class="form-label fw-bold">Upload Zone Mapping Data
                          (Excel/CSV)</label>
                        <input type="file" class="form-control mb-1" id="zoneMappingFile" name="zoneMappingFile"
                          accept=".xlsx,.xls,.csv">
                        <div class="form-text">Upload an Excel or CSV file containing zone mapping information (Zone,
                          City,
                          State).</div>
                      </div>

                      <!-- Column 2: Preview Section -->
                      <div class="col-sm-4">
                        <label class="form-label fw-bold mb-2">Zone Mapping Preview</label>
                        <div id="zoneMappingPreviewExpress" class="card"
                          style="min-height: 100px; max-height: 220px; overflow-x: auto; overflow-y: auto;">
                          <span class="text-muted">Zone mapping preview will appear here after upload.</span>
                        </div>
                      </div>

                      <!-- Column 3: Download Section -->
                      <div class="col-sm-4">
                        <label class="form-label fw-bold mb-2">Download</label>
                        <a href="/assets/template/zone_mapping.xlsx" class="btn btn-outline-primary mb-2 w-100"
                          download>
                          <i class="fas fa-download me-2"></i>Download Sample File
                        </a>
                      </div>
                    </div>
                  </div>
                </form>



                <div id="standardSection">
                  <div id="courierTabs">
                    <!-- Main Navigation -->
                    <div class="card-header pl-0 pr-0">
                      <ul class="nav nav-tabs card-header-tabs ml-0 mr-0" role="tablist">
                        <li class="nav-item w-10 text-start">
                          <a class="nav-link active" id="first-tab_" data-toggle="tab" href="#firstFull" role="tab"
                            aria-controls="first" aria-selected="true">Air Services</a>
                        </li>
                        <li class="nav-item w-10 text-start">
                          <a class="nav-link" id="second-tab_" data-toggle="tab" href="#secondFull" role="tab"
                            aria-controls="second" aria-selected="false">Surface Services</a>
                        </li>
                      </ul>
                    </div>

                    <!-- Tab Content -->
                    <div class="tab-content" id="mainTabsContent">
                      <div class="tab-pane fade show active" id="firstFull">
                        <!-- DTDC Services -->
                        <div id="dtdcTabsStd" style="display: none;">
                          <div class="sub-nav-container mb-4 d-flex flex-wrap gap-3">

                            <!-- Air Tabs -->
                            <ul id="air" class="nav nav-pills nav-fill sub-nav-tabs d-flex flex-wrap gap-2">
                              <li class="nav-item" id="priority-nav-item">
                                <button class="nav-link" data-bs-toggle="tab"
                                  data-bs-target="#priority">Priority</button>
                              </li>
                              <li class="nav-item" id="premium-nav-item">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#premium">Premium</button>
                              </li>
                              <li class="nav-item" id="std-exp-a-nav-item">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#std-exp-a">STD
                                  EXP-A</button>
                              </li>
                            </ul>

                          </div>
                        </div>

                        <!-- Delhivery Services -->
                        <div id="delhiveryTabs" style="display: none;">
                          <div class="sub-nav-container mb-4">
                            <ul class="nav nav-pills nav-fill sub-nav-tabs">
                              <li class="nav-item">
                                <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#express">
                                  <i class="fas fa-shipping-fast me-1"></i>Express
                                </button>
                              </li>
                            </ul>
                          </div>
                        </div>

                        <!-- Xpressbees Services -->
                        <div id="xpressbeesTabs" style="display: none;">
                          <div class="sub-nav-container mb-4">
                            <ul class="nav nav-pills nav-fill sub-nav-tabs">
                              <li class="nav-item">
                                <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#standard-express">
                                  <i class="fas fa-box me-1"></i>Standard/Expressbees
                                </button>
                              </li>
                            </ul>
                          </div>
                        </div>
                      </div>

                      <div class="tab-pane fade" id="surface">
                        <!-- Surface Services -->
                        <div id="dtdcSurfaceTabs" style="display: none;">
                          <div class="sub-nav-container mb-4 d-flex flex-wrap gap-3">
                            <!-- Surface Tabs -->
                            <ul id="surface-tabs" class="nav nav-pills nav-fill sub-nav-tabs d-flex flex-wrap gap-2">
                              <li class="nav-item" id="ground-express-nav-item">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#ground-express">Ground
                                  Express/Standard</button>
                              </li>
                            </ul>
                          </div>
                        </div>
                      </div>
                    </div>

                    <!-- Service Content -->
                    <div class="tab-content" id="slabTabContentHeader">



                      <div class="tab-pane fade" id="std-exp-a">
                        <form id="std-exp-a-form">
                          <div class="service-header">
                            <h5 class="text-primary mb-3"><i class="fas fa-bolt me-2"></i>STD EXP-A</h5>
                            <div class="service-info p-3 mb-4">
                              <div class="mb-3 d-flex align-items-center flex-wrap justify-content-between">
                                <button type="button" class="btn btn-outline-success btn-sm addAdditionalChargeBtn me-3"
                                  data-target="additionalChargesContainer-std-exp-a"
                                  style="min-width: 180px; max-width: 233px; width: 100%; flex-shrink: 0;">
                                  <i class="fas fa-plus me-1"></i>Add New Additional Charges
                                </button>
                                <div class="form-group mb-0 ms-2" style="background-color: #ecf1ff; min-width: 280px;">
                                  <label for="volumetric_safety_factor-std-exp-a"
                                    class="form-label mb-0 me-2">Volumetric
                                    Safety Factor</label>
                                  <input type="input" class="form-control d-inline-block w-auto"
                                    name="volumetric_safety_factor-std-exp-a" id="volumetric_safety_factor-std-exp-a"
                                    style="width: 120px; display: inline-block;" />
                                </div>
                              </div>
                              <div id="additionalChargesContainer-std-exp-a"></div>
                            </div>
                          </div>

                          <div class="container">
                            <h4 class="mb-4">Slab Configuration</h4>

                            <!-- Slab Navigation (empty by default) -->
                            <ul class="nav nav-tabs mb-3" id="slabTabs-std-exp-a" role="tablist"></ul>
                            <div class="text-end mb-3">
                              <button onclick="openSlabModal('std-exp-a')" class="btn btn-primary" type="button">Add New
                                Rate Table</button>
                            </div>
                            <!-- Slab Content (empty by default) -->
                            <div class="tab-content" id="slabTabContent-std-exp-a"></div>
                            <!-- Hidden template for cloning -->
                            <div id="rateTable-std-exp-a" class="d-none">
                              <div class="table-card mb-4 border rounded p-3 bg-white shadow-sm">
                                <div class="table-responsive">
                                  <table class="table table-hover border">
                                    <thead class="bg-primary text-white">
                                      <tr>
                                        <th class="border-end bg-light">Category</th>
                                        <th class="border-end bg-light">Within NCR</th>
                                        <th class="border-end bg-light">Within City</th>
                                        <th class="border-end bg-light">Within State</th>
                                        <th class="border-end bg-light">Within Zone</th>
                                        <th class="border-end bg-light">Within Metro</th>
                                        <th class="border-end bg-light">Within Special Zone</th>
                                        <th class="border-end bg-light">ROI</th>
                                      </tr>
                                    </thead>
                                    <tbody>
                                      <tr>
                                        <td class="fw-bold border-end text-start">[RANGE]</td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                      </tr>
                                      <tr>
                                        <td class="fw-bold border-end text-start">
                                          <div class="d-flex align-items-center">
                                            <span class="me-2">Every Add. Upto</span>
                                            <input type="number" class="form-control form-control-sm d-inline me-2"
                                              style="width: 80px;" placeholder="500">
                                            <select class="form-select form-select-sm d-inline w-auto"
                                              style="width: 60px;">
                                              <option value="gm">Gms</option>
                                              <option value="kg">Kgs</option>
                                            </select>
                                          </div>
                                        </td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                      </tr>

                                      <tr>
                                        <td class="fw-bold border-end text-start">TAT</td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </div>
                              </div>

                            </div>
                          </div>
                        </form>

                      </div>



                      <!-- Priority -->

                      <div class="tab-pane fade" id="priority">
                        <form id="priority-form">
                          <div class="service-header">
                            <h5 class="text-primary mb-3"><i class="fas fa-star me-2"></i>Priority</h5>
                            <div class="service-info p-3 mb-4">
                              <div class="mb-3 d-flex align-items-center flex-wrap justify-content-between">
                                <button type="button" class="btn btn-outline-success btn-sm addAdditionalChargeBtn me-3"
                                  data-target="additionalChargesContainer-priority"
                                  style="min-width: 180px; max-width: 233px; width: 100%; flex-shrink: 0;">
                                  <i class="fas fa-plus me-1"></i>Add New Additional Charges
                                </button>
                                <div class="form-group mb-0 ms-2" style="background-color: #ecf1ff; min-width: 280px;">
                                  <label for="volumetric_safety_factor-priority" class="form-label mb-0 me-2">Volumetric
                                    Safety Factor</label>
                                  <input type="input" class="form-control d-inline-block w-auto"
                                    name="volumetric_safety_factor-priority" id="volumetric_safety_factor-priority"
                                    style="width: 120px; display: inline-block;" />
                                </div>
                              </div>
                              <div id="additionalChargesContainer-priority"></div>
                            </div>
                          </div>
                          <div class="container">
                            <h4 class="mb-4">Slab Configuration</h4>
                            <!-- Slab Navigation (empty by default) -->
                            <ul class="nav nav-tabs mb-3" id="slabTabs-priority" role="tablist"></ul>
                            <div class="text-end mb-3">
                              <button onclick="openSlabModal('priority')" class="btn btn-primary" type="button">Add New
                                Rate
                                Table</button>
                            </div>
                            <!-- Slab Content (empty by default) -->
                            <div class="tab-content" id="slabTabContent-priority"></div>
                            <!-- Hidden template for cloning -->
                            <div id="rateTable-priority" class="d-none">
                              <div class="table-card mb-4 border rounded p-3 bg-white shadow-sm">
                                <div class="table-responsive">
                                  <table class="table table-hover border">
                                    <thead class="bg-primary text-white">
                                      <tr>
                                        <th class="border-end bg-light">Category</th>
                                        <th class="border-end bg-light">Within NCR</th>
                                        <th class="border-end bg-light">Within City</th>
                                        <th class="border-end bg-light">Within State</th>
                                        <th class="border-end bg-light">Within Zone</th>
                                        <th class="border-end bg-light">Within Metro</th>

                                        <th class="border-end bg-light">Within Special Zone</th>
                                        <th class="border-end bg-light">ROI</th>
                                      </tr>
                                    </thead>
                                    <tbody>
                                      <tr>
                                        <td class="fw-bold border-end text-start">[RANGE]</td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                      </tr>
                                      <tr>
                                        <td class="fw-bold border-end text-start">
                                          <div class="d-flex align-items-center">
                                            <span class="me-2">Every Add. Upto</span>
                                            <input type="number" class="form-control form-control-sm d-inline me-2"
                                              style="width: 80px;" placeholder="500">
                                            <select class="form-select form-select-sm d-inline w-auto"
                                              style="width: 60px;">
                                              <option value="gm">Gms</option>
                                              <option value="kg">Kgs</option>
                                            </select>
                                          </div>
                                        </td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                      </tr>

                                      <tr>
                                        <td class="fw-bold border-end text-start">TAT</td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </div>
                              </div>
                            </div>
                          </div>
                        </form>


                      </div>

                      <!-- Ground Express -->
                      <div class="tab-pane fade" id="ground-express">
                        <form id="ground-express-form">
                          <div class="service-header">
                            <h5 class="text-primary mb-3"><i class="fas fa-truck-fast me-2"></i>Ground Express
                            </h5>
                            <div class="service-info p-3 mb-4">
                              <div class="mb-3 d-flex align-items-center flex-wrap justify-content-between">
                                <button type="button" class="btn btn-outline-success btn-sm addAdditionalChargeBtn me-3"
                                  data-target="additionalChargesContainer-ground-express"
                                  style="min-width: 180px; max-width: 233px; width: 100%; flex-shrink: 0;">
                                  <i class="fas fa-plus me-1"></i>Add New Additional Charges
                                </button>
                                <div class="form-group mb-0 ms-2" style="background-color: #ecf1ff; min-width: 280px;">
                                  <label for="volumetric_safety_factor-ground-express"
                                    class="form-label mb-0 me-2">Volumetric
                                    Safety Factor</label>
                                  <input type="input" class="form-control d-inline-block w-auto"
                                    name="volumetric_safety_factor-ground-express"
                                    id="volumetric_safety_factor-ground-express"
                                    style="width: 120px; display: inline-block;" />
                                </div>
                              </div>
                              <div id="additionalChargesContainer-ground-express"></div>
                            </div>
                          </div>
                          <div class="container">
                            <h4 class="mb-4">Slab Configuration</h4>
                            <!-- Slab Navigation (empty by default) -->
                            <ul class="nav nav-tabs mb-3" id="slabTabs-ground-express" role="tablist"></ul>
                            <div class="text-end mb-3">
                              <button onclick="openSlabModal('ground-express')" class="btn btn-primary"
                                type="button">Add
                                New Rate Table</button>
                            </div>
                            <!-- Slab Content (empty by default) -->
                            <div class="tab-content" id="slabTabContent-ground-express"></div>
                            <!-- Hidden template for cloning -->
                            <div id="rateTable-ground-express" class="d-none">
                              <div class="table-card mb-4 border rounded p-3 bg-white shadow-sm">
                                <div class="table-responsive">
                                  <table class="table table-hover border">
                                    <thead class="bg-primary text-white">
                                      <tr>
                                        <th class="border-end bg-light">Category</th>
                                        <th class="border-end bg-light">Within NCR</th>
                                        <th class="border-end bg-light">Within City</th>
                                        <th class="border-end bg-light">Within State</th>
                                        <th class="border-end bg-light">Within Zone</th>
                                        <th class="border-end bg-light">Within Metro</th>

                                        <th class="border-end bg-light">Within Special Zone</th>
                                        <th class="border-end bg-light">ROI</th>
                                      </tr>
                                    </thead>
                                    <tbody>
                                      <tr>
                                        <td class="fw-bold border-end text-start">[RANGE]</td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                      </tr>
                                      <tr>
                                        <td class="fw-bold border-end text-start">
                                          <div class="d-flex align-items-center">
                                            <span class="me-2">Every Additional</span>
                                            <input type="number"
                                              class="form-control form-control-sm d-inline w-auto me-2"
                                              style="width: 80px;" placeholder="500">
                                            <select class="form-select form-select-sm d-inline w-auto"
                                              style="width: 60px;">
                                              <option value="gm">Gms</option>
                                              <option value="kg">Kgs</option>
                                            </select>
                                          </div>
                                        </td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                      </tr>

                                      <tr>
                                        <td class="fw-bold border-end text-start">TAT</td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </div>
                              </div>
                            </div>
                          </div>
                        </form>


                      </div>

                      <!-- Premium -->
                      <div class="tab-pane fade" id="premium">
                        <form id="premium-form">


                          <div class="service-header">
                            <h5 class="text-primary mb-3"><i class="fas fa-crown me-2"></i>Premium</h5>
                            <div class="service-info p-3 mb-4">
                              <div class="mb-3 d-flex align-items-center flex-wrap justify-content-between">
                                <button type="button" class="btn btn-outline-success btn-sm addAdditionalChargeBtn me-3"
                                  data-target="additionalChargesContainer-b2c-premium"
                                  style="min-width: 180px; max-width: 233px; width: 100%; flex-shrink: 0;">
                                  <i class="fas fa-plus me-1"></i>Add New Additional Charges
                                </button>
                                <div class="form-group mb-0 ms-2" style="background-color: #ecf1ff; min-width: 280px;">
                                  <label for="volumetric_safety_factor-b2c-premium"
                                    class="form-label mb-0 me-2">Volumetric
                                    Safety Factor</label>
                                  <input type="input" class="form-control d-inline-block w-auto"
                                    name="volumetric_safety_factor-b2c-premium"
                                    id="volumetric_safety_factor-b2c-premium"
                                    style="width: 120px; display: inline-block;" />
                                </div>
                              </div>
                              <div id="additionalChargesContainer-b2c-premium"></div>
                            </div>
                          </div>
                          <div class="container">
                            <h4 class="mb-4">Slab Configuration</h4>
                            <!-- Slab Navigation (empty by default) -->
                            <ul class="nav nav-tabs mb-3" id="slabTabs-premium" role="tablist"></ul>
                            <div class="text-end mb-3">
                              <button onclick="openSlabModal('premium')" class="btn btn-primary" type="button">Add
                                New Rate
                                Table</button>
                            </div>
                            <!-- Slab Content (empty by default) -->
                            <div class="tab-content" id="slabTabContent-premium"></div>
                            <!-- Hidden template for cloning -->
                            <div id="rateTable-premium" class="d-none">
                              <div class="table-card mb-4 border rounded p-3 bg-white shadow-sm">
                                <div class="table-responsive">
                                  <table class="table table-hover border">
                                    <thead class="bg-primary text-white">
                                      <tr>
                                        <th class="border-end bg-light">Category</th>
                                        <th class="border-end bg-light">Within NCR</th>
                                        <th class="border-end bg-light">Within City</th>
                                        <th class="border-end bg-light">Within State</th>
                                        <th class="border-end bg-light">Within Zone</th>
                                        <th class="border-end bg-light">Within Metro</th>

                                        <th class="border-end bg-light">Within Special Zone</th>
                                        <th class="border-end bg-light">ROI</th>
                                      </tr>
                                    </thead>
                                    <tbody>
                                      <tr>
                                        <td class="fw-bold border-end text-start">[RANGE]</td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                      </tr>
                                      <tr>
                                        <td class="fw-bold border-end text-start">
                                          <div class="d-flex align-items-center">
                                            <span class="me-2">Every Additional</span>
                                            <input type="number"
                                              class="form-control form-control-sm d-inline w-auto me-2"
                                              style="width: 80px;" placeholder="500">
                                            <select class="form-select form-select-sm d-inline w-auto"
                                              style="width: 60px;">
                                              <option value="gm">Gms</option>
                                              <option value="kg">Kgs</option>
                                            </select>
                                          </div>
                                        </td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                      </tr>

                                      <tr>
                                        <td class="fw-bold border-end text-start">TAT</td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </div>
                              </div>
                            </div>
                          </div>
                        </form>
                      </div>





                      <!-- Delhivery Express slab configuration -->
                      <div class="tab-pane fade " id="express">
                        <form id="express-form" enctype="multipart/form-data">
                          <div class="service-header">
                            <h5 class="text-primary mb-3"><i class="fas fa-shipping-fast me-2"></i>Delhivery
                              Express</h5>
                            <div class="service-info p-3 mb-4">
                              <div class="mb-3 d-flex align-items-center flex-wrap justify-content-between">
                                <button type="button" class="btn btn-outline-success btn-sm addAdditionalChargeBtn me-3"
                                  data-target="additionalChargesContainer-express"
                                  style="min-width: 180px; max-width: 233px; width: 100%; flex-shrink: 0;">
                                  <i class="fas fa-plus me-1"></i>Add New Additional Charges
                                </button>
                                <div class="form-group mb-0 ms-2" style="background-color: #ecf1ff; min-width: 280px;">
                                  <label for="volumetric_safety_factor-express" class="form-label mb-0 me-2">Volumetric
                                    Safety Factor</label>
                                  <input type="input" class="form-control d-inline-block w-auto"
                                    name="volumetric_safety_factor-express" id="volumetric_safety_factor-express"
                                    style="width: 120px; display: inline-block;" />
                                </div>
                              </div>
                              <div id="additionalChargesContainer-express"></div>
                            </div>
                          </div>
                          <div class="container">
                            <h4 class="mb-4">Slab Configuration</h4>
                            <!-- Slab Navigation (empty by default) -->
                            <ul class="nav nav-tabs mb-3" id="slabTabs-express" role="tablist"></ul>
                            <div class="text-end mb-3">
                              <button onclick="openSlabModal('express')" class="btn btn-primary" type="button">Add
                                New Rate
                                Table</button>
                            </div>
                            <!-- Slab Content (empty by default) -->
                            <div class="tab-content" id="slabTabContent-express"></div>
                            <!-- Hidden template for cloning -->
                            <div id="rateTable-express" class="d-none">
                              <div class="table-card mb-4 border rounded p-3 bg-white shadow-sm">
                                <div class="table-responsive">
                                  <table class="table table-hover border">
                                    <thead class="bg-primary text-white">
                                      <tr>
                                        <th class="border-end bg-light">Category</th>
                                        <th class="border-end bg-light">Within NCR</th>
                                        <th class="border-end bg-light">Within City</th>
                                        <th class="border-end bg-light">Within State</th>
                                        <th class="border-end bg-light">Within Zone</th>
                                        <th class="border-end bg-light">Within Metro</th>

                                        <th class="border-end bg-light">Within Special Zone</th>
                                        <th class="border-end bg-light">ROI</th>
                                      </tr>
                                    </thead>
                                    <tbody>
                                      <tr>
                                        <td class="fw-bold border-end text-start">[RANGE]</td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                      </tr>
                                      <tr>
                                        <td class="fw-bold border-end text-start">
                                          <div class="d-flex align-items-center">
                                            <span class="me-2">Every Add. Upto</span>
                                            <input type="number" class="form-control form-control-sm d-inline me-2"
                                              style="width: 80px;" placeholder="500">
                                            <select class="form-select form-select-sm d-inline w-auto"
                                              style="width: 60px;">
                                              <option value="gm">Gms</option>
                                              <option value="kg">Kgs</option>
                                            </select>
                                          </div>
                                        </td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                      </tr>

                                      <tr>
                                        <td class="fw-bold border-end text-start">TAT</td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </div>
                              </div>
                            </div>
                          </div>
                        </form>

                      </div>

                      <!-- Xpressbees Standard/Expressbees slab configuration -->
                      <div class="tab-pane fade" id="standard-express">
                        <form id="standard-express-form" enctype="multipart/form-data">
                          <div class="service-header">
                            <h5 class="text-primary mb-3"><i class="fas fa-box me-2"></i>Xpressbees
                              Standard/Expressbees
                            </h5>
                            <div class="service-info p-3 mb-4">
                              <div class="mb-3 d-flex align-items-center flex-wrap justify-content-between">
                                <button type="button" class="btn btn-outline-success btn-sm addAdditionalChargeBtn me-3"
                                  data-target="additionalChargesContainer-standard-expressbees"
                                  style="min-width: 180px; max-width: 233px; width: 100%; flex-shrink: 0;">
                                  <i class="fas fa-plus me-1"></i>Add New Additional Charges
                                </button>
                                <div class="form-group mb-0 ms-2" style="background-color: #ecf1ff; min-width: 280px;">
                                  <label for="volumetric_safety_factor-xpressbees"
                                    class="form-label mb-0 me-2">Volumetric
                                    Safety Factor</label>
                                  <input type="input" class="form-control d-inline-block w-auto"
                                    name="volumetric_safety_factor-xpressbees" id="volumetric_safety_factor-xpressbees"
                                    style="width: 120px; display: inline-block;" />
                                </div>
                              </div>
                              <div id="additionalChargesContainer-standard-expressbees"></div>
                            </div>
                          </div>
                          <div class="container">
                            <h4 class="mb-4">Slab Configuration</h4>
                            <!-- Slab Navigation (empty by default) -->
                            <ul class="nav nav-tabs mb-3" id="slabTabs-standard-express" role="tablist"></ul>
                            <div class="text-end mb-3">
                              <button onclick="openSlabModal('standard-express')" class="btn btn-primary"
                                type="button">Add
                                New Rate Table</button>
                            </div>
                            <!-- Slab Content (empty by default) -->
                            <div class="tab-content" id="slabTabContent-standard-express"></div>
                            <!-- Hidden template for cloning -->
                            <div id="rateTable-standard-express" class="d-none">
                              <div class="table-card mb-4 border rounded p-3 bg-white shadow-sm">
                                <div class="table-responsive">
                                  <table class="table table-hover border">
                                    <thead class="bg-primary text-white">
                                      <tr>
                                        <th class="border-end bg-light">Category</th>
                                        <th class="border-end bg-light">Within NCR</th>
                                        <th class="border-end bg-light">Within City</th>
                                        <th class="border-end bg-light">Within State</th>
                                        <th class="border-end bg-light">Within Zone</th>
                                        <th class="border-end bg-light">Within Metro</th>

                                        <th class="border-end bg-light">Within Special Zone</th>
                                        <th class="border-end bg-light">ROI</th>
                                      </tr>
                                    </thead>
                                    <tbody>
                                      <tr>
                                        <td class="fw-bold border-end text-start">[RANGE]</td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                      </tr>
                                      <tr>
                                        <td class="fw-bold border-end text-start">
                                          <div class="d-flex align-items-center">
                                            <span class="me-2">Every Add. Upto</span>
                                            <input type="number" class="form-control form-control-sm d-inline me-2"
                                              style="width: 80px;" placeholder="500">
                                            <select class="form-select form-select-sm d-inline w-auto"
                                              style="width: 60px;">
                                              <option value="gm">Gms</option>
                                              <option value="kg">Kgs</option>
                                            </select>
                                          </div>
                                        </td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                      </tr>

                                      <tr>
                                        <td class="fw-bold border-end text-start">TAT</td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                        <td><input type="text" class="form-control form-control-sm"></td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </div>
                              </div>
                            </div>
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>
                  <div class="save-button-container text-end mb-3">
                    <button class="btn btn-primary save-button" id="save-button-express" style="display: none;"
                      type="button">Save</button>
                  </div>
                </div>



                <!-- LTL Section -->

                <div id="ltlSection" style="display: none;">
                  <h5 class="text-dark my-4 fw-bold">LTL Services</h5>

                  <!-- LTL Courier Tabs -->
                  <div class="sub-nav-container mb-4">
                    <ul class="nav nav-pills nav-fill sub-nav-tabs" id="ltlCourierTabs">
                      <li class="nav-item" id="dtdc-ltl-nav-item" style="display: none;">
                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#dtdc-ltl-content">DTDC
                          LTL</button>
                      </li>
                      <li class="nav-item" id="delhivery-ltl-nav-item" style="display: none;">
                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#delhivery-ltl-content">Delhivery
                          LTL</button>
                      </li>
                    </ul>
                  </div>

                  <!-- LTL Tab Content -->
                  <div class="tab-content" id="ltlCourierTabsContent">
                    <!-- DTDC LTL Content -->
                    <div class="tab-pane fade" id="dtdc-ltl-content" role="tabpanel">
                      <form action="" id="dtdc-ltl-form" enctype="multipart/form-data">
                        <div class="service-header">
                          <h5 class="text-primary mb-3"><i class="fas fa-truck me-2"></i>DTDC LTL</h5>
                          <div class="service-info p-3 mb-4">
                            <div class="mb-3 d-flex align-items-center flex-wrap justify-content-between">
                              <button type="button" class="btn btn-outline-success btn-sm addAdditionalChargeBtn me-3"
                                data-target="additionalChargesContainer-dtdc-ltl"
                                style="min-width: 180px; max-width: 233px; width: 100%; flex-shrink: 0;">
                                <i class="fas fa-plus me-1"></i>Add New Additional Charges
                              </button>
                              <div class="form-group mb-0 ms-2" style="background-color: #ecf1ff; min-width: 280px;">
                                <label for="volumetric_safety_factor-dtdc-ltl" class="form-label mb-0 me-2">Volumetric
                                  Safety
                                  Factor</label>
                                <input type="input" class="form-control d-inline-block w-auto"
                                  name="volumetric_safety_factor-dtdc-ltl" id="volumetric_safety_factor-dtdc-ltl"
                                  style="width: 120px; display: inline-block;" />
                              </div>
                              <div class="form-group mb-0 ms-2" id="forwarder_rate_section-dtdc-ltl"
                                style="background-color: #ecf1ff; min-width: 280px;">
                                <label for="min_chargeable_weight-dtdc-ltl" class="form-label mb-0 me-2">Min.
                                  Chargeable
                                  Weight</label>
                                <input type="input" id="min_chargeable_weight-dtdc-ltl"
                                  class="form-control d-inline-block w-auto" name="min_chargeable_weight-dtdc-ltl"
                                  style="width: 120px; display: inline-block;" />
                              </div>
                            </div>
                            <div id="additionalChargesContainer-dtdc-ltl"></div>
                          </div>
                        </div>
                        <div class="container">
                          <h4 class="mb-4">Slab Configuration</h4>
                          <ul class="nav nav-tabs mb-3" id="rateTypeTabs-dtdc-ltl" role="tablist">
                            <li class="nav-item" role="presentation">
                              <button class="nav-link active" id="bulk-tab-dtdc-ltl" data-bs-toggle="tab"
                                data-bs-target="#bulk-dtdc-ltl" type="button" role="tab">
                                <i class="fa-solid fa-file-excel me-2"></i>Bulk Rate Upload
                              </button>
                            </li>
                            <li class="nav-item" role="presentation">
                              <button class="nav-link" id="zone-tab-dtdc-ltl" data-bs-toggle="tab"
                                data-bs-target="#zone-dtdc-ltl" type="button" role="tab">
                                <i class="fa-solid fa-pen-to-square me-2"></i>Zone Mapping
                              </button>
                            </li>
                          </ul>

                          <div class="tab-content" id="rateTypeContent-dtdc-ltl">
                            <!-- Bulk Upload Tab -->
                            <div class="tab-pane fade show active alert" id="bulk-dtdc-ltl" role="tabpanel"
                              style="background-color: #f0ffff;">
                              <div class="row align-items-center mb-3">
                                <div class="col-12">
                                  <div class="d-flex align-items-center mb-3">
                                    <i class="bi bi-upload me-2"></i>
                                    <h5 class="mb-0">Upload Rate and Tat</h5>
                                  </div>

                                  <div class="row align-items-center mb-2">
                                    <div class="col-md-8">
                                      <input class="form-control" type="file" id="rateExcelFile-dtdc-ltl"
                                        accept=".xlsx, .xls">
                                    </div>
                                    <div class="col-md-4 text-end">
                                      <a href="assets/template/LTL_Rate_and_Tat_Upload.xlsx"
                                        class="btn btn-outline-primary" id="downloadTemplate-dtdc-ltl">
                                        <i class="bi bi-download me-1"></i> Download Template
                                      </a>
                                    </div>
                                  </div>

                                  <small class="text-muted d-block mb-3">Please upload an Excel file with your rate
                                    matrix. The
                                    file should follow the template format.</small>

                                  <div class="mt-4" id="uploadStatus-dtdc-ltl" style="display: none;">
                                    <div class="alert alert-info">
                                      <i class="bi bi-arrow-repeat spin me-2"></i> Processing your rate excel file...
                                    </div>
                                  </div>

                                  <div class="mt-4" id="uploadSuccess-dtdc-ltl" style="display: none;">
                                    <div class="alert alert-success">
                                      <i class="bi bi-check-circle me-2"></i> Rate excel file uploaded successfully!
                                      <p class="mb-0 mt-2">Your rate matrix has been processed and saved.</p>
                                    </div>
                                  </div>

                                  <div class="mt-4" id="uploadError-dtdc-ltl" style="display: none;">
                                    <div class="alert alert-danger">
                                      <i class="bi bi-exclamation-triangle me-2"></i> Error uploading rate excel file.
                                      <p class="mb-0 mt-2" id="errorMessage-dtdc-ltl">Please check the file format and
                                        try
                                        again.</p>
                                    </div>
                                  </div>

                                  <div class="border rounded p-3">
                                    <strong><i class="bi bi-table me-2"></i>Rate & TAT Matrix Preview</strong>
                                    <div id="rateMatrixPreview-dtdc-ltl" class="table-responsive">
                                      <div class="text-center py-4">
                                        <p class="text-muted">Upload an Excel file to preview the rate matrix here.
                                        </p>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>

                            <!-- Zone Mapping Upload Tab -->
                            <div class="tab-pane fade" id="zone-dtdc-ltl" role="tabpanel"
                              style="background-color: #f0ffff;">
                              <div class="row align-items-center mb-3">
                                <div class="col-12">
                                  <div class="d-flex align-items-center mb-3">
                                    <i class="bi bi-upload me-2"></i>
                                    <h5 class="mb-0">Upload Zone Mapping</h5>
                                  </div>
                                  <div class="row align-items-center mb-2">
                                    <div class="col-md-8">
                                      <input class="form-control" type="file" id="zoneExcelFile-dtdc-ltl"
                                        accept=".xlsx, .xls">
                                    </div>
                                    <div class="col-md-4 text-end">
                                      <a href="assets/template/Zone_Mapping_Template.xlsx"
                                        class="btn btn-outline-primary" id="downloadZoneTemplate-dtdc-ltl">
                                        <i class="bi bi-download me-1"></i> Download Template
                                      </a>
                                    </div>
                                  </div>
                                  <small class="text-muted d-block mb-3">
                                    Please upload an Excel file with your zone mapping. The file should follow the
                                    template
                                    format with columns: Zone, Cities, States
                                  </small>
                                  <div class="mt-4" id="zoneUploadStatus-dtdc-ltl" style="display: none;">
                                    <div class="alert alert-info">
                                      <i class="bi bi-arrow-repeat spin me-2"></i> Processing your zone mapping
                                      file...
                                    </div>
                                  </div>
                                  <div class="mt-4" id="zoneUploadSuccess-dtdc-ltl" style="display: none;">
                                    <div class="alert alert-success">
                                      <i class="bi bi-check-circle me-2"></i> Zone mapping file uploaded successfully!
                                      <p class="mb-0 mt-2">Your zone mapping has been processed and saved.</p>
                                    </div>
                                  </div>
                                  <div class="mt-4" id="zoneUploadError-dtdc-ltl" style="display: none;">
                                    <div class="alert alert-danger">
                                      <i class="bi bi-exclamation-triangle me-2"></i> Error uploading zone mapping
                                      file.
                                      <p class="mb-0 mt-2" id="zoneErrorMessage-dtdc-ltl">Please check the file format
                                        and try
                                        again.</p>
                                    </div>
                                  </div>
                                  <div class="border rounded p-3">
                                    <strong><i class="bi bi-table me-2"></i>Zone Mapping Preview</strong>
                                    <div id="zoneMappingPreview-dtdc-ltl" class="table-responsive">
                                      <div class="text-center py-4">
                                        <p class="text-muted">Upload an Excel file to preview the zone mapping here.
                                        </p>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </form>
                    </div>

                    <!-- Delhivery LTL Content -->
                    <div class="tab-pane fade" id="delhivery-ltl-content" role="tabpanel">
                      <form action="" id="delhivery-ltl-form" enctype="multipart/form-data">
                        <div class="service-header">
                          <h5 class="text-primary mb-3"><i class="fas fa-truck me-2"></i>Delhivery LTL</h5>
                          <div class="service-info p-3 mb-4">
                            <div class="mb-3 d-flex align-items-center flex-wrap justify-content-between">
                              <button type="button" class="btn btn-outline-success btn-sm addAdditionalChargeBtn me-3"
                                data-target="additionalChargesContainer-delhivery-ltl"
                                style="min-width: 180px; max-width: 233px; width: 100%; flex-shrink: 0;">
                                <i class="fas fa-plus me-1"></i>Add New Additional Charges
                              </button>
                              <div class="form-group mb-0 ms-2" style="background-color: #ecf1ff; min-width: 280px;">
                                <label for="volumetric_safety_factor-delhivery-ltl"
                                  class="form-label mb-0 me-2">Volumetric
                                  Safety Factor</label>
                                <input type="input" class="form-control d-inline-block w-auto"
                                  name="volumetric_safety_factor-delhivery-ltl"
                                  id="volumetric_safety_factor-delhivery-ltl"
                                  style="width: 120px; display: inline-block;" />
                              </div>
                              <div class="form-group mb-0 ms-2" id="forwarder_rate_section-delhivery-ltl"
                                style="background-color: #ecf1ff; min-width: 280px;">
                                <label for="min_chargeable_weight-delhivery-ltl" class="form-label mb-0 me-2">Min.
                                  Chargeable
                                  Weight</label>
                                <input type="input" id="min_chargeable_weight-delhivery-ltl"
                                  class="form-control d-inline-block w-auto" name="min_chargeable_weight-delhivery-ltl"
                                  style="width: 120px; display: inline-block;" />
                              </div>
                            </div>
                            <div id="additionalChargesContainer-delhivery-ltl"></div>
                          </div>
                        </div>
                        <div class="container">
                          <h4 class="mb-4">Slab Configuration</h4>
                          <ul class="nav nav-tabs mb-3" id="rateTypeTabs-delhivery-ltl" role="tablist">
                            <li class="nav-item" role="presentation">
                              <button class="nav-link active" id="bulk-tab-delhivery-ltl" data-bs-toggle="tab"
                                data-bs-target="#bulk-delhivery-ltl" type="button" role="tab">
                                <i class="fa-solid fa-file-excel me-2"></i>Bulk Rate Upload
                              </button>
                            </li>
                            <li class="nav-item" role="presentation">
                              <button class="nav-link" id="zone-tab-delhivery-ltl" data-bs-toggle="tab"
                                data-bs-target="#zone-delhivery-ltl" type="button" role="tab">
                                <i class="fa-solid fa-pen-to-square me-2"></i>Zone Mapping
                              </button>
                            </li>
                          </ul>

                          <div class="tab-content" id="rateTypeContent-delhivery-ltl">
                            <!-- Bulk Upload Tab -->
                            <div class="tab-pane fade show active alert" id="bulk-delhivery-ltl" role="tabpanel"
                              style="background-color: #f0ffff;">
                              <div class="row align-items-center mb-3">
                                <div class="col-12">
                                  <div class="d-flex align-items-center mb-3">
                                    <i class="bi bi-upload me-2"></i>
                                    <h5 class="mb-0">Upload Rate and Tat</h5>
                                  </div>

                                  <div class="row align-items-center mb-2">
                                    <div class="col-md-8">
                                      <input class="form-control" type="file" id="rateExcelFile-delhivery-ltl"
                                        accept=".xlsx, .xls">
                                    </div>
                                    <div class="col-md-4 text-end">
                                      <a href="assets/template/LTL_Rate_and_Tat_Upload.xlsx"
                                        class="btn btn-outline-primary" id="downloadTemplate-delhivery-ltl">
                                        <i class="bi bi-download me-1"></i> Download Template
                                      </a>
                                    </div>
                                  </div>

                                  <small class="text-muted d-block mb-3">Please upload an Excel file with your rate
                                    matrix. The
                                    file should follow the template format.</small>

                                  <div class="mt-4" id="uploadStatus-delhivery-ltl" style="display: none;">
                                    <div class="alert alert-info">
                                      <i class="bi bi-arrow-repeat spin me-2"></i> Processing your rate excel file...
                                    </div>
                                  </div>

                                  <div class="mt-4" id="uploadSuccess-delhivery-ltl" style="display: none;">
                                    <div class="alert alert-success">
                                      <i class="bi bi-check-circle me-2"></i> Rate excel file uploaded successfully!
                                      <p class="mb-0 mt-2">Your rate matrix has been processed and saved.</p>
                                    </div>
                                  </div>

                                  <div class="mt-4" id="uploadError-delhivery-ltl" style="display: none;">
                                    <div class="alert alert-danger">
                                      <i class="bi bi-exclamation-triangle me-2"></i> Error uploading rate excel file.
                                      <p class="mb-0 mt-2" id="errorMessage-delhivery-ltl">Please check the file
                                        format and try
                                        again.</p>
                                    </div>
                                  </div>

                                  <div class="border rounded p-3">
                                    <strong><i class="bi bi-table me-2"></i>Rate & TAT Matrix Preview</strong>
                                    <div id="rateMatrixPreview-delhivery-ltl" class="table-responsive">
                                      <div class="text-center py-4">
                                        <p class="text-muted">Upload an Excel file to preview the rate matrix here.
                                        </p>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>

                            <!-- Zone Mapping Upload Tab -->
                            <div class="tab-pane fade" id="zone-delhivery-ltl" role="tabpanel"
                              style="background-color: #f0ffff;">
                              <div class="row align-items-center mb-3">
                                <div class="col-12">
                                  <div class="d-flex align-items-center mb-3">
                                    <i class="bi bi-upload me-2"></i>
                                    <h5 class="mb-0">Upload Zone Mapping</h5>
                                  </div>
                                  <div class="row align-items-center mb-2">
                                    <div class="col-md-8">
                                      <input class="form-control" type="file" id="zoneExcelFile-delhivery-ltl"
                                        accept=".xlsx, .xls">
                                    </div>
                                    <div class="col-md-4 text-end">
                                      <a href="assets/template/Zone_Mapping_Template.xlsx"
                                        class="btn btn-outline-primary" id="downloadZoneTemplate-delhivery-ltl">
                                        <i class="bi bi-download me-1"></i> Download Template
                                      </a>
                                    </div>
                                  </div>
                                  <small class="text-muted d-block mb-3">
                                    Please upload an Excel file with your zone mapping. The file should follow the
                                    template
                                    format with columns: Zone, Cities, States
                                  </small>
                                  <div class="mt-4" id="zoneUploadStatus-delhivery-ltl" style="display: none;">
                                    <div class="alert alert-info">
                                      <i class="bi bi-arrow-repeat spin me-2"></i> Processing your zone mapping
                                      file...
                                    </div>
                                  </div>
                                  <div class="mt-4" id="zoneUploadSuccess-delhivery-ltl" style="display: none;">
                                    <div class="alert alert-success">
                                      <i class="bi bi-check-circle me-2"></i> Zone mapping file uploaded successfully!
                                      <p class="mb-0 mt-2">Your zone mapping has been processed and saved.</p>
                                    </div>
                                  </div>
                                  <div class="mt-4" id="zoneUploadError-delhivery-ltl" style="display: none;">
                                    <div class="alert alert-danger">
                                      <i class="bi bi-exclamation-triangle me-2"></i> Error uploading zone mapping
                                      file.
                                      <p class="mb-0 mt-2" id="zoneErrorMessage-delhivery-ltl">Please check the file
                                        format and
                                        try again.</p>
                                    </div>
                                  </div>
                                  <div class="border rounded p-3">
                                    <strong><i class="bi bi-table me-2"></i>Zone Mapping Preview</strong>
                                    <div id="zoneMappingPreview-delhivery-ltl" class="table-responsive">
                                      <div class="text-center py-4">
                                        <p class="text-muted">Upload an Excel file to preview the zone mapping here.
                                        </p>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </form>
                    </div>
                  </div>
                  <div class="save-button-container text-end mb-3">
                    <button class="btn btn-primary save-button" id="save-button-ltl" type="button">Save</button>
                  </div>
                </div>


                <!-- Ecom Section -->
                <div id="ecomSection" style="display: none;">
                  <div class="alert alert-warning">
                    <strong>E-com:</strong> Coming Soon!
                  </div>
                </div>
                <!-- Slab Range Modal -->
                <div class="modal fade" id="slabRangeModal" tabindex="-1" aria-labelledby="slabRangeModalLabel"
                  aria-hidden="true">
                  <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title" id="slabRangeModalLabel">Create Custom Weight Range</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                      </div>
                      <div class="modal-body">
                        <div class="row g-3">
                          <div class="col-md-4">
                            <label for="minValue" class="form-label">Min Value</label>
                            <input type="number" class="form-control" id="minValue" placeholder="0" step="0.01" min="0">
                          </div>
                          <div class="col-md-4">
                            <label for="maxValue" class="form-label">Max Value</label>
                            <input type="number" class="form-control" id="maxValue" placeholder="500" step="0.01"
                              min="0">
                          </div>
                          <div class="col-md-4">
                            <label for="unitSelect" class="form-label">Unit</label>
                            <select class="form-select form-control" id="unitSelect">
                              <option value="gm">Grams (gm)</option>
                              <option value="kg">Kilograms (kg)</option>
                            </select>
                          </div>
                        </div>
                        <div class="alert alert-info mt-3">
                          <small><i class="fas fa-info-circle me-1"></i>This will create a slab with range: <span
                              id="rangePreview">0-500 gm</span></small>
                        </div>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="modalAddSlabBtn">Add Slab</button>
                      </div>
                    </div>
                  </div>
                </div>

                <template id="additionalChargeTemplate">
                  <div class="row align-items-end mb-2 additional-charge-row border rounded p-2">
                    <!-- 1. Charge Name -->
                    <div class="col-md-2">
                      <label class="form-label">Charge Name</label>
                      <select class="form-select form-control charge-type-select">
                        <option value="" disabled selected>Choose charge name</option>
                        <option value="lr">LR Charges</option>
                        <option value="fs">FS Charges</option>
                        <option value="fm">FM Charges</option>
                        <option value="fov_owner">FOV Charges</option>
                        <option value="to_pay">To Pay Charges</option>
                        <option value="cod">COD Charges</option>
                        <option value="check_handling_weight
                        ">Check Handling Charges</option>
                        <option value="green_tax">Green Tax Charges</option>
                        <option value="oda">ODA Charges</option>
                      </select>
                    </div>
                    <!-- 2. Minimum Charges (Dropdown) -->
                    <div class="col-md-2">
                      <label class="form-label">Minimum Charges</label>
                      <select class="form-select form-control min-charge-select">
                        <option value="" disabled selected>Select charge name</option>
                        <option value="lr">LR</option>
                        <option value="kg">kg</option>
                        <option value="base_value">Base value(%)</option>
                        <option value="invoice_value">Invoice Value(%)</option>
                        <option value="boxes">Boxes</option>
                        <option value="cod">cod</option>
                      </select>
                    </div>
                    <!-- 3. Min Value (Input) -->
                    <div class="col-md-1">
                      <label class="form-label">Min Value</label>
                      <input type="text" class="form-control min-value-input" placeholder="Min Value">
                    </div>
                    <!-- 4. Maximum Charges (Dropdown) -->
                    <div class="col-md-2">
                      <label class="form-label">Maximum Charges</label>
                      <select class="form-select form-control max-charge-select">
                        <option value="" disabled selected>Select charge name</option>
                        <option value="lr">LR</option>
                        <option value="kg">kg</option>
                        <option value="base_value">Base value(%)</option>
                        <option value="invoice_value">Invoice Value(%)</option>
                        <option value="boxes">Boxes</option>
                        <option value="cod">cod</option>
                      </select>
                    </div>
                    <!-- 5. Max Value (Input) -->
                    <div class="col-md-1">
                      <label class="form-label">Max Value</label>
                      <input type="text" class="form-control max-value-input" placeholder="Max Value">
                    </div>
                    <!-- 6. Condition (Dropdown) -->
                    <div class="col-md-1">
                      <label class="form-label">Condition</label>
                      <select class="form-select form-control condition-select">
                        <option value="and">AND</option>
                        <option value="or">OR</option>
                      </select>
                    </div>
                    <!-- 7. Conditional Charges (Dropdown, hidden by default) -->
                    <div class="col-md-2 conditional-charges" style="display:none;">
                      <label class="form-label">Conditional Charges</label>
                      <select class="form-select form-control">
                        <option value="lower">Whichever is lower</option>
                        <option value="higher">Whichever is higher</option>
                      </select>
                    </div>
                    <!-- 8. Remove Button -->
                    <div class="col-md-1 text-end">
                      <button type="button" class="btn btn-danger btn-sm remove-charge-btn" title="Remove">
                        <i class="fas fa-times"></i>
                      </button>
                    </div>
                  </div>
                </template>
              </div>
            </div>

          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-outline-primary" data-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-primary">Submit</button>
          </div>
        </div>
      </div>
    </div>


    <%- include('../partials/footer') %>


      <script>
        // Prevent DataTables from auto-initializing our table
        $(document).ready(function () {
          console.log('Forwarder list page loaded');

          // Mark our table to be skipped by global DataTable initialization
          $('#forwarder_details').addClass('no-datatable-init');

          // Add CSS for better styling
          const style = document.createElement('style');
          style.textContent = `
          .container-fluid {
              padding-left: 15px;
              padding-right: 15px;
          }
          .card {
              box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
              border: 1px solid rgba(0, 0, 0, 0.125);
          }
            .dataTables_wrapper {
                padding: 15px;
            }
            .custom-top-controls {
                border-bottom: 1px solid #dee2e6;
                padding-bottom: 15px;
                margin-bottom: 15px;
            }
           
            .custom-top-controls .dataTables_length select {
                width: auto;
                display: inline-block;
                margin-left: 5px;
            }
            .custom-top-controls .dataTables_info {
                margin: 0;
                padding: 0;
                font-size: 0.875rem;
                color: #6c757d;
            }
            /* Top Controls Styling */
            .dataTables_wrapper .top-controls {
                display: flex !important;
                justify-content: space-between !important;
                align-items: center !important;
                margin-bottom: 20px !important;
                padding: 0 !important;
            }
            
            .dataTables_wrapper .top-controls .dataTables_filter {
                margin: 0 !important;
            }
            
           
           
            
            .dataTables_wrapper .items-per-page {
                display: flex !important;
                align-items: center !important;
                gap: 8px !important;
                margin: 0 !important;
            }
            
            .dataTables_wrapper .items-per-page label {
                margin: 0 !important;
                font-size: 14px !important;
                color: #333 !important;
                font-weight: 500 !important;
            }
            
            .dataTables_wrapper .items-per-page-select {
                width: 80px !important;
                padding: 8px 12px !important;
                border: 1px solid #e0e0e0 !important;
                border-radius: 6px !important;
                font-size: 14px !important;
                background-color: #fff !important;
            }
            
            /* Bottom Pagination Styling */
            .dataTables_wrapper .bottom-pagination {
                display: flex !important;
                justify-content: center !important;
                align-items: center !important;
                margin-top: 30px !important;
                padding: 20px !important;
             
                border-radius: 8px !important;
                flex-direction: column !important;
                gap: 15px !important;
            }
            
            .dataTables_wrapper .pagination-info {
                margin: 0 !important;
                font-size: 14px !important;
                color: #666 !important;
                font-weight: 500 !important;
            }
            
            .dataTables_wrapper .pagination-controls {
                margin: 0 !important;
            }
            
            .dataTables_wrapper .pagination {
                display: flex !important;
                list-style: none !important;
                padding: 0 !important;
                margin: 0 !important;
                gap: 5px !important;
            }
            
            .dataTables_wrapper .pagination li {
                display: inline-block !important;
            }
           
            
           
          
            
            .dataTables_wrapper .pagination li.disabled a:hover {
                background-color: #f8f9fa !important;
                border-color: #e0e0e0 !important;
            }
            
            /* Responsive Design */
            @media (max-width: 768px) {
                .dataTables_wrapper .top-controls {
                    flex-direction: column !important;
                    gap: 15px !important;
                    align-items: stretch !important;
                }
              
                
                .dataTables_wrapper .items-per-page {
                    justify-content: center !important;
                }
                
                .dataTables_wrapper .bottom-pagination {
                    padding: 15px !important;
                }
                
              
            }
      `;
          document.head.appendChild(style);

          // Initialize our custom DataTable after a short delay to ensure DOM is ready
          setTimeout(function () {
            initForwarderDataTable();
          }, 100);
        });

        function initForwarderDataTable() {
          console.log('Initializing Forwarder DataTable...');

          // Check if table exists and DataTables is available
          if ($('#forwarder_details').length > 0 && typeof $.fn.DataTable !== 'undefined') {
            console.log('Table found, DataTables available');

            try {
              // Destroy any existing DataTable instance first
              if ($.fn.DataTable.isDataTable('#forwarder_details')) {
                console.log('Destroying existing DataTable');
                $('#forwarder_details').DataTable().destroy();
              }

              // Simple DataTable configuration
              $('#forwarder_details').DataTable({
                responsive: false,
                searching: true, // Enable DataTable's built-in search
                paging: true,
                ordering: false,
                info: true,
                lengthChange: true,
                pageLength: 10,
                lengthMenu: [5, 10, 20, 25, 50],
                autoWidth: false,
                language: {
                  lengthMenu: "Show _MENU_ entries",
                  info: "Showing _START_ to _END_ of _TOTAL_ entries",
                  infoEmpty: "No entries found",
                  infoFiltered: "(filtered from _MAX_ total entries)",
                  zeroRecords: "No matching records found",
                  emptyTable: "No data available in table",
                  searchPlaceholder: "Search by name, service, category, variant, volume...",
                  paginate: {
                    previous: "<i class='simple-icon-arrow-left'></i>",
                    next: "<i class='simple-icon-arrow-right'></i>"
                  }
                },
                columnDefs: [
                  {
                    targets: 0, // Logo column
                    orderable: false,
                    searchable: true, // Make logo column searchable for company names
                    width: "10%"
                  },
                  {
                    targets: [1, 2, 3, 4, 5], // Name, Service, Category, Variant, Volume
                    orderable: true,
                    searchable: true
                  },
                  {
                    targets: -1, // Action column
                    orderable: false,
                    searchable: false, // Don't search action buttons
                    width: "15%"
                  }
                ],
                dom: '<"top-controls"f<"items-per-page">l>t<"bottom-pagination"ip>',
                pagingType: "simple_numbers",
                initComplete: function () {
                  console.log('Forwarder DataTable initialized successfully');
                  console.log('Number of rows:', this.api().rows().count());

                  // Setup custom controls layout
                  setTimeout(function () {
                    var wrapper = $('#forwarder_details').closest('.dataTables_wrapper');

                    // Style the top controls section
                    var topControls = wrapper.find('.top-controls');
                    if (topControls.length) {
                      topControls.addClass('d-flex justify-content-between align-items-center mb-3');

                      // Style the search input
                      var searchInput = topControls.find('.dataTables_filter input');
                      if (searchInput.length) {
                        searchInput.attr('placeholder', 'Search...');
                        searchInput.addClass('form-control search-input');
                      }

                      // Style the items per page section
                      var itemsPerPage = wrapper.find('.items-per-page');
                      if (itemsPerPage.length) {
                        itemsPerPage.addClass('d-flex align-items-center');
                        var lengthSelect = itemsPerPage.find('.dataTables_length select');
                        if (lengthSelect.length) {
                          lengthSelect.addClass('form-select items-per-page-select');
                        }
                      }
                    }

                    // Style the bottom pagination section
                    var bottomPagination = wrapper.find('.bottom-pagination');
                    if (bottomPagination.length) {
                      bottomPagination.addClass('d-flex justify-content-center align-items-center mt-4');

                      // Style the pagination info
                      var info = bottomPagination.find('.dataTables_info');
                      if (info.length) {
                        info.addClass('pagination-info');
                      }

                      // Style the pagination buttons
                      var pagination = bottomPagination.find('.dataTables_paginate');
                      if (pagination.length) {
                        pagination.addClass('pagination-controls');
                      }
                    }

                    // Apply custom pagination styling
                    $('.dataTables_paginate').addClass('paging_simple_numbers');
                    $('.dataTables_paginate ul').addClass('pagination');
                  }, 100);

                  // DataTable's built-in search will now handle all filtering across all pages

                  // Update pagination styling on draw
                  this.api().on('draw', function () {
                    $('.dataTables_paginate').addClass('paging_simple_numbers');
                    $('.dataTables_paginate ul').addClass('pagination pagination-sm');
                  });
                }
              });

              console.log('Forwarder DataTable setup complete');

            } catch (error) {
              console.error('DataTable initialization failed:', error);
              console.error('Error details:', error.stack);
            }
          } else {
            console.warn('DataTable requirements not met');
          }
        }

        // Function to edit parental details
        async function editParentalDetails(id) {
          console.log('Edit Parental Details for ID:', id);
          // Implementation for editing parental details
        }

        async function editAdditionalCharges(id, type) {
          console.log('Edit Additional Charges for ID:', id, 'Type:', type);
          // Implementation for editing additional charges
        }

        // Additional functions for LTL and Express editing
        function editLTLRateList(id) {
          console.log('Edit LTL Rate List for ID:', id);
          // Implementation for LTL rate list
        }

        function editLTLZoneMapping(id) {
          console.log('Edit LTL Zone Mapping for ID:', id);
          // Implementation for LTL zone mapping
        }

        function editLTLTAT(id) {
          console.log('Edit LTL TAT for ID:', id);
          // Implementation for LTL TAT
        }

        function editExpressRateList(id) {
          console.log('Edit Express Rate List for ID:', id);
          // Implementation for Express rate list
        }

        function deleteForwarder(forwarderId) {
          // Show confirmation dialog
          Swal.fire({
            title: 'Delete Forwarder',
            text: 'Are you sure you want to delete this forwarder?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'Cancel'
          }).then((result) => {
            if (result.isConfirmed) {
              // Show loading state
              Swal.fire({
                title: 'Deleting...',
                text: 'Please wait while we delete the forwarder',
                allowOutsideClick: false,
                didOpen: () => {
                  Swal.showLoading();
                }
              });

              // Make API call to delete the forwarder
              axios.delete(`/api/forwarder/${forwarderId}`)
                .then(response => {
                  if (response.data.success) {
                    Swal.fire({
                      icon: 'success',
                      title: 'Deleted!',
                      text: 'Forwarder has been deleted successfully.',
                      timer: 2000,
                      showConfirmButton: false
                    }).then(() => {
                      // Reload the page to reflect changes
                      window.location.reload();
                    });
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Error!',
                      text: response.data.message || 'Failed to delete forwarder.'
                    });
                  }
                })
                .catch(error => {
                  console.error('Error deleting forwarder:', error);
                  Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'An error occurred while deleting the forwarder.'
                  });
                });
            }
          });
        }
      </script>

      <script>
        const slabCounters = {};

        function updateSlabNumbers(serviceId) {
          const tabs = document.querySelectorAll(`#slabTabs-${serviceId} .nav-item`);
          const tabPanes = document.querySelectorAll(`#slabTabContent-${serviceId} .tab-pane`);

          tabs.forEach((tab, index) => {
            const newNumber = index + 1;
            const button = tab.querySelector('button');
            button.id = `slab${newNumber}-tab-${serviceId}`;
            button.setAttribute('data-bs-target', `#slab${newNumber}-${serviceId}`);
            // Get the range label from data attribute
            const rangeLabel = button.getAttribute('data-range-label');
            let buttonText = `Slab ${newNumber}`;
            if (rangeLabel) {
              buttonText += ` - ${rangeLabel}`;
            }
            button.innerHTML = `${buttonText} <span class="ms-2" onclick="removeSlabTab('${serviceId}', ${newNumber})" style="cursor:pointer;">&times;</span>`;
            const tabPane = tabPanes[index];
            tabPane.id = `slab${newNumber}-${serviceId}`;
          });
          slabCounters[serviceId] = tabs.length;
        }

        function addNewSlabTab(serviceId, range) {
          if (!slabCounters[serviceId]) {
            slabCounters[serviceId] = 0;
          }
          const slabIndex = slabCounters[serviceId] + 1; // For display (1-based)
          const slabDataIndex = slabCounters[serviceId]; // For data (0-based)
          slabCounters[serviceId]++;

          // Create new tab button
          const tabButton = document.createElement('li');
          tabButton.className = 'nav-item';
          tabButton.role = 'presentation';
          const slabName = `Slab ${slabIndex}${range ? ' - ' + range.label : ''}`;
          tabButton.innerHTML = `
<button class="nav-link" id="slab${slabIndex}-tab-${serviceId}" data-bs-toggle="tab" data-bs-target="#slab${slabIndex}-${serviceId}" type="button" role="tab" data-range-label="${range ? range.label : ''}">
${slabName}
<span class="ms-2" onclick="removeSlabTab('${serviceId}', ${slabIndex})" style="cursor:pointer;">&times;</span>
</button>
`;

          // Create new tab content
          const tabContent = document.createElement('div');
          tabContent.className = 'tab-pane fade';
          tabContent.id = `slab${slabIndex}-${serviceId}`;
          tabContent.role = 'tabpanel';

          // Clone the rate table template
          const originalTable = document.getElementById(`rateTable-${serviceId}`);
          if (!originalTable) {
            console.warn(`Rate table element not found for serviceId: ${serviceId}`);
            return;
          }
          const tableClone = originalTable.cloneNode(true);
          tableClone.classList.remove('d-none');

          // Set the first row label if range is provided
          if (range) {
            const firstRow = tableClone.querySelector('tbody tr td');
            if (firstRow) firstRow.textContent = range.rowLabel;
          }

          // Assign name attributes to each input in the table
          const rows = tableClone.querySelectorAll('tbody tr');
          if (rows.length >= 3) {
            // 1st row: Main range
            let fields = ['within_ncr', 'within_city', 'within_state', 'within_zone', 'within_metro', 'within_special_zone', 'roi'];
            rows[0].querySelectorAll('input').forEach((input, i) => {
              input.name = `slabs[${slabDataIndex}][${fields[i]}]`;
            });

            // 2nd row: Additional
            const addInputs = rows[1].querySelectorAll('input, select');
            addInputs[0].name = `slabs[${slabDataIndex}][additional][upto]`;
            addInputs[1].name = `slabs[${slabDataIndex}][additional][unit]`;
            addInputs.forEach((input, i) => {
              if (i > 1) {
                input.name = `slabs[${slabDataIndex}][additional][${fields[i - 2]}]`;
              }
            });

            // 3rd row: TAT
            rows[2].querySelectorAll('input').forEach((input, i) => {
              input.name = `slabs[${slabDataIndex}][tat][${fields[i]}]`;
            });
          }

          // Clear all input values
          tableClone.querySelectorAll('input').forEach(input => input.value = '');

          tabContent.appendChild(tableClone);

          // --- FIRST: Add new elements to DOM ---
          document.getElementById(`slabTabs-${serviceId}`).appendChild(tabButton);
          document.getElementById(`slabTabContent-${serviceId}`).appendChild(tabContent);

          // --- THEN: Remove 'active' from all tab buttons and tab panes ---
          document.querySelectorAll(`#slabTabs-${serviceId} .nav-link`).forEach(btn => btn.classList.remove('active'));
          document.querySelectorAll(`#slabTabContent-${serviceId} .tab-pane`).forEach(pane => pane.classList.remove('show', 'active'));

          // --- FINALLY: Activate the new tab and content ---
          const newTabBtn = document.getElementById(`slab${slabIndex}-tab-${serviceId}`);
          if (newTabBtn) newTabBtn.classList.add('active');
          const newTabPane = document.getElementById(`slab${slabIndex}-${serviceId}`);
          if (newTabPane) newTabPane.classList.add('show', 'active');

          const newTab = new bootstrap.Tab(newTabBtn);
          newTab.show();
        }
        function removeSlabTab(serviceId, slabNumber) {
          // Remove tab button
          const tabButton = document.getElementById(`slab${slabNumber}-tab-${serviceId}`).parentElement;
          tabButton.remove();
          // Remove tab content
          const tabContent = document.getElementById(`slab${slabNumber}-${serviceId}`);
          tabContent.remove();
          // Update slab numbers
          updateSlabNumbers(serviceId);
          // Show first tab if the active tab was removed
          const firstTab = document.querySelector(`#slabTabs-${serviceId} .nav-link`);
          if (firstTab) {
            const tab = new bootstrap.Tab(firstTab);
            tab.show();
          }
        }





        function updateServiceTabs() {
          console.log('updateServiceTabs called');
          const courier = document.getElementById('courierSelect').value;
          const radios = document.querySelectorAll('input[name="chooseAPi"]');

          document.getElementById('basicDetails').style.setProperty('display', 'none', 'important');
          document.getElementById('zoneMappingFileExpress').style.setProperty('display', 'none', 'important');

          // Hide all courier-specific tabs
          document.getElementById('dtdcTabsStd').style.display = 'none';
          document.getElementById('dtdcSurfaceTabs').style.display = 'none';
          document.getElementById('delhiveryTabs').style.display = 'none';
          document.getElementById('xpressbeesTabs').style.display = 'none';
          document.getElementById('save-button-express').style.display = 'none';
          // document.getElementById('unified-save-container').style.display = 'none';

          // Hide all service content panes initially
          document.querySelectorAll('#slabTabContentHeader .tab-pane').forEach(pane => {
            pane.classList.remove('show', 'active');
            pane.style.display = 'none';
          });

          // Hide all "no service" messages initially
          document.querySelectorAll('[id$="-no-service"]').forEach(msg => {
            msg.style.display = 'none';
          });

          // Remove active from all sub-nav-tabs
          document.querySelectorAll('.sub-nav-tabs .nav-link').forEach(link => {
            link.classList.remove('active');
          });

          // Hide all DTDC sub-tabs (Air and Surface)
          document.querySelectorAll('#dtdcTabsStd .nav-item').forEach(item => {
            item.style.display = 'none';
          });

          // List all DTDC tab pane IDs
          const dtdcPaneIds = [
            '#priority', '#ground-express', '#premium', '#std-exp-a'
          ];

          // Show selected courier's tabs and content
          if (courier === 'dtdc') {
            console.log('DTDC selected, showing DTDC tabs');
            document.getElementById('dtdcTabsStd').style.display = 'block';
            document.getElementById('dtdcSurfaceTabs').style.display = 'block';
            document.getElementById('save-button-express').style.display = 'inline-block';
            document.getElementById('basicDetails').style.display = 'flex';
            document.getElementById('zoneMappingFileExpress').style.display = 'flex';
            // document.getElementById('unified-save-container').style.display = 'block';

            // Show Air tabs by default
            document.querySelectorAll('#air .nav-item').forEach(item => {
              item.style.display = '';
            });

            // Show Surface tabs by default
            document.querySelectorAll('#surface-tabs .nav-item').forEach(item => {
              item.style.display = '';
            });

            // Show all DTDC tab panes (content) but keep them hidden initially
            dtdcPaneIds.forEach(id => {
              const pane = document.querySelector(id);
              if (pane) {
                pane.style.display = '';
                pane.classList.remove('show', 'active');
              }
            });

            // Show "no service" messages for DTDC services only
            // document.getElementById('priority-no-service').style.display = 'block';
            // document.getElementById('premium-no-service').style.display = 'block';
            // document.getElementById('std-exp-a-no-service').style.display = 'block';
            // document.getElementById('ground-express-no-service').style.display = 'block';

            // Hide other courier messages
            document.getElementById('delhivery-no-service').style.display = 'none';
            document.getElementById('xpressbees-no-service').style.display = 'none';

            // Activate the first Air tab by default and show its content
            const firstAirTab = document.querySelector('#air .nav-link');
            if (firstAirTab) {
              firstAirTab.classList.add('active');
              const paneId = firstAirTab.getAttribute('data-bs-target');
              const pane = document.querySelector(paneId);
              if (pane) {
                pane.classList.add('show', 'active');
                pane.style.display = 'block';

                // Hide the corresponding "no service" message
                const serviceId = paneId.replace('#', '');
                const noServiceMsg = document.getElementById(`${serviceId}-no-service`);
                if (noServiceMsg) {
                  noServiceMsg.style.display = 'none';
                }
              }
            }
          } else if (courier === 'delhivery') {
            document.getElementById('delhiveryTabs').style.display = 'block';
            document.getElementById('save-button-express').style.display = 'inline-block';
            document.getElementById('basicDetails').style.display = 'flex';
            document.getElementById('zoneMappingFileExpress').style.display = 'flex';
            document.getElementById('delhiveryVariantContainer').style.display = 'block';

            // Hide all DTDC "no service" messages
            // document.getElementById('priority-no-service').style.display = 'none';
            // document.getElementById('premium-no-service').style.display = 'none';
            // document.getElementById('std-exp-a-no-service').style.display = 'none';
            // document.getElementById('ground-express-no-service').style.display = 'none';
            // document.getElementById('xpressbees-no-service').style.display = 'none';

            // Show Delhivery "no service" message
            document.getElementById('delhivery-no-service').style.display = 'block';

            // Activate Express tab
            const expressTab = document.querySelector('#delhiveryTabs .nav-link');
            if (expressTab) {
              expressTab.classList.add('active');
              const expressPane = document.getElementById('express');
              if (expressPane) {
                expressPane.classList.add('show', 'active');
                expressPane.style.display = 'block';

                // Hide the "no service" message when Express tab is active
                document.getElementById('delhivery-no-service').style.display = 'none';
              }
            }
          } else if (courier === 'xpressbees') {
            document.getElementById('xpressbeesTabs').style.display = 'block';
            document.getElementById('save-button-express').style.display = 'inline-block';
            document.getElementById('basicDetails').style.display = 'flex';
            document.getElementById('zoneMappingFileExpress').style.display = 'flex';

            // Hide all DTDC "no service" messages
            // document.getElementById('priority-no-service').style.display = 'none';
            // document.getElementById('premium-no-service').style.display = 'none';
            // document.getElementById('std-exp-a-no-service').style.display = 'none';
            // document.getElementById('ground-express-no-service').style.display = 'none';
            // document.getElementById('delhivery-no-service').style.display = 'none';

            // Show Xpressbees "no service" message
            document.getElementById('xpressbees-no-service').style.display = 'block';

            // Activate Standard/Expressbees tab
            const xpressbeesTab = document.querySelector('#xpressbeesTabs .nav-link');
            if (xpressbeesTab) {
              xpressbeesTab.classList.add('active');
              const xpressbeesPane = document.getElementById('standard-express');
              if (xpressbeesPane) {
                xpressbeesPane.classList.add('show', 'active');
                xpressbeesPane.style.display = 'block';

                // Hide the "no service" message when Standard/Expressbees tab is active
                document.getElementById('xpressbees-no-service').style.display = 'none';
              }
            }
          }

          // Hide all non-relevant tab panes for other couriers
          if (courier !== 'dtdc') {
            dtdcPaneIds.forEach(id => {
              const pane = document.querySelector(id);
              if (pane) pane.style.display = 'none';
            });
          }

          // Handle "no service" messages based on courier selection
          if (courier === 'select courier' || courier === '') {
            // No courier selected - hide all messages
            document.querySelectorAll('[id$="-no-service"]').forEach(msg => {
              msg.style.display = 'none';
            });
          }

          if (courier !== 'delhivery') {
            document.getElementById('delhiveryVariantContainer').style.display = 'none';
          }

        }

        // ... existing code ...
        // ... existing code ...

        // Initialize tabs on page load
        function initializeTabs() {
          console.log('initializeTabs called');

          // Set default active main tab to air
          const airTab = document.querySelector('#mainTabs .nav-link[data-bs-target="#air"]');
          if (airTab) {
            airTab.classList.add('active');
          }

          // Set air as active
          const air = document.getElementById('air');
          if (air) {
            air.classList.add('show', 'active');
          }

          // Hide all courier-specific tab containers initially
          document.getElementById('dtdcTabsStd').style.display = 'none';
          document.getElementById('dtdcSurfaceTabs').style.display = 'none';
          document.getElementById('delhiveryTabs').style.display = 'none';
          document.getElementById('xpressbeesTabs').style.display = 'none';
          // document.getElementById('unified-save-container').style.display = 'none';

          // Hide all service content panes initially
          document.querySelectorAll('#slabTabContentHeader .tab-pane').forEach(pane => {
            pane.classList.remove('show', 'active');
            pane.style.display = 'none';
          });

          // Hide all "no service" messages initially (no courier selected)
          document.querySelectorAll('[id$="-no-service"]').forEach(msg => {
            msg.style.display = 'none';
          });

          // If a courier is already selected, update the tabs
          const selectedCourier = document.getElementById('courierSelect').value;
          if (selectedCourier && selectedCourier !== 'select courier') {
            updateServiceTabs();
          }
        }

        document.addEventListener('DOMContentLoaded', function () {
          // Initialize tabs
          initializeTabs();

          // Listen for Air/Surface tab changes
          document.querySelectorAll('#mainTabs .nav-link').forEach(tab => {
            tab.addEventListener('shown.bs.tab', function (e) {
              const target = e.target.getAttribute('data-bs-target'); // "#air" or "#surface"

              // Only proceed if DTDC is selected
              const selectedCourier = document.getElementById('courierSelect').value;
              if (selectedCourier !== 'dtdc') {
                return;
              }

              // Remove active from all sub-nav-tabs
              document.querySelectorAll('.sub-nav-tabs .nav-link').forEach(link => {
                link.classList.remove('active');
              });

              // Show the first visible sub-tab for the selected group
              let firstTab = null;
              if (target === '#air') {
                // Find first visible air tab
                firstTab = document.querySelector('#air .nav-link:not([style*="display: none"])');
              } else if (target === '#surface') {
                // Find first visible surface tab
                firstTab = document.querySelector('#surface-tabs .nav-link:not([style*="display: none"])');
              }

              if (firstTab) {
                firstTab.classList.add('active');
                const paneId = firstTab.getAttribute('data-bs-target');
                const pane = document.querySelector(paneId);
                if (pane) {
                  // Hide all tab panes first
                  document.querySelectorAll('#slabTabContentHeader .tab-pane').forEach(pane => {
                    pane.classList.remove('show', 'active');
                  });

                  // Show the selected pane
                  pane.classList.add('show', 'active');

                  // IMPORTANT: Activate the first slab tab if it exists
                  const serviceId = paneId.replace('#', ''); // Remove the # from the pane ID
                  const firstSlabTab = document.querySelector(`#slabTabs-${serviceId} .nav-link`);
                  if (firstSlabTab) {
                    // Remove active from all slab tabs
                    document.querySelectorAll(`#slabTabs-${serviceId} .nav-link`).forEach(btn => {
                      btn.classList.remove('active');
                    });
                    document.querySelectorAll(`#slabTabContent-${serviceId} .tab-pane`).forEach(pane => {
                      pane.classList.remove('show', 'active');
                    });

                    // Activate the first slab tab
                    firstSlabTab.classList.add('active');
                    const firstSlabPaneId = firstSlabTab.getAttribute('data-bs-target');
                    const firstSlabPane = document.querySelector(firstSlabPaneId);
                    if (firstSlabPane) {
                      firstSlabPane.classList.add('show', 'active');
                    }
                  }
                }
              }
            });
          });

          // Add event listener for DTDC sub-tab clicks
          document.addEventListener('click', function (e) {
            if (e.target.matches('.sub-nav-tabs .nav-link')) {
              console.log('DTDC sub-tab clicked:', e.target.textContent);
              const target = e.target.getAttribute('data-bs-target');
              const serviceId = target.replace('#', '');
              console.log('Target service:', serviceId);

              // Hide all service content panes
              document.querySelectorAll('#slabTabContentHeader .tab-pane').forEach(pane => {
                pane.classList.remove('show', 'active');
                pane.style.display = 'none';
              });

              // Hide all "no service" messages for DTDC services
              // document.getElementById('priority-no-service').style.display = 'none';
              // document.getElementById('premium-no-service').style.display = 'none';
              // document.getElementById('std-exp-a-no-service').style.display = 'none';
              // document.getElementById('ground-express-no-service').style.display = 'none';

              // Show the selected service content
              const selectedPane = document.querySelector(target);
              if (selectedPane) {
                selectedPane.classList.add('show', 'active');
                selectedPane.style.display = 'block';
              }

              // Remove active from all sub-nav-tabs
              document.querySelectorAll('.sub-nav-tabs .nav-link').forEach(link => {
                link.classList.remove('active');
              });

              // Add active to clicked tab
              e.target.classList.add('active');

              // Show the unified save container when a service is selected
              // document.getElementById('unified-save-container').style.display = 'block';
            }
          });
        });

        // Function to save all DTDC services together
        function saveAllDtdcServices() {
          console.log('Saving all DTDC services...');

          // Collect data from all DTDC service forms
          const services = ['priority', 'premium', 'std-exp-a', 'ground-express'];
          const allServiceData = {};

          services.forEach(service => {
            const form = document.getElementById(`${service}-form`);
            if (form) {
              const formData = new FormData(form);
              const serviceData = {};

              // Convert FormData to object
              for (let [key, value] of formData.entries()) {
                serviceData[key] = value;
              }

              // Add additional charges data
              const additionalChargesContainer = document.getElementById(`additionalChargesContainer-${service}`);
              if (additionalChargesContainer) {
                const additionalCharges = [];
                additionalChargesContainer.querySelectorAll('.additional-charge-row').forEach(row => {
                  const chargeData = {};
                  row.querySelectorAll('input, select').forEach(input => {
                    if (input.name) {
                      chargeData[input.name] = input.value;
                    }
                  });
                  additionalCharges.push(chargeData);
                });
                serviceData.additionalCharges = additionalCharges;
              }

              // Add slab configuration data
              const slabTabs = document.getElementById(`slabTabs-${service}`);
              if (slabTabs) {
                const slabs = [];
                slabTabs.querySelectorAll('.nav-link').forEach(tab => {
                  const slabId = tab.getAttribute('data-bs-target').replace('#', '');
                  const slabContent = document.querySelector(`#${slabId}`);
                  if (slabContent) {
                    const slabData = {};
                    slabContent.querySelectorAll('input').forEach(input => {
                      if (input.name) {
                        slabData[input.name] = input.value;
                      }
                    });
                    slabs.push(slabData);
                  }
                });
                serviceData.slabs = slabs;
              }

              allServiceData[service] = serviceData;
            }
          });

          // Add basic details and zone mapping data
          const basicDetailsForm = document.getElementById('basicDetailsForm');
          if (basicDetailsForm) {
            const basicFormData = new FormData(basicDetailsForm);
            const basicData = {};
            for (let [key, value] of basicFormData.entries()) {
              basicData[key] = value;
            }
            allServiceData.basicDetails = basicData;
          }

          // Zone mapping file
          const zoneMappingFile = document.getElementById('zoneMappingFile');
          if (zoneMappingFile && zoneMappingFile.files[0]) {
            allServiceData.zoneMappingFile = zoneMappingFile.files[0];
          }

          console.log('All DTDC service data collected:', allServiceData);

          // Show success message
          Swal.fire({
            icon: 'success',
            title: 'All Services Saved!',
            text: 'Priority, Premium, STD EXP-A, and Ground Express services have been saved together.',
            confirmButtonText: 'OK'
          });

          // Here you would typically send the data to your backend
          // Example: sendToBackend(allServiceData);
        }

        // ... existing code ...
        // ... existing code ...

        // below is the slab min and the max vlaue in the modal for the slab range 

        const weightRanges = [
          { value: '0-500g', label: '0-500g', rowLabel: 'Upto 500 Gms' },
          { value: '500-1000g', label: '500-1000g', rowLabel: '500-1000 Gms' },
          { value: '1-2kg', label: '1-2kg', rowLabel: '1-2 Kg' },
          { value: '2-3kg', label: '2-3kg', rowLabel: '2-3 Kg' },
          { value: '3-4kg', label: '3-4kg', rowLabel: '3-4 Kg' },
          { value: '4-5kg', label: '4-5kg', rowLabel: '4-5 Kg' },
          { value: '5-6kg', label: '5-6kg', rowLabel: '5-6 Kg' },
          { value: '6-7kg', label: '6-7kg', rowLabel: '6-7 Kg' },
          { value: '7-8kg', label: '7-8kg', rowLabel: '7-8 Kg' }
        ];

        function showSlabDropdown(serviceId) {
          // Populate dropdown
          const dropdown = document.getElementById(`slabRangeDropdown-${serviceId}`);
          const select = document.getElementById(`slabRangeSelect-${serviceId}`);
          select.innerHTML = '<option value="">Select Weight Range</option>';
          weightRanges.forEach(r => {
            select.innerHTML += `<option value="${r.value}">${r.label}</option>`;
          });
          dropdown.style.display = 'inline-block';
        }

        function hideSlabDropdown(serviceId) {
          document.getElementById(`slabRangeDropdown-${serviceId}`).style.display = 'none';
        }

        function confirmAddSlabTab(serviceId) {
          const select = document.getElementById(`slabRangeSelect-${serviceId}`);
          const selectedValue = select.value;
          if (!selectedValue) return;
          const range = weightRanges.find(r => r.value === selectedValue);
          if (!range) return;
          addNewSlabTab(serviceId, range);
          hideSlabDropdown(serviceId);
        }

        let currentSlabServiceId = null;

        function openSlabModal(serviceId) {
          currentSlabServiceId = serviceId;
          document.getElementById('minValue').value = '';
          document.getElementById('maxValue').value = '';
          document.getElementById('unitSelect').value = 'gm';
          updateRangePreview();
          const modal = new bootstrap.Modal(document.getElementById('slabRangeModal'));
          modal.show();
        }

        function updateRangePreview() {
          const minValue = document.getElementById('minValue').value || '0';
          const maxValue = document.getElementById('maxValue').value || '500';
          const unit = document.getElementById('unitSelect').value;
          const unitText = unit === 'kg' ? ' kg' : ' gm';
          document.getElementById('rangePreview').textContent = `${minValue}-${maxValue}${unitText}`;
        }

        document.addEventListener('DOMContentLoaded', function () {
          document.getElementById('minValue').addEventListener('input', updateRangePreview);
          document.getElementById('maxValue').addEventListener('input', updateRangePreview);
          document.getElementById('unitSelect').addEventListener('change', updateRangePreview);

          document.getElementById('modalAddSlabBtn').onclick = function () {
            const minValue = document.getElementById('minValue').value;
            const maxValue = document.getElementById('maxValue').value;
            const unit = document.getElementById('unitSelect').value;
            if (!minValue || !maxValue || !currentSlabServiceId) {
              alert('Please enter both min and max values');
              return;
            }
            if (parseFloat(minValue) >= parseFloat(maxValue)) {
              alert('Max value must be greater than min value');
              return;
            }
            const unitText = unit === 'kg' ? ' kg' : ' gm';
            const range = {
              value: `${minValue}-${maxValue}${unit}`,
              label: `${minValue}-${maxValue}${unit}`,
              rowLabel: `${minValue}-${maxValue}${unitText}`
            };
            addNewSlabTab(currentSlabServiceId, range);
            bootstrap.Modal.getInstance(document.getElementById('slabRangeModal')).hide();
          };
        });
      </script>
      <!-- LTL Section -->
      <!-- Ecom Coming Soon Section -->
      <script>
        const radios = document.querySelectorAll('input[name="chooseAPi"]');
        const standardSection = document.getElementById('standardSection');
        // const ecomSection = document.getElementById('ecomSection');
        const ltlSection = document.getElementById('ltlSection');

        const productTypeSelect = document.getElementById('ProductType');
        const serviceTypeSelect = document.getElementById('serviceType');

        // Dropdown options
        const standardOptions = [
          { value: "Standard-Air", text: "Standard Air" },
          { value: "Standard-Surface", text: "Standard Surface" }
        ];

        const ltlOptions = [
          { value: "LTL-surface", text: "LTL Surface" }
        ];

        // Helper to update select options
        // function updateSelectOptions(selectEl, options) {
        //   selectEl.innerHTML = `<option value="select type" selected disabled>select mode</option>`;
        //   options.forEach(opt => {
        //     const optionEl = document.createElement("option");
        //     optionEl.value = opt.value;
        //     optionEl.textContent = opt.text;
        //     selectEl.appendChild(optionEl);
        //   });
        // }
        function updateLtlTabs() {
          const courier = document.getElementById('courierSelect').value;
          const dtdcLtlTab = document.getElementById('dtdc-ltl-nav-item');
          const delhiveryLtlTab = document.getElementById('delhivery-ltl-nav-item');
          const dtdcLtlPane = document.getElementById('dtdc-ltl-content');
          const delhiveryLtlPane = document.getElementById('delhivery-ltl-content');
          document.getElementById('save-button-ltl').style.display = 'none';
          document.getElementById('zoneMappingFileExpress').style.display = 'none';

          // Hide all LTL tabs and panes first
          if (dtdcLtlTab) dtdcLtlTab.style.display = 'none';
          if (delhiveryLtlTab) delhiveryLtlTab.style.display = 'none';
          if (dtdcLtlPane) { dtdcLtlPane.classList.remove('show', 'active'); }
          if (delhiveryLtlPane) { delhiveryLtlPane.classList.remove('show', 'active'); }

          // Remove active from all LTL nav links
          document.querySelectorAll('#ltlCourierTabs .nav-link').forEach(link => link.classList.remove('active'));

          // Show and activate the correct tab and pane
          if (courier === 'dtdc' && dtdcLtlTab && dtdcLtlPane) {
            dtdcLtlTab.style.display = 'block';
            dtdcLtlTab.querySelector('button').classList.add('active');
            dtdcLtlPane.classList.add('show', 'active');
            document.getElementById('save-button-ltl').style.display = 'inline-block';
          } else if (courier === 'delhivery' && delhiveryLtlTab && delhiveryLtlPane) {
            delhiveryLtlTab.style.display = 'block';
            delhiveryLtlTab.querySelector('button').classList.add('active');
            delhiveryLtlPane.classList.add('show', 'active');
            document.getElementById('save-button-ltl').style.display = 'inline-block';
          }
        }
        radios.forEach(radio => {
          radio.addEventListener('change', () => {
            if (radio.value === 'standard' && radio.checked) {
              standardSection.style.display = 'block';
              // ecomSection.style.display = 'none';
              ltlSection.style.display = 'none';
              showAllCouriers(); // Show all couriers
              // document.getElementById('zoneMappingFileExpress').style.display = 'flex';
            } else if (radio.value === 'ecom' && radio.checked) {
              standardSection.style.display = 'block';
              // ecomSection.style.display = 'none';
              ltlSection.style.display = 'none';
              hideCourierOption('dtdc'); // Hide DTDC
              // document.getElementById('zoneMappingFileExpress').style.display = 'none';
            } else if (radio.value === 'ltl' && radio.checked) {
              standardSection.style.display = 'none';
              // ecomSection.style.display = 'none';
              ltlSection.style.display = 'block';
              showAllCouriers(); // Show all couriers
              updateLtlTabs(); // <-- Add this line
            }
          });
        });

        function checkAndShowZoneMapping() {
          const standardChecked = document.getElementById('standardService').checked;
          const businessVolume = document.getElementById('businessVolume').value;
          const courierSelected = document.getElementById('courierSelect').value;

          if (
            standardChecked &&
            businessVolume !== '' &&
            courierSelected !== 'Select courier'
          ) {
            document.getElementById('zoneMappingFileExpress').style.display = 'flex';
          } else {
            document.getElementById('zoneMappingFileExpress').style.display = 'none';
          }
        }
        document.getElementById('courierSelect').addEventListener('change', function () {
          if (document.getElementById('ltlService').checked) {
            updateLtlTabs();
          }
          if (document.getElementById('standardService').checked) {
            checkAndShowZoneMapping();
          }
        });
        function hideCourierOption(courierValue) {
          const courierSelect = document.getElementById('courierSelect');
          const currentValue = courierSelect.value;

          Array.from(courierSelect.options).forEach(option => {
            if (option.value === courierValue) {
              option.style.display = 'none';

              // If the hidden courier is currently selected, reset selection
              if (currentValue === courierValue) {
                courierSelect.value = ""; // Reset to no selection
              }
            } else {
              option.style.display = '';
            }
          });
          updateServiceTabs()
        }


        function showAllCouriers() {
          const courierSelect = document.getElementById('courierSelect');
          Array.from(courierSelect.options).forEach(option => {
            option.style.display = '';
          });
          updateServiceTabs()
        }
        // Trigger initial population
        document.querySelector('input[name="chooseAPi"]:checked')?.dispatchEvent(new Event('change'));
      </script>
      <script>
        document.addEventListener('DOMContentLoaded', function () {
          // Listen for all add buttons
          document.querySelectorAll('.addAdditionalChargeBtn').forEach(function (addBtn) {
            addBtn.addEventListener('click', function () {
              const targetId = addBtn.getAttribute('data-target');
              const container = document.getElementById(targetId);
              const template = document.getElementById('additionalChargeTemplate');
              const clone = template.content.cloneNode(true);
              const row = clone.querySelector('.additional-charge-row');
              handleRowEvents(row);
              container.appendChild(clone);
            });
          });

          // Logic for dropdowns and conditional charges
          function updateDropdowns(row) {
            const minSelect = row.querySelector('.min-charge-select');
            const maxSelect = row.querySelector('.max-charge-select');
            // Enable all options first
            maxSelect.querySelectorAll('option').forEach(opt => opt.disabled = false);
            minSelect.querySelectorAll('option').forEach(opt => opt.disabled = false);
            // Disable selected value in the other select
            if (minSelect.value) {
              const opt = maxSelect.querySelector('option[value="' + minSelect.value + '"]');
              if (opt) opt.disabled = true;
              if (maxSelect.value === minSelect.value) maxSelect.value = "";
            }
            if (maxSelect.value) {
              const opt = minSelect.querySelector('option[value="' + maxSelect.value + '"]');
              if (opt) opt.disabled = true;
              if (minSelect.value === maxSelect.value) minSelect.value = "";
            }
          }

          function handleRowEvents(row) {
            const minSelect = row.querySelector('.min-charge-select');
            const maxSelect = row.querySelector('.max-charge-select');
            const conditionSelect = row.querySelector('.condition-select');
            const conditionalDiv = row.querySelector('.conditional-charges');
            const removeBtn = row.querySelector('.remove-charge-btn');

            minSelect.addEventListener('change', () => updateDropdowns(row));
            maxSelect.addEventListener('change', () => updateDropdowns(row));
            conditionSelect.addEventListener('change', function () {
              if (this.value === 'or') {
                conditionalDiv.style.display = '';
              } else {
                conditionalDiv.style.display = 'none';
              }
            });
            // Remove row on click
            if (removeBtn) {
              removeBtn.addEventListener('click', function () {
                row.remove();
              });
            }
          }
        });
      </script>
      <script>
        function updateDtdcTabs(activeTabTarget) {
          const courier = document.getElementById('courierSelect').value;

          // All tab <li> IDs
          const allTabIds = [
            'b2c-smart-nav-item',
            'b2c-priority-nav-item',
            'b2c-premium-nav-item',
            'b2c-economy-nav-item',
            'priority-nav-item',
            'ground-express-nav-item',
            'premium-nav-item',
            'std-exp-a-nav-item'
          ];

          // Air-only for DTDC
          const airTabIds = ['std-exp-a-nav-item', 'premium-nav-item', 'priority-nav-item'];
          // Surface-only for DTDC
          const surfaceTabIds = [
            'b2c-smart-nav-item',
            'b2c-priority-nav-item',
            'b2c-premium-nav-item',
            'b2c-economy-nav-item',
            'ground-express-nav-item'
          ];

          // Hide all tabs by default
          allTabIds.forEach(id => {
            const li = document.getElementById(id);
            if (li) li.style.display = 'none';
          });

          if (courier === 'dtdc') {
            if (activeTabTarget === '#air') {
              airTabIds.forEach(id => {
                const li = document.getElementById(id);
                if (li) li.style.display = '';
              });
            } else if (activeTabTarget === '#surface') {
              surfaceTabIds.forEach(id => {
                const li = document.getElementById(id);
                if (li) li.style.display = '';
              });
            }
          } else {
            // For other couriers, show all tabs
            allTabIds.forEach(id => {
              const li = document.getElementById(id);
              if (li) li.style.display = '';
            });
          }
        }
        // Run on courier change and on tab change
        document.querySelectorAll('#mainTabs .nav-link').forEach(tab => {
          tab.addEventListener('shown.bs.tab', function (e) {
            updateDtdcTabs(e.target.getAttribute('data-bs-target'));
          });
        });

        // Initial run (FIXED)
        document.addEventListener('DOMContentLoaded', function () {
          const activeTab = document.querySelector('#mainTabs .nav-link.active');
          const activeTabTarget = activeTab ? activeTab.getAttribute('data-bs-target') : '#air';
          updateDtdcTabs(activeTabTarget);
        });

        // On courier change
        document.getElementById('courierSelect').addEventListener('change', function () {
          const activeTab = document.querySelector('#mainTabs .nav-link.active');
          const activeTabTarget = activeTab ? activeTab.getAttribute('data-bs-target') : '#air';
          updateDtdcTabs(activeTabTarget);
        });
      </script>
      <!-- SheetJS for Excel parsing -->

      <script>
        function generateExcelPreviewTable(headers, rows) {
          return `
<div class="table-responsive">
<table class="table table-bordered table-sm">
<thead class="table-light">
<tr>
${headers.map(header => `<th>${header || ''}</th>`).join('')}
</tr>
</thead>
<tbody>
${rows.map(row => `
<tr>
${headers.map((_, i) => {
            let cell = row[i];
            let formattedCell = (typeof cell === 'number' && !Number.isInteger(cell)) ? Number(cell.toFixed(2)) : cell;
            return `<td>${formattedCell !== undefined && formattedCell !== '' ? formattedCell : '&nbsp;'}</td>`;
          }).join('')}
</tr>
`).join('')}
</tbody>
</table>
</div>
`;
        }

        function setupExcelPreview(fileInputId, previewContainerId) {
          const fileInput = document.getElementById(fileInputId);
          const previewContainer = document.getElementById(previewContainerId);

          fileInput.addEventListener('change', function (e) {
            const file = e.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function (e) {
              try {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, { type: 'array' });

                let previewHTML = '';
                workbook.SheetNames.forEach((sheetName) => {
                  const worksheet = workbook.Sheets[sheetName];
                  const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '' });
                  if (jsonData.length === 0) return;
                  const headers = jsonData[0];
                  const rows = jsonData.slice(1, 11); // Preview up to 10 rows per sheet

                  previewHTML += `
<div class="mb-4">
<h6 class="mb-2">${sheetName}</h6>
${generateExcelPreviewTable(headers, rows)}
</div>
`;
                });

                if (previewHTML) {
                  previewContainer.innerHTML = previewHTML;
                } else {
                  previewContainer.innerHTML = '<div class="alert alert-warning">No data found in the uploaded file.</div>';
                }

              } catch (error) {
                previewContainer.innerHTML = `<div class="alert alert-danger">Error: ${error.message || 'Failed to process the file.'}</div>`;
              }
            };
            reader.onerror = function () {
              previewContainer.innerHTML = '<div class="alert alert-danger">Error reading the file. Please try again.</div>';
            };
            reader.readAsArrayBuffer(file);
          });
        }

        // Example usage for DTDC LTL
        // DTDC LTL
        setupExcelPreview('rateExcelFile-dtdc-ltl', 'rateMatrixPreview-dtdc-ltl');
        setupExcelPreview('zoneExcelFile-dtdc-ltl', 'zoneMappingPreview-dtdc-ltl');
        setupExcelPreview('zoneMappingFile', 'zoneMappingPreviewExpress');

        // Delhivery LTL
        setupExcelPreview('rateExcelFile-delhivery-ltl', 'rateMatrixPreview-delhivery-ltl');
        setupExcelPreview('zoneExcelFile-delhivery-ltl', 'zoneMappingPreview-delhivery-ltl');
      </script>

      <script>
        function logFormData(formData) {
          // Convert FormData to a plain object for easier viewing
          const obj = {};
          for (let [key, value] of formData.entries()) {
            // If value is a File, show its name
            if (value instanceof File) {
              obj[key] = value.name;
            } else {
              obj[key] = value;
            }
          }
          // Log as JSON string for better visibility, especially if empty
          console.log("Form Data:", Object.keys(obj).length ? obj : "{}");
          // Also log as JSON string for clarity
          if (Object.keys(obj).length === 0) {
            console.log("Form Data (stringified): {}", obj);
          } else {
            console.log("Form Data (stringified):", JSON.stringify(obj, null, 2));
          }
        }

        // Handler for saving based on selected courier for express/standard (single API)
        document.getElementById('save-button-express').addEventListener('click', function () {
          // Get the selected courier value
          const courierSelect = document.getElementById('courierSelect');
          if (!courierSelect) {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'Courier selection not found!'
            });
            return;
          }
          const selectedCourier = courierSelect.value;
          // Get form values
          const segment = document.querySelector('input[name="chooseAPi"]:checked')?.value || '';

          // Pick the dynamic key + value
          const isEcom = segment === 'ecom';
          const dynamicKey = isEcom ? 'noOfShipment' : 'businessVolume';
          const dynamicValue = isEcom
            ? (document.getElementById('stepMonthlyParcels')?.value || '')
            : (document.getElementById('businessVolume')?.value || '');

          // Validate the selected control
          if (!dynamicValue) {
            Swal.fire({
              icon: 'error',
              title: 'Oops...',
              text: isEcom
                ? 'Please select No. of Shipments / Month for E‑com!'
                : 'Please select business volume!',
            });
            return;
          }
          const basicDetails = {
            [dynamicKey]: dynamicValue,
            courier: document.getElementById('courierSelect')?.value || '',
            shipmentType: document.getElementById('shipmentType')?.value || '',
            chooseAPi: document.querySelector('input[name="chooseAPi"]:checked')?.value || '',
            companyAddress: document.getElementById('companyAddress')?.value || '',
            companyCountry: document.getElementById('companyCountry')?.value || '',
            companyState: document.getElementById('companyState')?.value || '',
            companyDistrict: document.getElementById('companyDistrict')?.value || '',
            fromDate: document.getElementById('fromDate')?.value || '',
            fromTo: document.getElementById('fromTo')?.value || '',
            creditTerms: document.getElementById('creditTerms')?.value || '',
            vat: document.getElementById('vat')?.value || '',
            company_uin: document.getElementById('company_uin')?.value || '',
            company_pan: document.getElementById('company_pan')?.value || '',
            gstNo: document.getElementById('gstNo')?.value || '',
            Bank_account_name: document.getElementById('Bank_account_name')?.value || '',
            billingCycle: document.getElementById('billingCycle')?.value || '',
            accountNumber: document.getElementById('accountNumber')?.value || '',
            account_type: document.getElementById('account_type')?.value || '',
            chooseBank: document.getElementById('chooseBank')?.value || '',
            ifscCode: document.getElementById('ifscCode')?.value || ''
          };

          const allServiceDetails = {};
          // Determine which form to use based on courier
          let form = null;
          let formData = null;
          if (selectedCourier === 'delhivery') {
            form = document.getElementById('express-form');
            formData = new FormData(form);
            const zoneMappingFileInput = document.getElementById('zoneMappingFile');
            if (!zoneMappingFileInput || !zoneMappingFileInput.files || zoneMappingFileInput.files.length === 0) {
              Swal.fire({
                icon: 'error',
                title: 'No Data',
                text: 'Please upload zone mapping file before submitting.'
              });
              return;
            }
            // 1. Collect additional charges
            const additionalCharges = [];
            document.querySelectorAll('#additionalChargesContainer-express .additional-charge-row').forEach(row => {
              additionalCharges.push({
                chargeName: row.querySelector('.charge-type-select')?.value || '',
                minCharge: row.querySelector('.min-charge-select')?.value || '',
                minValue: row.querySelector('.min-value-input')?.value || '',
                maxCharge: row.querySelector('.max-charge-select')?.value || '',
                maxValue: row.querySelector('.max-value-input')?.value || '',
                condition: row.querySelector('.condition-select')?.value || '',
                conditionalCharges: row.querySelector('.condition-select')?.value === 'or'
                  ? row.querySelector('.conditional-charges select')?.value || ''
                  : undefined,
              });
            });
            let delhiveryVariantApi = document.getElementById('delhiveryVariantSelect').value;

            // 2. Collect slabs
            const slabs = [];
            document.querySelectorAll('#slabTabContent-express .tab-pane').forEach(tab => {
              const tabId = tab.id;
              const tabButton = document.querySelector(`#slabTabs-express [data-bs-target="#${tabId}"]`);
              const slabLabel = tabButton?.getAttribute('data-range-label') || '';
              const table = tab.querySelector('table');
              const rows = [];
              if (table) {
                const trList = table.querySelectorAll('tbody tr');
                trList.forEach((tr, rowIdx) => {
                  let type = "main";
                  if (rowIdx === 1) type = "additional";
                  if (rowIdx === 2) type = "tat";
                  const values = {};
                  tr.querySelectorAll('input, select').forEach((input, i) => {
                    let key;

                    if (type === "additional") {
                      // For additional row, handle the first two columns specially
                      if (i === 0) {
                        key = "upto";
                      } else if (i === 1) {
                        key = "unit";
                      } else {
                        // For the remaining columns, use the predefined fields array
                        const fields = ['WITHIN-NCR', 'WITHIN-CITY', 'WITHIN-STATE', 'WITHIN-ZONE', 'WITHIN-METRO', 'WITHIN-SPECIAL-ZONE', 'ROI'];
                        key = fields[i - 2] || `col${i}`;
                      }
                    } else {
                      // For main and tat rows, use the predefined fields array
                      const fields = ['WITHIN-NCR', 'WITHIN-CITY', 'WITHIN-STATE', 'WITHIN-ZONE', 'WITHIN-METRO', 'WITHIN-SPECIAL-ZONE', 'ROI'];
                      key = fields[i] || `col${i}`;
                    }

                    values[key] = input.value;
                  });
                  rows.push({ type, values });
                });
              }
              slabs.push({
                label: slabLabel,
                rows
              });
            });
            // 3. Detect which tab is active for mode
            let mode = "Air"; // default
            const activeTab = document.querySelector('#mainTabs .nav-link.active');
            if (activeTab) {
              if (activeTab.getAttribute('data-bs-target') === '#surface') {
                mode = "Surface";
              }
            }
            // Get volumetric safety factor for each form
            let volumetricSafetyFactor = '';
            if (form.id === 'standard-express-form') {
              volumetricSafetyFactor = document.getElementById('volumetric_safety_factor-express')?.value || '';
            }
            // 3. Wrap under Express key
            const allServiceDetails = {
              Express: {
                additionalCharges,
                slabs,
                mode,
                volumetricSafetyFactor: volumetricSafetyFactor,

              },
              delhiveryVariantApi
            };

            // 4. Append to FormData
            formData.append('allServiceDetails', JSON.stringify(allServiceDetails));
            formData.append('zoneMappingFile', zoneMappingFileInput.files[0]);

          } else if (selectedCourier === 'xpressbees') {
            form = document.getElementById('standard-express-form');
            formData = new FormData(form);
            const zoneMappingFileInput = document.getElementById('zoneMappingFile');
            if (!zoneMappingFileInput || !zoneMappingFileInput.files || zoneMappingFileInput.files.length === 0) {
              Swal.fire({
                icon: 'error',
                title: 'No Data',
                text: 'Please upload zone mapping file before submitting.'
              });
              return;
            }

            // 1. Collect additional charges
            const additionalCharges = [];
            document.querySelectorAll('#additionalChargesContainer-standard-expressbees .additional-charge-row').forEach(row => {
              additionalCharges.push({
                chargeName: row.querySelector('.charge-type-select')?.value || '',
                minCharge: row.querySelector('.min-charge-select')?.value || '',
                minValue: row.querySelector('.min-value-input')?.value || '',
                maxCharge: row.querySelector('.max-charge-select')?.value || '',
                maxValue: row.querySelector('.max-value-input')?.value || '',
                condition: row.querySelector('.condition-select')?.value || '',
                conditionalCharges: row.querySelector('.condition-select')?.value === 'or'
                  ? row.querySelector('.conditional-charges select')?.value || ''
                  : undefined,
              });
            });

            // 2. Collect slabs
            const slabs = [];
            document.querySelectorAll('#slabTabContent-standard-express .tab-pane').forEach(tab => {
              const tabId = tab.id;
              const tabButton = document.querySelector(`#slabTabs-standard-express [data-bs-target="#${tabId}"]`);
              const slabLabel = tabButton?.getAttribute('data-range-label') || '';
              const table = tab.querySelector('table');
              const rows = [];
              if (table) {
                const trList = table.querySelectorAll('tbody tr');
                trList.forEach((tr, rowIdx) => {
                  let type = "main";
                  if (rowIdx === 1) type = "additional";
                  if (rowIdx === 2) type = "tat";
                  const values = {};
                  tr.querySelectorAll('input, select').forEach((input, i) => {
                    let key;

                    if (type === "additional") {
                      // For additional row, handle the first two columns specially
                      if (i === 0) {
                        key = "upto";
                      } else if (i === 1) {
                        key = "unit";
                      } else {
                        // For the remaining columns, use the predefined fields array
                        const fields = ['WITHIN-NCR', 'WITHIN-CITY', 'WITHIN-STATE', 'WITHIN-ZONE', 'WITHIN-METRO', 'WITHIN-SPECIAL-ZONE', 'ROI'];
                        key = fields[i - 2] || `col${i}`;
                      }
                    } else {
                      // For main and tat rows, use the predefined fields array
                      const fields = ['WITHIN-NCR', 'WITHIN-CITY', 'WITHIN-STATE', 'WITHIN-ZONE', 'WITHIN-METRO', 'WITHIN-SPECIAL-ZONE', 'ROI'];
                      key = fields[i] || `col${i}`;
                    }

                    values[key] = input.value;
                  });
                  rows.push({ type, values });
                });
              }
              slabs.push({
                label: slabLabel,
                rows
              });
            });
            // 3. Detect which tab is active for mode
            let mode = "Air"; // default
            const activeTab = document.querySelector('#mainTabs .nav-link.active');
            if (activeTab) {
              if (activeTab.getAttribute('data-bs-target') === '#surface') {
                mode = "Surface";
              }
            }
            // Get volumetric safety factor for each form


            let volumetricSafetyFactor = document.getElementById('volumetric_safety_factor-xpressbees')?.value || '';
            const delhiveryVariantApi = 0

            // 3. Wrap under Xpressbees key (or use 'Standard_Express' if you prefer)
            const allServiceDetails = {
              Xpressbees: {
                additionalCharges,
                slabs,
                mode,

                volumetricSafetyFactor: volumetricSafetyFactor
              },
              delhiveryVariantApi
            };

            // 4. Append to FormData
            formData.append('allServiceDetails', JSON.stringify(allServiceDetails));
            formData.append('zoneMappingFile', zoneMappingFileInput.files[0]);

          } else if (selectedCourier === 'dtdc') {
            const zoneMappingFileInput = document.getElementById('zoneMappingFile');
            if (!zoneMappingFileInput || !zoneMappingFileInput.files || zoneMappingFileInput.files.length === 0) {
              Swal.fire({
                icon: 'error',
                title: 'No Data',
                text: 'Please upload zone mapping file before submitting.'
              });
              return;
            }
            const dtdcForms = [
              { id: 'priority-form', name: 'Priority', additionalId: 'additionalChargesContainer-priority', slabTabId: 'slabTabs-priority', slabTabContentId: 'slabTabContent-priority' },
              { id: 'premium-form', name: 'Premium', additionalId: 'additionalChargesContainer-b2c-premium', slabTabId: 'slabTabs-premium', slabTabContentId: 'slabTabContent-premium' },
              { id: 'std-exp-a-form', name: 'STD_EXP_A', additionalId: 'additionalChargesContainer-std-exp-a', slabTabId: 'slabTabs-std-exp-a', slabTabContentId: 'slabTabContent-std-exp-a' },
              { id: 'ground-express-form', name: 'Ground_Express', additionalId: 'additionalChargesContainer-ground-express', slabTabId: 'slabTabs-ground-express', slabTabContentId: 'slabTabContent-ground-express' }
            ];

            const filledForms = dtdcForms.filter(f => formHasData(document.getElementById(f.id)));

            if (filledForms.length === 0) {
              Swal.fire({
                icon: 'error',
                title: 'No Data',
                text: 'Please fill at least one DTDC service form before submitting.'
              });
              return;
            }

            const allFormData = new FormData();
            const allServiceDetails = {}; // <-- This will hold all additional charges and slabs grouped by service

            filledForms.forEach(f => {
              // 1. Add form fields
              const form = document.getElementById(f.id);
              const formData = new FormData(form);
              console.log("formid", f.id)

              // 2. Collect additional charges for this form
              const additionalCharges = [];
              document.querySelectorAll(`#${f.additionalId} .additional-charge-row`).forEach(row => {
                additionalCharges.push({
                  chargeName: row.querySelector('.charge-type-select')?.value || '',
                  minCharge: row.querySelector('.min-charge-select')?.value || '',
                  minValue: row.querySelector('.min-value-input')?.value || '',
                  maxCharge: row.querySelector('.max-charge-select')?.value || '',
                  maxValue: row.querySelector('.max-value-input')?.value || '',
                  condition: row.querySelector('.condition-select')?.value || '',
                  conditionalCharges: row.querySelector('.condition-select')?.value === 'or'
                    ? row.querySelector('.conditional-charges select')?.value || ''
                    : undefined,
                });
              });

              const slabs = [];
              document.querySelectorAll(`#${f.slabTabContentId} .tab-pane`).forEach(tab => {
                const tabId = tab.id;
                const tabButton = document.querySelector(`#slabTabs-${f.id.replace('-form', '')} [data-bs-target="#${tabId}"]`);
                const slabLabel = tabButton?.getAttribute('data-range-label') || '';
                const table = tab.querySelector('table');
                const rows = [];
                if (table) {
                  const trList = table.querySelectorAll('tbody tr');
                  trList.forEach((tr, rowIdx) => {
                    let type = "main";
                    if (rowIdx === 1) type = "additional";
                    if (rowIdx === 2) type = "tat";
                    const values = {};
                    tr.querySelectorAll('input, select').forEach((input, i) => {
                      let key;

                      if (type === "additional") {
                        // For additional row, handle the first two columns specially
                        if (i === 0) {
                          key = "upto";
                        } else if (i === 1) {
                          key = "unit";
                        } else {
                          // For the remaining columns, use the predefined fields array
                          const fields = ['WITHIN-NCR', 'WITHIN-CITY', 'WITHIN-STATE', 'WITHIN-ZONE', 'WITHIN-METRO', 'WITHIN-SPECIAL-ZONE', 'ROI'];
                          key = fields[i - 2] || `col${i}`;
                        }
                      } else {
                        // For main and tat rows, use the predefined fields array
                        const fields = ['WITHIN-NCR', 'WITHIN-CITY', 'WITHIN-STATE', 'WITHIN-ZONE', 'WITHIN-METRO', 'WITHIN-SPECIAL-ZONE', 'ROI'];
                        key = fields[i] || `col${i}`;
                      }

                      values[key] = input.value;
                    });
                    rows.push({ type, values });
                  });
                }
                slabs.push({
                  label: slabLabel,
                  rows
                });
              });
              console.log('Collected slabs for', f.name, slabs); // <--- Add this for debugging
              let mode = "Air";
              if (f.id === 'ground-express-form') {
                mode = "Surface";
              }

              // Get volumetric safety factor for each form
              let volumetricSafetyFactor = '';
              if (f.id === 'priority-form') {
                volumetricSafetyFactor = document.getElementById('volumetric_safety_factor-priority')?.value || '';
              } else if (f.id === 'premium-form') {
                volumetricSafetyFactor = document.getElementById('volumetric_safety_factor-b2c-premium')?.value || '';
              } else if (f.id === 'std-exp-a-form') {
                volumetricSafetyFactor = document.getElementById('volumetric_safety_factor-std-exp-a')?.value || '';
              } else if (f.id === 'ground-express-form') {
                volumetricSafetyFactor = document.getElementById('volumetric_safety_factor-ground-express')?.value || '';
              }

              allServiceDetails[f.name] = {
                additionalCharges,
                slabs,
                mode,
                volumetric: document.getElementById('volumetric')?.value || '',
                volumetricSafetyFactor: volumetricSafetyFactor
              };
            });

            // Only append the structured data!
            allFormData.append('allServiceDetails', JSON.stringify(allServiceDetails));
            allFormData.append('basicDetails', JSON.stringify(basicDetails));
            allFormData.append('zoneMappingFile', zoneMappingFileInput.files[0]);

            // Add basicDetails as before


            // Confirmation dialog and axios as before
            Swal.fire({
              title: 'Confirm Submission',
              text: 'Do you want to submit this forwarder onboarding?',
              icon: 'question',
              showCancelButton: true,
              confirmButtonText: 'Yes, Submit',
              cancelButtonText: 'Cancel'
            }).then((result) => {
              if (result.isConfirmed) {
                Swal.fire({
                  title: 'Saving Forwarder...',
                  allowOutsideClick: false,
                  didOpen: () => {
                    Swal.showLoading();
                  }
                });

                axios.post('/api/forwarder/onboard/express', allFormData, {
                  headers: { 'Content-Type': 'multipart/form-data' }
                })
                  .then(response => {
                    Swal.fire({
                      icon: 'success',
                      title: 'Success!',
                      text: response.data.message || 'Forwarder saved successfully!'
                    });
                  })
                  .then(() => {
                    window.location.href = '/forwarder-onboarding';
                  })
                  .catch(error => {
                    console.error('Error saving forwarder:', error);
                    const errorMessage = error.response?.data?.message || 'Error saving Forwarder';
                    Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: errorMessage
                    });
                  });
              }
            });
            return;
          }
          if (!form) {
            Swal.fire({
              icon: 'error',
              title: 'Form Error',
              text: 'Form not found for the selected courier.'
            });
            return;
          }

          formData.append('basicDetails', JSON.stringify(basicDetails));
          logFormData(formData);

          // Add confirmation dialog
          Swal.fire({
            title: 'Confirm Submission',
            text: 'Do you want to submit this forwarder onboarding?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Yes, Submit',
            cancelButtonText: 'Cancel'
          }).then((result) => {
            if (result.isConfirmed) {
              // Show loading state
              Swal.fire({
                title: 'Saving Forwarder...',
                allowOutsideClick: false,
                didOpen: () => {
                  Swal.showLoading();
                }
              });
              let url = '/api/forwarder/onboard/express';

              // read radio value
              const selected = document.querySelector('input[name="chooseAPi"]:checked');
              if (selected && selected.value.trim().toLowerCase() === 'ecom') {
                url = '/api/forwarder/onboard/ecom';
              } else if (selected && selected.value.trim().toLowerCase() === 'express') {
                url = '/api/forwarder/onboard/express';
              }

              axios.post(url, formData, {
                headers: { 'Content-Type': 'multipart/form-data' }
              })
                .then(response => {
                  Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: response.data.message || 'Forwarder saved successfully!'
                  });
                })
                .then(() => {
                  window.location.href = '/forwarder-onboarding';
                })
                .catch(error => {
                  console.error('Error saving forwarder:', error);
                  const errorMessage = error.response?.data?.message || 'Error saving Forwarder';
                  Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: errorMessage
                  });
                });
            }
          });
        });

        document.getElementById('save-button-ltl').addEventListener('click', function () {
          const courierSelect = document.getElementById('courierSelect');
          if (!courierSelect) {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'Courier selection not found!'
            });
            return;
          }
          const selectedCourier = courierSelect.value;
          // Get form values
          const businessVolume = document.getElementById('businessVolume').value;

          // Validate
          if (!businessVolume) {
            Swal.fire({
              icon: 'error',
              title: 'Oops...',
              text: 'Please select business volume!',
            });
            return;
          }

          // Pick the correct LTL form based on courier selection
          let ltlForm = null;
          if (selectedCourier === 'dtdc') {
            ltlForm = document.getElementById('dtdc-ltl-form');
          } else if (selectedCourier === 'delhivery') {
            ltlForm = document.getElementById('delhivery-ltl-form');
          }

          if (!ltlForm) {
            Swal.fire({
              icon: 'error',
              title: 'Form Error',
              text: 'LTL form not found for the selected courier!'
            });
            return;
          }

          // Prepare FormData from the correct form
          const formData = new FormData(ltlForm);
          const additionalCharges = [];

          // Attach files if present (for both couriers)
          // Collect common basic details to send with both couriers
          // Collect chosen data from the form fields
          const basicDetails = {
            businessVolume: document.getElementById('businessVolume')?.value || '',
            courier: document.getElementById('courierSelect')?.value || '',
            shipmentType: document.getElementById('shipmentType')?.value || '',
            chooseAPi: document.querySelector('input[name="chooseAPi"]:checked')?.value || '',
            // Basic Details
            companyAddress: document.getElementById('companyAddress')?.value || '',
            companyCountry: document.getElementById('companyCountry')?.value || '',
            companyState: document.getElementById('companyState')?.value || '',
            companyDistrict: document.getElementById('companyDistrict')?.value || '',
            fromDate: document.getElementById('fromDate')?.value || '',
            fromTo: document.getElementById('fromTo')?.value || '',
            creditTerms: document.getElementById('creditTerms')?.value || '',
            vat: document.getElementById('vat')?.value || '',
            company_uin: document.getElementById('company_uin')?.value || '',
            // Courier KYC Details
            company_pan: document.getElementById('company_pan')?.value || '',
            gstNo: document.getElementById('gstNo')?.value || '',
            Bank_account_name: document.getElementById('Bank_account_name')?.value || '',
            billingCycle: document.getElementById('billingCycle')?.value || '',
            accountNumber: document.getElementById('accountNumber')?.value || '',
            account_type: document.getElementById('account_type')?.value || '',
            chooseBank: document.getElementById('chooseBank')?.value || '',
            ifscCode: document.getElementById('ifscCode')?.value || ''
          };
          // Add more fields as needed

          if (selectedCourier === 'dtdc') {
            const dtdcRateFileInput = document.getElementById('rateExcelFile-dtdc-ltl');
            if (dtdcRateFileInput && dtdcRateFileInput.files.length > 0) {
              formData.append('ltlformdata[ltl]', dtdcRateFileInput.files[0]);
            }
            const dtdcZoneFileInput = document.getElementById('zoneExcelFile-dtdc-ltl');
            if (dtdcZoneFileInput && dtdcZoneFileInput.files.length > 0) {
              formData.append('ltlformdata[zone]', dtdcZoneFileInput.files[0]);
            }
            document.querySelectorAll('#additionalChargesContainer-dtdc-ltl .additional-charge-row').forEach(row => {
              additionalCharges.push({
                chargeName: row.querySelector('.charge-type-select').value,
                minCharge: row.querySelector('.min-charge-select').value,
                minValue: row.querySelector('.min-value-input').value,
                maxCharge: row.querySelector('.max-charge-select').value,
                maxValue: row.querySelector('.max-value-input').value,
                condition: row.querySelector('.condition-select').value,
                conditionalCharges: row.querySelector('.condition-select').value === 'or'
                  ? row.querySelector('.conditional-charges select').value
                  : undefined,
              });
            });
          } else if (selectedCourier === 'delhivery') {
            const delhiveryRateFileInput = document.getElementById('rateExcelFile-delhivery-ltl');
            if (delhiveryRateFileInput && delhiveryRateFileInput.files.length > 0) {
              formData.append('ltlformdata[ltl]', delhiveryRateFileInput.files[0]);
            }
            const delhiveryZoneFileInput = document.getElementById('zoneExcelFile-delhivery-ltl');
            if (delhiveryZoneFileInput && delhiveryZoneFileInput.files.length > 0) {
              formData.append('ltlformdata[zone]', delhiveryZoneFileInput.files[0]);
            }
            document.querySelectorAll('#additionalChargesContainer-delhivery-ltl .additional-charge-row').forEach(row => {
              additionalCharges.push({
                chargeName: row.querySelector('.charge-type-select').value,
                minCharge: row.querySelector('.min-charge-select').value,
                minValue: row.querySelector('.min-value-input').value,
                maxCharge: row.querySelector('.max-charge-select').value,
                maxValue: row.querySelector('.max-value-input').value,
                condition: row.querySelector('.condition-select').value,
                conditionalCharges: row.querySelector('.condition-select').value === 'or'
                  ? row.querySelector('.conditional-charges select').value
                  : undefined,
              });
            });
          }


          // Attach the basic details object as a JSON string
          formData.append('basicDetails', JSON.stringify(basicDetails));
          formData.append('additionalCharges', JSON.stringify(additionalCharges));
          console.log("basicDetails", basicDetails);
          console.log("additionalCharges", additionalCharges);
          logFormData(formData);

          // Add confirmation dialog
          Swal.fire({
            title: 'Confirm Submission',
            text: 'Do you want to submit this LTL forwarder onboarding?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Yes, Submit',
            cancelButtonText: 'Cancel'
          }).then((result) => {
            if (result.isConfirmed) {
              // Show loading state
              Swal.fire({
                title: 'Saving LTL Forwarder...',
                allowOutsideClick: false,
                didOpen: () => {
                  Swal.showLoading();
                }
              });

              axios.post('/api/forwarder/onboard/ltl', formData, {
                headers: { 'Content-Type': 'multipart/form-data' }
              })
                .then(response => {
                  Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: response.data.message || 'LTL Forwarder saved successfully!',
                    timer: 2000,
                    timerProgressBar: true,
                    showConfirmButton: false
                  }).then(() => {
                    window.location.href = '/forwarder-onboarding';
                  });
                })
                .catch(error => {
                  console.error('Error saving LTL forwarder:', error);
                  const errorMessage = error.response?.data?.message || 'Error saving LTL Forwarder';
                  Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: errorMessage
                  });
                });
            }
          });
        });
      </script>

      <script>
        function formHasData(form) {
          if (!form) return false;
          const inputs = form.querySelectorAll('input, select, textarea');
          for (let input of inputs) {
            if (
              (input.type === 'checkbox' || input.type === 'radio') ? input.checked :
                input.value && input.value.trim() !== ''
            ) {
              return true;
            }
          }
          // Also check for any additional charge rows or slabs
          if (form.querySelector('.additional-charge-row') || form.querySelector('.tab-pane .table-card:not(.d-none)')) {
            return true;
          }
          return false;
        }
      </script>
      <script>
        document.addEventListener('DOMContentLoaded', function () {
          // Radios
          const radios = Array.from(document.querySelectorAll('input[name="chooseAPi"]'));

          // Step 2 groups + selects
          const groupBV = document.getElementById('group-business-volume');
          const groupEcom = document.getElementById('group-monthly-parcels');
          const selBV = document.getElementById('businessVolume');      // plan_id
          const selEcom = document.getElementById('stepMonthlyParcels');  // monthly_parcels

          // Optional: Step 2 title
          const step2Title = document.querySelector('[data-step2-title]');

          function setVis(el, visible) {
            el.style.display = visible ? '' : 'none';
          }
          function setActive(selectEl, active) {
            selectEl.required = active;
            selectEl.disabled = !active;
            if (!active) selectEl.value = '';
          }

          function updateStep2UI(segment) {
            if (segment === 'ecom') {
              setVis(groupEcom, true);
              setVis(groupBV, false);
              setActive(selEcom, true);
              setActive(selBV, false);
              if (step2Title) step2Title.textContent = 'Step 2: Select Shipments / Month';
            } else if (segment === 'standard' || segment === 'ltl') {
              setVis(groupEcom, false);
              setVis(groupBV, true);
              setActive(selEcom, false);
              setActive(selBV, true);
              if (step2Title) step2Title.textContent = 'Step 2: Select Business Volume';
            } else {
              // none selected
              setVis(groupEcom, false);
              setVis(groupBV, false);
              setActive(selEcom, false);
              setActive(selBV, false);
              if (step2Title) step2Title.textContent = 'Step 2: Select Business Volume / Shipments';
            }
          }

          // Bind all radios
          radios.forEach(r => {
            r.addEventListener('change', () => {
              if (r.checked) updateStep2UI(r.value); // values: "standard" | "ecom" | "ltl"
            });
          });

          // Initialize on load (if anything pre-selected)
          const pre = radios.find(r => r.checked);
          updateStep2UI(pre ? pre.value : '');
        });
      </script>