<!DOCTYPE html>
<html lang="hi">

    <head>
        <%- include('../partials/head') %>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Dashboard</title>

        <!-- Add all the styles from order.html -->
        <style>

  .form-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 20px;
  }
  
  .form-group {
    margin-bottom: 15px;
  }
  
  .form-group.full-width {
    grid-column: 1 / -1;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--dark);
    background: none;
    padding: 0;
  }
  
  .form-group label:hover {
    background: none;
    color: var(--dark);
  }
  
  .form-group input,
  .form-group textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
    transition: border-color 0.3s;
  }
  
  .form-group input:focus,
  .form-group textarea:focus {
    border-color: var(--primary);
    outline: none;
  }
  
  .form-group textarea {
    min-height: 100px;
    resize: vertical;
  }
  
  .form-group input::placeholder,
  .form-group textarea::placeholder {
    color: #999;
  }
  
      :root {
        --primary: rgb(42, 127, 255);
        --dark: #1c1f26;
        --mid: #2d4875;
        --light: #ffffff;
        --accent: #d0e4ff;
      }
  
      body {
        margin: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: var(--light);
      }
  
      .main {
     
        margin: 40px auto;
    display: flex
;
    background: var(--light);
    border-radius: 12px;
  
    overflow: hidden;
    padding: 30px 40px;
      }
  
      .sidebar {
        width: 300px;
    background-color: #153464;
    color: var(--light);
    padding: 30px 20px;
    border-radius: 30px;
}
 
  
      .sidebar h2 {
        font-size: 18px;
        margin-bottom: 30px;
        border-bottom: 1px solid #4669a2;
        padding-bottom: 10px;
      }
  
      .summary-timeline {
        position: relative;
    padding-left: 30px;
    border-left: 3px dotted #feff10;
      }
  
      .timeline-step {
        position: relative;
        margin-bottom: 30px;
      }
      label {
    display: block;
    margin-bottom: 10px;
    padding: 12px;
    background: none !important;
    border-radius: 8px;
    cursor: pointer;
    transition: 0.3s;
}
  .labeler {
    display: block;
    margin-bottom: 10px;
    padding: 12px;
    background: #cce4fd;
    border-radius: 8px;
    cursor: pointer;
    transition: 0.3s;
    width: 25%;
    font-size: large;
}
      .timeline-step::before {
        content: '';
    position: absolute;
    left: -41px;
    top: 0px;
    width: 18px;
    height: 18px;
    background-color: #701aff;
    border: 2px solid #fff50b;
    border-radius: 50%;
    z-index: 1;
      }
  
      .step-title {
        font-weight: bold;
    font-size: 16px;
    display: flex
;
    align-items: center;
    color: #ffffff;
    text-transform: capitalize;
}
   
  
      .step-title i {
        margin-right: 8px;
        color: #d8e8ff;
      }
  
      .step-content {
        margin-top: 6px;
    font-size: 12px;
    color: #ffffff;
    margin-left: 26px;
    font-weight: 500;
    text-transform: uppercase;
      }
  
      .form-area {
        flex: 1;
    padding: 30px 40px;
    display: flex
;
    flex-direction: column;
    /* background: #fbfcff; */
    box-shadow: rgba(0, 0, 0, 0.15) .5px 2.4px 2.4px 3.2px;
    border-radius: 20px 0px 0px 20px;
      }
  
      .form-header {
        text-align: center;
        margin-bottom: 30px;
      }
  
      .form-header h3 {
        color: #5e5f62;
    font-size: 22px;
    margin: 0;
    text-transform: uppercase;
    text-align: end;
      }
  
      .progress-container {
        height: 10px;
        background: #153464;
        border-radius: 5px;
        overflow: hidden;
        margin-bottom: 30px;
      }
  
      .progress-bar {
        height: 100%;
        width: 0%;
        background-color: rgb(15 191 75);
        transition: width 0.3s ease-in-out;
      }
  
      .form-step {
        display: none;
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
      }
  
      .form-step.active {
        display: block;
        opacity: 1;
      }
  
      h3 {
        color: var(--dark);
        margin-bottom: 20px;
      }
  
      label {
        display: block;
        margin-bottom: 10px;
        padding: 12px;
        background: #fff;
        border-radius: 8px;
        cursor: pointer;
        transition: 0.3s;
      }
  
      label:hover {
        background: none;
        color: #035bff;
      }
  
      input[type="radio"] {
        margin-right: 10px;
      }
  
      .actions {
        margin-top: 30px;
        display: flex;
        justify-content: space-between;
      }
  
      .actions button {
        background: var(--primary);
        color: var(--light);
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }
  
      .actions button:disabled {
        background: #ccc;
      }
  
      .form-footer {
        margin-top: auto;
        text-align: right;
        padding-top: 20px;
      }
  
      #generateOrderBtn {
        background: var(--primary);
        color: white;
        padding: 12px 20px;
        border: none;
        border-radius: 25px;
        font-size: 16px;
        cursor: pointer;
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        display: none;
      }
    </style>
        <style>
      .consignee-form-container {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        /* padding: 2rem; */
       
        border-radius: 12px;
        
      }
      
      .section-title {
        color: #2d3748;
        font-size: 1.1rem;
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #edf2f7;
      }
      
   
      .form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
        margin-bottom: 1rem;
      }
      
      .form-field {
        flex: 1;
        min-width: 280px;
      }
      
      .form-field.full-width {
        flex: 0 0 100%;
      }
      
      .form-field label {
        display: block;
        margin-bottom: 0.75rem;
        font-weight: 500;
        color: #4a5568;
        font-size: 0.95rem;
      }
      
      .required {
        color: #e53e3e;
        margin-left: 4px;
      }
      
      .input-field {
        width: 100%;
        padding: 0.875rem 1rem;
        border: 1.5px solid #e2e8f0;
        border-radius: 8px;
        font-size: 14px;
        transition: all 0.2s ease;
        background: #ffffff;
      }
      
      .input-field:hover {
        border-color: #cbd5e0;
      }
      
      .input-field:focus {
        border-color: #4299e1;
        box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.15);
        outline: none;
      }
      
      .input-field.readonly {
        background-color: #f7fafc;
        cursor: not-allowed;
        color: #718096;
      }
      
      .textarea {
        resize: vertical;
        min-height: 120px;
      }
      
      .pincode-container {
        position: relative;
      }
      
      .loading-indicator {
        display: none;
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #4299e1;
        font-size: 0.9rem;
        background: rgba(255,255,255,0.9);
        padding: 0 8px;
      }
      
      ::placeholder {
        color: #a0aec0;
      }
      </style>
        <style>
     
      .form-section {
        display: flex
;
    flex-direction: column;
    gap: 0;
    background: #e6e7e2;
    padding: 16px;
    box-shadow: rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px;
    border-radius: 20px;
      }
      
      .form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
      }
      
      .form-field {
        flex: 1;
        min-width: 250px;
      }
      
      .form-field.full-width {
        flex: 0 0 100%;
      }
      
      .form-field label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #2d3748;
        font-size: 12px;
      }
      
      
      
      .input-field:focus {
        border-color: #4299e1;
        box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);
        outline: none;
        background: #ffffff;
      }
      
      .textarea {
        resize: vertical;
        min-height: 100px;
      }
      
      .pincode-container {
        position: relative;
      }
      
      .loading-indicator {
        display: none;
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: #4299e1;
        font-size: 0.9rem;
      }
      
      .input-field:disabled,
      .input-field[readonly] {
        background-color: #f7fafc;
        cursor: not-allowed;
      }
      </style>
        <style>
  .swal2-html-container {
    color: #28292a;
    text-transform: capitalize;
}
 
.customcardcontainer{
            background: linear-gradient(135deg, #fdfcfb 0%, #f1faff 100%);
            padding: 10px;
            border-radius: 20px;
        }
/* Basic pagination styling */
.page-item {
  margin: 0 3px;
}

.swal2-html-container {
  display: flex !important;
}

.page-link {
  padding: 6px 12px;
  font-size: 12px;
  border: 1px solid #ddd;
  border-radius: 0px;
  font-weight: 600;
  color: #555;
  background-color: #f7f7f7;
  transition: all 0.3s ease;
}

/* Active page styling */
.page-item.active .page-link {
  background-color: #007bff;
  color: #fff;
  border-color: #007bff;
}

/* Hover effects */
.page-link:hover {
  background-color: #f0f0f0;
  color: #007bff;
  border-color: #007bff;
}

/* Disabled button styling */
.page-item.disabled .page-link {
  color: #aaa;
  background-color: #f7f7f7;
  border-color: #ddd;
  cursor: not-allowed;
}

/* Custom styles for Previous and Next buttons */
.page-item .page-link {
  font-size: 12px;
  font-weight: 600;
  padding: 6px 12px;
  border-radius: 0px;
}

/* Responsive pagination for smaller screens */
@media (max-width: 768px) {
  .page-link {
    font-size: 11px;
    padding: 5px 10px;
  }
  .page-item {
    margin: 0 2px;
  }
}

/* Address list scrollbar styling */
#addressList {
  scrollbar-width: thin;
  scrollbar-color: #cae5ff #f0f0f0;
}

#addressList::-webkit-scrollbar {
  width: 6px;
}

#addressList::-webkit-scrollbar-thumb {
  background-color: #007bff;
  border-radius: 10px;
}

#addressList::-webkit-scrollbar-track {
  background-color: #f0f0f0;
}

/* Page title and form styling */
.page-title-box .page-title {
  font-size: 18px;
  margin: 0;
  color: #ffffff;
}

.form-label {
  margin-bottom: 0.5rem;
  color: #2e2a2a;
  text-transform: uppercase;
  font-weight: 500;
 
}

p {
  line-height: 14px !important;
  font-family: Roboto, sans-serif;
  font-size: 12px;
  font-weight: 400;
}
h5{
  font-size: 14px !important;
}
</style>
    </head>


        <%- include('../partials/header') %>
        <%- include('../partials/left-sidebar') %>
        <%- include('../partials/right-iconbar') %>

        <!-- mani page content body part -->

        <body data-theme="light" class="font-nunito">

            <div id="wrapper" class="theme-cyan">
                <!-- mani page content body part -->
                <!-- Main Content -->
                <div class="main">
                    <div class="sidebar">
                        <h2 style="color: #fff;"><i
                                class="fas fa-shopping-cart"></i> &nbsp;Your
                            Order Summary</h2>
                        <div class="summary-timeline">
                            <div class="timeline-step">
                                <div class="step-title"><i
                                        class="fas fa-shipping-fast"></i>
                                    Shipment</div>
                                <div class="step-content"
                                    id="summary-shipment"></div>
                            </div>
                            <div class="timeline-step">
                                <div class="step-title"><i
                                        class="fas fa-box"></i> Order</div>
                                <div class="step-content"
                                    id="summary-order"></div>
                            </div>
                            <div class="timeline-step">
                                <div class="step-title"><i
                                        class="fas fa-route"></i> Mode</div>
                                <div class="step-content"
                                    id="summary-mode"></div>
                            </div>
                            <div class="timeline-step">
                                <div class="step-title"><i
                                        class="fas fa-boxes"></i> Order
                                    Type</div>
                                <div class="step-content"
                                    id="summary-order-type"></div>
                            </div>
                            <!-- <div class="timeline-step">
        <div class="step-title"><i class="fas fa-map-marker-alt"></i> Processing</div>
        <div class="step-content" id="summary-location"></div>
      </div> -->
                            <!-- Order Details Summary Section -->
                            <div class="timeline-step">
                                <div class="step-title"><i
                                        class="fas fa-file-invoice"></i> Order
                                    Details</div>
                                <div class="step-content"
                                    id="summary-order-details"></div>
                            </div>
                            <!-- Consignee Details Summary Section -->
                            <div class="timeline-step">
                                <div class="step-title"><i
                                        class="fas fa-user"></i> Consignee
                                    Details</div>
                                <div class="step-content"
                                    id="summary-consignee-details"></div>
                            </div>
                        </div>
                    </div>

                    <div class="form-area">
                        <div class="form-header">
                            <div class="actions mb-3">
                                <button type="button" onclick="changeStep(-1)"
                                    id="prevBtn">Previous</button>
                                <button type="button" onclick="changeStep(1)"
                                    id="nextBtn">Next</button>

                                <button type="button" id="generateOrderBtn"
                                    onclick="submitForm()"
                                    style="background: #22690c;">Generate
                                    Order</button>

                            </div>

                            <h3>Order Generation Wizard</h3>
                        </div>
                        <div class="progress-container">
                            <div class="progress-bar" id="progressBar"></div>
                        </div>
                        <div id="wizardForm">
                            <!-- Step 1 -->
                            <div class="form-step active" data-step="1">
                                <h3>Select Shipment Type</h3>
                                <label class="labeler"><input type="radio"
                                        name="shipment_type" value="Domestic"
                                        onchange="nextIfSelected()">
                                    Domestic</label>
                                <label class="labeler"><input type="radio"
                                        name="shipment_type"
                                        value="International"
                                        onchange="showComingSoon('International')">
                                    International <span
                                        class="badge bg-warning text-dark"
                                        style="font-size: 10px;">Coming
                                        Soon</span></label>
                                <label class="labeler"><input type="radio"
                                        name="shipment_type" value="Hyperlocal"
                                        onchange="showComingSoon('Hyperlocal')">
                                    Hyperlocal <span
                                        class="badge bg-warning text-dark"
                                        style="font-size: 10px;">Coming
                                        Soon</span></label>
                            </div>

                            <!-- Step 2 -->
                            <div class="form-step" data-step="2">
                                <h3>Select Order Type</h3>
                                <label class="labeler"><input type="radio"
                                        name="order_type" value="Heavy"
                                        onchange="nextIfSelected(); showAllOrderProcessingOptions(); showAllShipmentModes();">
                                    Heavy</label>
                                <label class="labeler"><input type="radio"
                                        name="order_type" value="Normal"
                                        onchange="nextIfSelected(); showAllOrderProcessingOptions(); showAllShipmentModes();">
                                    Normal</label>
                                <label class="labeler"><input type="radio"
                                        name="order_type" value="E-Com"
                                        onchange="nextIfSelected(); showOnlySingleBoxOption(); showAllShipmentModes();">
                                    E-Com</label>
                                <label class="labeler"><input type="radio"
                                        name="order_type" value="Priority"
                                        onchange="nextIfSelected(); showOnlySingleBoxOption(); showOnlyAirShipmentMode();">
                                    Priority</label>
                            </div>

                            <!-- Step 3 -->
                            <div class="form-step" data-step="3">
                                <h3>Select Shipment Mode</h3>
                                <div id="modeOptions">
                                    <label class="labeler"><input type="radio"
                                            name="shipment_mode" value="Air"
                                            onchange="nextIfSelected()">
                                        Air</label>
                                    <label class="labeler"
                                        id="roadModeOption"><input type="radio"
                                            name="shipment_mode" value="Road"
                                            onchange="nextIfSelected()">
                                        Road</label>
                                    <label class="labeler"
                                        id="trainModeOption"><input type="radio"
                                            name="shipment_mode" value="Train"
                                            onchange="showComingSoon('Train')">
                                        Train <span
                                            class="badge bg-warning text-dark"
                                            style="font-size: 10px;">Coming
                                            Soon</span></label>
                                    <label class="labeler"
                                        id="seaModeOption"><input type="radio"
                                            name="shipment_mode" value="Sea"
                                            onchange="showComingSoon('Sea')">
                                        Sea <span
                                            class="badge bg-warning text-dark"
                                            style="font-size: 10px;">Coming
                                            Soon</span></label>
                                </div>
                            </div>

                            <!-- Step 4 -->
                            <!-- Step 4 -->
                            <div class="form-step" data-step="4">
                                <h3>Select Order Processing Type</h3>
                                <div id="orderProcessingOptions">
                                    <label class="labeler"><input type="radio"
                                            name="dispatch_location"
                                            value="Single"
                                            onchange="handleOrderTypeSelection()">
                                        Single Box Order</label>
                                    <label class="labeler"
                                        id="multipleBoxOption"><input
                                            type="radio"
                                            name="dispatch_location"
                                            value="Multiple"
                                            onchange="handleOrderTypeSelection()">
                                        Multiple Box Order</label>
                                </div>
                            </div>

                            <!-- Step 5 - Consignee Details -->
                            <div class="form-step" data-step="5">
                                <!-- Single Order Form -->
                                <div id="singleOrderForm"
                                    style="display: none;">
                                    <form id="forming">
                                        <h3>Single Order Details</h3>
                                        <div class="consignee-form-container">
                                            <!-- Order Details Section -->
                                            <div class="form-section">
                                                <h4 class="section-title">
                                                    <i
                                                        class="fas fa-file-invoice"
                                                        style="font-size: 18px; color: #5a99f7; margin-right: 10px;"></i>
                                                    Order Details
                                                </h4>
                                                <div class="form-row">
                                                    <div class="form-field">
                                                        <label for="orderid"
                                                            class="form-label">ORDER.ID<span
                                                                class="required">*</span></label>
                                                        <input type="text"
                                                            id="orderid"
                                                            name="orderid"
                                                            class="input-field orderid"
                                                            required>
                                                        <button id="autoOrderId"
                                                            type="button"
                                                            class="btn"
                                                            style="border: none; font-size: 9px;">
                                                            <i
                                                                class="ti ti-plus menu-icon"></i>&nbsp;Auto-Generate
                                                            OrderId
                                                        </button>
                                                    </div>
                                                    <div class="form-field">
                                                        <label for="wpid"
                                                            class="form-label ">PO.NO<span
                                                                class="required">*</span></label>
                                                        <input type="text"
                                                            id="wpid"
                                                            name="wpid[]"
                                                            class="input-field wpid-id"
                                                            required>
                                                        <button type="button"
                                                            id="firstPID"
                                                            class="btn"
                                                            style="border: none; font-size: 9px;">
                                                            <i
                                                                class="ti ti-plus menu-icon"></i>&nbsp;
                                                            Auto-Generate PO.No
                                                        </button>
                                                    </div>
                                                </div>

                                                <div class="form-row">
                                                    <div class="form-field">
                                                        <label for="order_date"
                                                            class="form-label">Order
                                                            Date<span
                                                                class="required">*</span></label>
                                                        <input type="date"
                                                            id="order_date"
                                                            name="orderDate"
                                                            class="input-field"
                                                            required>
                                                    </div>
                                                    <div class="form-field">
                                                        <label for="paymentType"
                                                            class="form-label">Choose
                                                            Payment Type<span
                                                                class="required">*</span></label>
                                                        <select id="paymentType"
                                                            name="paymentType"
                                                            class="input-field"
                                                            required>
                                                            <option
                                                                value="prepaid">Pre-Paid</option>
                                                            <option
                                                                value="cod">COD</option>
                                                            <option
                                                                value="check-on-delivery">Cheque
                                                                On
                                                                Delivery</option>
                                                        </select>
                                                    </div>
                                                </div>

                                                <div class="form-row">
                                                    <div class="form-field">
                                                        <label for="InvoiceNO"
                                                            class="form-label">Invoice
                                                            NO</label>
                                                        <input type="text"
                                                            id="InvoiceNO"
                                                            name="InvoiceNO"
                                                            class="input-field"
                                                            placeholder="Invoice NO">
                                                    </div>
                                                    <div class="form-field">
                                                        <label
                                                            for="InvoiceAmount"
                                                            class="form-label">Invoice
                                                            Amount</label>
                                                        <input type="number"
                                                            id="InvoiceAmount"
                                                            name="InvoiceAmount"
                                                            class="input-field"
                                                            placeholder="Invoice Amount">
                                                    </div>
                                                    <div class="form-field">
                                                        <label for="FODAmount"
                                                            class="form-label">FOD
                                                            Amount</label>
                                                        <input type="number"
                                                            id="FODAmount"
                                                            name="FODAmount"
                                                            class="input-field"
                                                            placeholder="FOD Amount">
                                                    </div>
                                                </div>

                                                <div class="form-row">
                                                    <div
                                                        class="form-field codAmount"
                                                        style="display: none;">
                                                        <label for="amount_cash"
                                                            class="form-label">COD
                                                            Amount</label>
                                                        <input type="number"
                                                            id="amount_cash"
                                                            name="cod_amount"
                                                            class="input-field"
                                                            placeholder="Enter amount">
                                                    </div>
                                                    <div
                                                        class="form-field checkDetails"
                                                        style="display: none;">
                                                        <label for="checkFavour"
                                                            class="form-label">Check
                                                            Favour Of</label>
                                                        <input type="text"
                                                            id="checkFavour"
                                                            name="check_favour"
                                                            class="input-field"
                                                            placeholder="Enter name">
                                                    </div>
                                                    <div
                                                        class="form-field divCheckAmount"
                                                        style="display: none;">
                                                        <label for="checkAmount"
                                                            class="form-label">Check
                                                            Amount</label>
                                                        <input type="number"
                                                            id="checkAmount"
                                                            name="check_amount"
                                                            class="input-field"
                                                            placeholder="Enter amount">
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Product Details Section -->
                                            <div class="form-section">
                                                <h4 class="section-title">
                                                    <i class="fa-solid fa-gift"
                                                        style="font-size: 18px; color: #5a99f7; margin-right: 10px;"></i>
                                                    Product Details
                                                </h4>

                                                <div class="product-container">
                                                    <!-- Initial Product Section -->
                                                    <div
                                                        class="product-section">
                                                        <div class="form-row"
                                                            style="justify-content: flex-end;">
                                                            <button
                                                                type="button"
                                                                class="btn"
                                                                onclick="addProduct(this)"
                                                                style="border: none;font-size: 14px;color: #22690c;font-weight: 700;">
                                                                <i
                                                                    class="ti ti-plus menu-icon"></i>&nbsp;
                                                                Add Product
                                                            </button>
                                                        </div>

                                                        <div class="form-row">
                                                            <div
                                                                class="form-field">
                                                                <label
                                                                    for="product_name">Product
                                                                    Name<span
                                                                        class="required">*</span></label>
                                                                <input
                                                                    type="text"
                                                                    name="product_name[]"
                                                                    class="input-field"
                                                                    placeholder="Enter product name"
                                                                    required>
                                                            </div>
                                                            <div
                                                                class="form-field">
                                                                <label
                                                                    for="Category">Category</label>
                                                                <select
                                                                    name="Category[]"
                                                                    class="input-field">
                                                                    <option
                                                                        value="No selection"
                                                                        selected>Select
                                                                        category</option>
                                                                    <%
                                                                    commodities.forEach(commodity
                                                                    => { %>
                                                                    <option
                                                                        value="<%= commodity.COMMODITY_NAME %>"><%=
                                                                        commodity.COMMODITY_NAME
                                                                        %></option>
                                                                    <% }); %>
                                                                </select>
                                                            </div>
                                                        </div>

                                                        <div class="form-row">
                                                            <div
                                                                class="form-field">
                                                                <label
                                                                    for="Quantity">Quantity<span
                                                                        class="required">*</span></label>
                                                                <input
                                                                    type="number"
                                                                    name="Quantity[]"
                                                                    class="input-field"
                                                                    placeholder="Enter Quantity"
                                                                    required>
                                                            </div>
                                                            <div
                                                                class="form-field">
                                                                <label
                                                                    for="order_value">Order
                                                                    Value<span
                                                                        class="required">*</span></label>
                                                                <input
                                                                    type="number"
                                                                    name="order_value[]"
                                                                    class="input-field"
                                                                    placeholder="Enter order value"
                                                                    required>
                                                            </div>
                                                            <div
                                                                class="form-field">
                                                                <label
                                                                    for="hsn_id">HSN
                                                                    ID</label>
                                                                <input
                                                                    type="text"
                                                                    name="hsn_id[]"
                                                                    class="input-field"
                                                                    placeholder="Enter HSN ID">
                                                            </div>
                                                        </div>
                                                        <div class="form-row"
                                                            id="ecomSpecificFields"
                                                            style="display: none;">
                                                            <div
                                                                class="form-field">
                                                                <label
                                                                    for="product_sku">Product
                                                                    SKU<span
                                                                        class="required">*</span></label>
                                                                <input
                                                                    type="text"
                                                                    name="product_sku"
                                                                    class="input-field"
                                                                    placeholder="Enter product SKU"
                                                                    required>
                                                            </div>
                                                            <div
                                                                class="form-field">
                                                                <label
                                                                    for="channel">Channel</label>
                                                                <select
                                                                    name="channel"
                                                                    class="input-field">
                                                                    <option
                                                                        value="No selection"
                                                                        selected>Select
                                                                        channel</option>

                                                                    <option
                                                                        value="Amazon">Amazon</option>
                                                                    <option
                                                                        value="Shopify">Shopify</option>
                                                                    <option
                                                                        value="Wordpress">Wordpress</option>
                                                                    <option
                                                                        value="Meesho">Meesho</option>
                                                                    <option
                                                                        value="Flipkart">Flipkart</option>
                                                                    <option
                                                                        value="Myntra">Myntra</option>
                                                                    <option
                                                                        value="Ajio">Ajio</option>
                                                                    <option
                                                                        value="TataCliq">TataCliq</option>
                                                                    <option
                                                                        value="Others">Others</option>

                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Product Weight & Dimensions Section -->
                                            <div class="form-section">
                                                <h4 class="section-title">
                                                    <i
                                                        class="fa-solid fa-ruler-combined"
                                                        style="font-size: 18px; color: #5a99f7; margin-right: 10px;"></i>
                                                    Product Weight & Dimensions
                                                </h4>

                                                <div class="box-container">
                                                    <div class="form-row"
                                                        style="justify-content: flex-end;">
                                                        <button type="button"
                                                            class="btn"
                                                            onclick="addBox(this)"
                                                            id="addMoreBoxBtn"
                                                            style="border: none;font-size: 14px;color: #22690c;font-weight: 700;">
                                                            <i
                                                                class="ti ti-plus menu-icon"></i>&nbsp;
                                                            Add Box
                                                        </button>
                                                    </div>

                                                    <div class="form-row">
                                                        <div class="form-field">
                                                            <label
                                                                for="weight">Total
                                                                Weight <i
                                                                    class="fa-solid fa-circle-info"></i></label>
                                                            <input type="number"
                                                                name="weight_box[]"
                                                                class="input-field"
                                                                required>
                                                        </div>
                                                        <div class="form-field">
                                                            <label
                                                                class="chooseDimensionUnit">Choose
                                                                Weight Unit<span
                                                                    class="required">*</span></label>
                                                            <select
                                                                name="weight-unit-select"
                                                                class="input-field weight-unit-select">
                                                                <option
                                                                    value>Select
                                                                    weight unit
                                                                    type</option>
                                                                <option
                                                                    value="kg">KG</option>
                                                                <option
                                                                    value="gm">Gram</option>
                                                            </select>
                                                        </div>
                                                        <div class="form-field">
                                                            <label
                                                                class="chooseDimensionUnit">Choose
                                                                Dimension
                                                                Unit<span
                                                                    class="required">*</span></label>
                                                            <select
                                                                name="unit-select"
                                                                class="input-field unit-select"
                                                                onchange="updatePlaceholders(this)">
                                                                <option
                                                                    value>Select
                                                                    Dimension
                                                                    Unit
                                                                    type</option>
                                                                <option
                                                                    value="cm">cm.
                                                                    (Centimeter)</option>
                                                                <option
                                                                    value="feet">ft.
                                                                    (Feet)</option>
                                                                <option
                                                                    value="inches">in.(Inches)</option>
                                                            </select>
                                                        </div>
                                                    </div>

                                                    <div class="box-entry">
                                                        <div class="form-row">
                                                            <div
                                                                class="form-field">
                                                                <label
                                                                    for="Quantity_box">Quantity
                                                                    of
                                                                    boxes</label>
                                                                <input
                                                                    type="number"
                                                                    name="Quantity_box[]"
                                                                    class="input-field"
                                                                    required>
                                                            </div>
                                                            <div
                                                                class="form-field">
                                                                <label
                                                                    for="Length">Length<span
                                                                        class="required">*</span></label>
                                                                <input
                                                                    type="number"
                                                                    name="Length[]"
                                                                    class="input-field"
                                                                    required>
                                                            </div>
                                                            <div
                                                                class="form-field">
                                                                <label
                                                                    for="Breadth">Breadth<span
                                                                        class="required">*</span></label>
                                                                <input
                                                                    type="number"
                                                                    name="Breadth[]"
                                                                    class="input-field"
                                                                    required>
                                                            </div>
                                                            <div
                                                                class="form-field">
                                                                <label
                                                                    for="Height">Height<span
                                                                        class="required">*</span></label>
                                                                <input
                                                                    type="number"
                                                                    name="Height[]"
                                                                    class="input-field w-50"
                                                                    required>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>

                                <!-- Multiple Order Form -->
                                <form id="multipleOrder">
                                    <div id="multipleOrderForm"
                                        style="display: none;">
                                        <h3>Multiple Order Details</h3>

                                        <div class="form-section">
                                            <h4 class="section-title">Order
                                                Details</h4>
                                            <div class=" add-wpid-button">
                                                <div style="float: right;">
                                                    <button type="button"
                                                        id="add-wpid-button"
                                                        class="btn btn-primary"
                                                        onclick="addWpid()"
                                                        style="display: block; border-color: #2d8722; background-color: #2d8722; font-size: 12px; font-weight: 600; padding: 7px;">
                                                        Add More Purchase Orders
                                                    </button>
                                                </div>
                                            </div>
                                            <div class="form-row">
                                                <div class="form-field">
                                                    <label for="orderid"
                                                        class="form-label">ORDER.ID<span
                                                            class="required">*</span></label>
                                                    <input type="text"
                                                        id="orderid"
                                                        name="orderid"
                                                        class="input-field orderid"
                                                        required>
                                                    <button id="autoOrderId"
                                                        type="button"
                                                        class="btn"
                                                        style="border: none; font-size: 9px;">
                                                        <i
                                                            class="ti ti-plus menu-icon"></i>&nbsp;Auto-Generate
                                                        OrderId
                                                    </button>
                                                </div>
                                                <div class="form-field">
                                                    <label for="order_date"
                                                        class="form-label">Order
                                                        Date<span
                                                            class="required">*</span></label>
                                                    <input type="date"
                                                        id="order_date"
                                                        name="orderDate"
                                                        class="input-field"
                                                        required>
                                                </div>

                                            </div>
                                        </div>

                                        <div>
                                            <!-- Multiple P.O. row Start -->
                                            <div class=" mt-4 ">
                                                <div id="tab-container"
                                                    class="nav nav-tabs"
                                                    role="tablist" style="
                                  font-size: x-large;
                                  font-weight: 500;
                              ">

                                                    <!-- New tabs will be appended here -->
                                                </div>

                                                <div id="tab-content-container"
                                                    class="tab-content">
                                                    <!-- Tab content will be appended here -->
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                            <!-- Step 6 - Warehouse Details -->
                            <form class="form-step " data-step="6">
                                <h3>Consignee & Warehouse Details</h3>
                                <div class="row mb-3"
                                    style="border-radius: 5px;">
                                    <!-- Personal Information Column -->
                                    <div class="col-md-6">
                                        <div class="form-section">
                                            <h4 class="section-title">
                                                <i class="fas fa-user"
                                                    style="font-size: 18px; color: #5a99f7; margin-right: 10px;"></i>
                                                Personal Information
                                            </h4>
                                            <div class="form-row">
                                                <div class="form-field">
                                                    <label
                                                        for="consignee_name">Consignee
                                                        Full Name<span
                                                            class="required">*</span></label>
                                                    <input type="text"
                                                        id="consignee_name"
                                                        name="consignee_name"
                                                        placeholder="Enter consignee name"
                                                        class="input-field"
                                                        required>
                                                </div>
                                                <div class="form-field">
                                                    <label
                                                        for="consignee_phone">Mobile
                                                        No<span
                                                            class="required">*</span></label>
                                                    <input type="tel"
                                                        id="consignee_phone"
                                                        name="consignee_phone"
                                                        placeholder="Enter consignee number"
                                                        pattern="[0-9]{10}"
                                                        title="Please enter a 10-digit mobile number"
                                                        class="input-field"
                                                        onblur="handlePhoneBlur()"
                                                        oninput="validatePhoneInput(this)"
                                                        maxlength="10"
                                                        required>
                                                    <small id="mobileHelp"
                                                        class="form-text text-danger"
                                                        style="display: none;">
                                                        Please enter a valid
                                                        10-digit mobile number
                                                        starting with 6, 7, 8,
                                                        or 9.
                                                    </small>
                                                </div>
                                                <div class="form-field">
                                                    <label
                                                        for="alternate_mobile">Alternate
                                                        Mobile No <span
                                                            class="required">*</span></label>
                                                    <input type="tel"
                                                        id="alternate_mobile"
                                                        name="alternate_mobile"
                                                        pattern="[0-9]{10}"
                                                        placeholder="Enter alternate mobile number"
                                                        class="input-field"
                                                        oninput="alternateValidatePhoneInput(this)"
                                                        maxlength="10"
                                                        required>
                                                    <small
                                                        id="alternateMobileHelp"
                                                        class="form-text text-danger"
                                                        style="display: none;">
                                                        Please enter a valid
                                                        10-digit mobile number
                                                        starting with 6, 7, 8,
                                                        or 9.
                                                    </small>
                                                </div>
                                                <div class="form-field">
                                                    <label
                                                        for="consignee_email">Email<span
                                                            class="required">*</span></label>
                                                    <input type="email"
                                                        id="consignee_email"
                                                        name="consignee_email"
                                                        placeholder="Enter consignee email"
                                                        class="input-field"
                                                        required>
                                                </div>
                                                <div class="form-field">
                                                    <label
                                                        for="store_code">Store
                                                        Code<span
                                                            class="required">*</span></label>
                                                    <input type="text"
                                                        id="store_code"
                                                        name="store_code"
                                                        placeholder="Enter Store Code"
                                                        class="input-field"
                                                        required>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Address Details Column -->
                                    <div class="col-md-6">
                                        <div class="form-section">
                                            <h4 class="section-title">
                                                <i class="fas fa-map-marker-alt"
                                                    style="font-size: 18px; color: #5a99f7; margin-right: 10px;"></i>
                                                Address Details
                                            </h4>
                                            <div class="form-row">
                                                <div
                                                    class="form-field col-md-6">
                                                    <label
                                                        for="consignee_pincode">Pincode<span
                                                            class="required">*</span></label>
                                                    <div
                                                        class="pincode-container">
                                                        <input type="text"
                                                            id="consignee_pincode"
                                                            name="consignee_pincode"
                                                            placeholder="Enter 6-digit pincode"
                                                            pattern="[0-9]{6}"
                                                            maxlength="6"
                                                            class="input-field"
                                                            onchange="fetchAddressDetails()"
                                                            required>
                                                        <div
                                                            id="pincode-loading"
                                                            class="loading-indicator">
                                                            <i
                                                                class="fas fa-spinner fa-spin"></i>
                                                            Fetching address...
                                                        </div>
                                                    </div>
                                                </div>
                                                <div
                                                    class="form-field col-md-6">
                                                    <label
                                                        for="consignee_state">State<span
                                                            class="required">*</span></label>
                                                    <input type="text"
                                                        id="consignee_state"
                                                        name="consignee_state"
                                                        placeholder="State will be auto-filled"
                                                        class="input-field readonly"
                                                        readonly
                                                        required>
                                                </div>
                                                <div
                                                    class="form-field col-md-6">
                                                    <label
                                                        for="consignee_city">City<span
                                                            class="required">*</span></label>
                                                    <input type="text"
                                                        id="consignee_city"
                                                        name="consignee_city"
                                                        placeholder="City will be auto-filled"
                                                        class="input-field readonly"
                                                        readonly
                                                        required>
                                                </div>
                                                <div
                                                    class="form-field col-md-6">
                                                    <label
                                                        for="consignee_landmark">Nearby
                                                        Landmark<span
                                                            class="required">*</span></label>
                                                    <input type="text"
                                                        id="consignee_landmark"
                                                        name="consignee_landmark"
                                                        placeholder="Enter a nearby landmark for easy identification"
                                                        class="input-field"
                                                        required>
                                                </div>
                                            </div>

                                            <div class="form-row">
                                                <div
                                                    class="form-field col-md-6">
                                                    <label
                                                        for="consignee_address">Complete
                                                        Address<span
                                                            class="required">*</span></label>
                                                    <textarea
                                                        id="consignee_address"
                                                        name="consignee_address"
                                                        placeholder="Enter complete address with locality/area"
                                                        class="input-field textarea"
                                                        rows="3"
                                                        required style="
                width: 92%;
            "></textarea>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div
                                    class="warehouse-section form-section col-md-6">
                                    <div class="row">
                                        <div class="col-sm-6"
                                            style="display: flex; align-items: start;">
                                            <i class="fas fa-warehouse p-2"
                                                style="font-size: 22px; color: #5a99f7; border-radius: 5px;"></i>
                                            <h4 class="section-title mb-4"
                                                style="margin: 0;padding: 8px;width: -webkit-fill-available;">
                                                Select Warehouse</h5>
                                        </div>
                                        <div class="col-md-6">
                                            <div id="totalCards"
                                                style="text-align: right;"></div>
                                        </div>
                                    </div>

                                    <!-- Client Selection for Admin -->
                                    <% if (role_data.role == 1) { %>
                                    <div class="row mb-4">
                                        <div class="col-md-12">
                                            <div class="form-group">
                                                <label for="client_select"
                                                    class="form-label"
                                                    style="font-size: 12px; font-weight: 600;">Select
                                                    Client*</label>
                                                <select
                                                    class="form-control border-custom"
                                                    id="client_select"
                                                    name="client_select"
                                                    required
                                                    style="font-size: 14px;padding: 12px;border-radius: 20px;font-weight: 500;color: #3a3a3a;text-transform: capitalize;">
                                                    <option
                                                        value="select client"
                                                        selected>Select
                                                        client</option>
                                                    <% clients.forEach(client =>
                                                    { %>
                                                    <option
                                                        value="<%= client.id %>"><%=
                                                        client.company_name
                                                        %>/<%= client.id
                                                        %></option>
                                                    <% }) %>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <% } %>

                                    <!-- Search and Filter Section -->
                                    <div class="row mb-4">
                                        <div class="col-md-12">
                                            <div class="search-box">
                                                <input type="text"
                                                    id="searchInput"
                                                    class="form-control"
                                                    placeholder="Search warehouses..."
                                                    style="border-radius: 20px; padding: 10px 15px;">
                                            </div>
                                        </div>

                                    </div>

                                    <!-- Warehouse Cards Container -->
                                    <div class="row">
                                        <div class="col-12">
                                            <div id="modalBody"
                                                class="warehouse-cards"
                                                style="max-height: 400px; overflow-y: auto;display: flex;">
                                                <!-- Warehouse cards will be dynamically loaded here -->
                                                <% if (role_data.role == 1) { %>
                                                <div class="text-center p-4">
                                                    <p>Please select a client to
                                                        view available
                                                        warehouses.</p>
                                                </div>
                                                <% } %>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>

                        </div>
                    </div>
                </div>
                <!-- end of the main content  -->

            </div>
            <%- include('../partials/footer') %>

            <script>
  async function fetchAddressDetails() {
    const pincode = document.getElementById('consignee_pincode').value;
    const loadingIndicator = document.getElementById('pincode-loading');
    const stateInput = document.getElementById('consignee_state');
    const cityInput = document.getElementById('consignee_city');
    const addressField = document.getElementById('consignee_address');
    
    if(pincode.length === 6) {
        loadingIndicator.style.display = 'block';
        
        try {
            const response = await fetch(`https://api.postalpincode.in/pincode/${pincode}`);
            const data = await response.json();
            
            if(data && data[0] && data[0].Status === "Success") {
                const postOffice = data[0].PostOffice[0];
                stateInput.value = postOffice.State;
                cityInput.value = postOffice.District;
                addressField.value = postOffice.Name;
                if(postOffice.Block) {
                    addressField.value += `, ${postOffice.Block}`;
                }
            } else {
                stateInput.value = '';
                cityInput.value = '';
                addressField.value = '';
                alert("Invalid pincode or no data found. Please try again.");
            }
        } catch(error) {
            console.error("Error fetching address details:", error);
            stateInput.value = '';
            cityInput.value = '';
            addressField.value = '';
            alert("Error fetching address details. Please try again later.");
        } finally {
            loadingIndicator.style.display = 'none';
        }
    }
  }
  </script>
            <script>
  document.addEventListener('DOMContentLoaded', function() {
  // Define the generateId function
  function generateId() {
    return 'ORD-' + Math.floor(100000 + Math.random() * 900000).toString();
  }

  // Get all auto order ID buttons
  const autoOrderIdButtons = document.querySelectorAll('#autoOrderId');
  
  // Handle auto-generation for both forms using closest parent form
  autoOrderIdButtons.forEach(button => {
    button.addEventListener('click', function() {
      const orderId = generateId();
      
      // Find the parent form container
      const parentForm = this.closest('#singleOrderForm, #multipleOrderForm');
      
      // Find the order ID input within that specific form
      if (parentForm) {
        const orderIdInput = parentForm.querySelector('.orderid');
        if (orderIdInput) {
          orderIdInput.value = orderId;
        }
      }
    });
  });

  // Handle PO number generation
  document.getElementById('firstPID').addEventListener('click', function() {
    const wpidInput = document.querySelector('.wpid-id');
    wpidInput.value = generateRandomPoid();
  });

  function generateRandomPoid() {
    return 'PONO' + Math.floor(Math.random() * 1000000);
  }

  // Auto-generate WPID for multiple orders
  window.autoGenerateWpid = function(button) {
    const wpidInput = button.closest('.col-sm-2').querySelector('.wpid-id');
    wpidInput.value = generateRandomPoid();
  }
});
</script>

            <!-- pura naya wal hi hai -->
            <script>

  let currentStep = 0;
  let roledata = "<%= role_data.role %>";
  const steps = document.querySelectorAll(".form-step");
  const progressBar = document.getElementById("progressBar");
  
  const shipmentSummary = document.getElementById("summary-shipment");
  const orderSummary = document.getElementById("summary-order");
  const modeSummary = document.getElementById("summary-mode");
  // const locationSummary = document.getElementById("summary-location");
  const consigneeSummary = document.getElementById("summary-consignee");
  
  const generateOrderBtn = document.getElementById("generateOrderBtn");
  
  // Define fetchWarehouseData function first
  async function fetchWarehouseData(clientId) {
    try {
      const modalBody = document.getElementById('modalBody');
      const totalCardsElement = document.getElementById('totalCards');
      
      // Show loading state
      modalBody.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Loading warehouses...</div>';
      
      const response = await fetch(`/get_warehouse_addresses?clientId=${clientId}`);
      const data = await response.json();
      
      if (data && data.filteredAddresses && data.filteredAddresses.length > 0) {
        // Update total count
        totalCardsElement.innerHTML = `Available Warehouses: <span class="badge bg-primary">${data.totalItems}</span>`;
        
        // Generate warehouse cards
        modalBody.innerHTML = '';
        data.filteredAddresses.forEach(warehouse => {
          const card = `
            <div class="warehouse-card mb-3 w-50">
              <div class="card">
                <div class="card-header" style="background: linear-gradient(51deg, #2d4c7e,#5a99f7);">
                  <h5 class="card-title" style="color: white; margin: 0; font-weight: 600; font-size: 1.2rem;">
                    ${warehouse.warehouse_name}
                    <span class="badge bg-light text-dark float-end">W-ID: ${warehouse.serial}</span>
                  </h5>
                </div>
                <div class="card-body">
                  <div class="info-group" style="margin-bottom: 1.25rem;">
                    <div class="info-item" style="padding:8px; background: #f8f9fa; border-radius: 8px; margin-bottom: 10px;">
                      <p style="margin: 0; line-height: 1.6; color: #333;">
                        <i class="fas fa-map-marker-alt" style="color: #5a99f7; margin-right: 8px;"></i>
                        <strong>Address:</strong> 
                        <span style="color: #666; text-transform: capitalize;">${warehouse.warehouse_address}, ${warehouse.warehouse_city}, ${warehouse.warehouse_state}, ${warehouse.warehouse_pincode}</span>
                      </p>
                    </div>
                    
                    <div class="info-item" style="padding:8px; background: #f8f9fa; border-radius: 8px; margin-bottom: 10px;">
                      <p style="margin: 0; line-height: 1.6; color: #333;">
                        <i class="fas fa-envelope" style="color: #5a99f7; margin-right: 8px;"></i>
                        <strong>Email:</strong>
                        <span style="color: #666;">${warehouse.warehouse_contact_email_person}</span>
                      </p>
                    </div>
                    
                    <div class="info-item" style="padding:8px; background: #f8f9fa; border-radius: 8px; margin-bottom: 10px;">
                      <p style="margin: 0; line-height: 1.6; color: #333;">
                        <i class="fas fa-user" style="color: #5a99f7; margin-right: 8px;"></i>
                        <strong>Contact Person:</strong>
                        <span style="color: #666; text-transform: capitalize;">${warehouse.warehouse_person}</span>
                      </p>
                    </div>
                    
                    <div class="info-item" style="padding:8px; background: #f8f9fa; border-radius: 8px; margin-bottom: 10px;">
                      <p style="margin: 0; line-height: 1.6; color: #333;">
                        <i class="fas fa-phone" style="color: #5a99f7; margin-right: 8px;"></i>
                        <strong>Contact:</strong>
                        <span style="color: #666;">${warehouse.warehouse_contact_person}</span>
                      </p>
                    </div>
                    
                    <div class="info-item" style="padding:8px; background: #f8f9fa; border-radius: 8px; margin-bottom: 10px;">
                      <p style="margin: 0; line-height: 1.6; color: #333;">
                        <i class="fas fa-clock" style="color: #5a99f7; margin-right: 8px;"></i>
                        <strong>Working Hours:</strong>
                        <span style="color: #666;">${warehouse.working_hours_from} to ${warehouse.working_hours_to}</span>
                      </p>
                    </div>
                    
                    <div class="info-item" style="padding:8px; background: #f8f9fa; border-radius: 8px;">
                      <p style="margin: 0; line-height: 1.6; color: #333;">
                        <i class="fas fa-calendar-alt" style="color: #5a99f7; margin-right: 8px;"></i>
                        <strong>Working Days:</strong>
                        <span style="color: #666;">${warehouse.working_days}</span>
                      </p>
                    </div>
                  </div>
                  
                   <button type="button" class="btn btn-primary select-btn w-100" data-id="${warehouse.serial}">
                    <i class="fas fa-check-circle"></i> Select Warehouse
                  </button>
                </div>
              </div>
            </div>
          `;
          modalBody.innerHTML += card;
        });

        // Add click event listeners to warehouse cards
        const cards = document.querySelectorAll('.warehouse-card');
        cards.forEach(card => {
          card.addEventListener('click', function() {
            // Remove highlight from all cards
            cards.forEach(c => {
              c.style.border = '1px solid #eaf0f9';
              c.style.transform = 'scale(1)';
            });
            
            // Add highlight to clicked card
            this.style.border = '2px solid #5a99f7';
            this.style.transform = 'scale(1.02)';
          });
        });
      } else {
        modalBody.innerHTML = '<div class="text-center p-4"><p>No warehouses found for this client.</p></div>';
        totalCardsElement.innerHTML = '';
      }
    } catch (error) {
      console.error('Error fetching warehouses:', error);
      modalBody.innerHTML = '<div class="text-center p-4"><p>Error loading warehouses. Please try again.</p></div>';
    }
  }
  
  function handleOrderTypeSelection() {
    const selectedValue = document.querySelector('input[name="dispatch_location"]:checked').value;
    const singleOrderForm = document.getElementById('singleOrderForm');
    const multipleOrderForm = document.getElementById('multipleOrderForm');
    const warehouseSection = document.querySelector('.warehouse-section');
    
    // Update sidebar with selected order type
    const orderTypeSummary = document.getElementById('summary-order-type');
    if (orderTypeSummary) {
        orderTypeSummary.innerHTML = `${selectedValue} Order`;
    }
    
    // Set up real-time order details updates in sidebar
    setupSidebarUpdates(selectedValue);
    
    // Hide both forms initially
    singleOrderForm.style.display = 'none';
    multipleOrderForm.style.display = 'none';
    
    // Reset forms when switching
    function resetSingleOrderForm() {
        // Reset all input fields
        singleOrderForm.querySelectorAll('input').forEach(input => {
            if (input.type !== 'radio') {
                input.value = '';
            }
        });
        
        // Reset all select fields
        singleOrderForm.querySelectorAll('select').forEach(select => {
            select.selectedIndex = 0;
        });
        
        // Reset all textarea fields
        singleOrderForm.querySelectorAll('textarea').forEach(textarea => {
            textarea.value = '';
        });
        
        // Remove additional product sections except the first one
        const productContainer = singleOrderForm.querySelector('.product-container');
        const productSections = productContainer.querySelectorAll('.product-section');
        for (let i = 1; i < productSections.length; i++) {
            productSections[i].remove();
        }
        
        // Remove additional box sections except the first one
        const boxContainer = singleOrderForm.querySelector('.box-container');
        const boxEntries = boxContainer.querySelectorAll('.box-entry');
        for (let i = 1; i < boxEntries.length; i++) {
            boxEntries[i].remove();
        }
    }
    
    function resetMultipleOrderForm() {
        // Reset all input fields
        multipleOrderForm.querySelectorAll('input').forEach(input => {
            if (input.type !== 'radio') {
                input.value = '';
            }
        });
        
        // Reset all select fields
        multipleOrderForm.querySelectorAll('select').forEach(select => {
            select.selectedIndex = 0;
        });
        
        // Reset all textarea fields
        multipleOrderForm.querySelectorAll('textarea').forEach(textarea => {
            textarea.value = '';
        });
        
        // Remove all tabs except the first one
        const tabContainer = document.getElementById('tab-container');
        const tabContentContainer = document.getElementById('tab-content-container');
        
        // Keep only the first tab
        while (tabContainer.children.length > 1) {
            tabContainer.removeChild(tabContainer.lastChild);
        }
        
        // Keep only the first tab content
        while (tabContentContainer.children.length > 1) {
            tabContentContainer.removeChild(tabContentContainer.lastChild);
        }
        
        // Reset the first tab's content
        if (tabContentContainer.firstElementChild) {
            const firstTab = tabContentContainer.firstElementChild;
            
            // Reset product sections
            const productContainer = firstTab.querySelector('.product-container');
            if (productContainer) {
                const productSections = productContainer.querySelectorAll('.product-section');
                for (let i = 1; i < productSections.length; i++) {
                    productSections[i].remove();
                }
            }
            
            // Reset box sections
            const boxContainer = firstTab.querySelector('.box-container');
            if (boxContainer) {
                const boxEntries = boxContainer.querySelectorAll('.box-entry');
                for (let i = 1; i < boxEntries.length; i++) {
                    boxEntries[i].remove();
                }
            }
        }
    }
    
    // Show the appropriate form and reset the other
    if (selectedValue === "Single") {
        singleOrderForm.style.display = 'block';
        resetMultipleOrderForm();
        
        // Show the warehouse section for Single Order
        if (warehouseSection) {
            warehouseSection.style.display = 'block';
        }
        
    } else if (selectedValue === "Multiple") {
        multipleOrderForm.style.display = 'block';
        resetSingleOrderForm();
        
        // Hide the warehouse section for Multiple Order
        if (warehouseSection) {
            warehouseSection.style.display = 'none';
        }
        
        // Add first PO automatically
        addWpid();
    }
    
    // Initialize warehouse data loading based on role
    if (roledata === "1") {
        const clientSelect = document.getElementById('client_select');
        if (clientSelect && clientSelect.value && clientSelect.value !== "select client") {
            fetchWarehouseData(clientSelect.value);
        }
    } else {
        const clientId = "<%= clientId %>"; // Make sure this is passed from your route
        if (clientId) {
            fetchWarehouseData(clientId);
        }
    }
    
    // Move to next step
    nextIfSelected();
  }

  // Add client selection change handler
  document.addEventListener('DOMContentLoaded', function() {
    const clientSelect = document.getElementById('client_select');
    if (clientSelect) {
      clientSelect.addEventListener('change', function() {
        const selectedClientId = this.value;
        if (selectedClientId && selectedClientId !== "select client") {
          fetchWarehouseData(selectedClientId);
        } else {
          const modalBody = document.getElementById('modalBody');
          modalBody.innerHTML = '<div class="text-center p-4"><p>Please select a client to view available warehouses.</p></div>';
        }
      });
    }
  });
  
  function updateProgressBar() {
    progressBar.style.width = ((currentStep + 1) / steps.length) * 100 + "%";
  }
  
  function showStep(index) {
    steps.forEach((step, i) => {
        if (i === index) {
            step.classList.add('active');
            step.style.display = 'block';
        } else {
            step.classList.remove('active');
            step.style.display = 'none';
        }
    });
    updateProgressBar();
    generateOrderBtn.style.display = (currentStep === steps.length - 1) ? 'inline-block' : 'none';
  }
  function showOnlySingleBoxOption() {
  // Hide the multiple box option
  document.getElementById('multipleBoxOption').style.display = 'none';
  
  // Hide the "Add More Box" button for E-Com and Priority orders
  document.getElementById('addMoreBoxBtn').style.display = 'none';
  
  // Get the selected order type
  const orderType = document.querySelector('input[name="order_type"]:checked').value;
  
  // Show E-Com specific fields only for E-Com order type
  if (orderType === 'E-Com') {
    document.getElementById('ecomSpecificFields').style.display = 'flex';
  } else {
    document.getElementById('ecomSpecificFields').style.display = 'none';
  }
  
  // If multiple box was selected, uncheck it
  const multipleBoxRadio = document.querySelector('input[name="dispatch_location"][value="Multiple"]');
  if (multipleBoxRadio.checked) {
    multipleBoxRadio.checked = false;
    // Auto-select single box option
    document.querySelector('input[name="dispatch_location"][value="Single"]').checked = true;
  }
}
  
  function showAllOrderProcessingOptions() {
  // Show the multiple box option
  document.getElementById('multipleBoxOption').style.display = 'block';
  
  // Show the "Add More Box" button
  document.getElementById('addMoreBoxBtn').style.display = 'block';
   // Hide E-Com specific fields for non-E-Com order types
   document.getElementById('ecomSpecificFields').style.display = 'none';
}
function showOnlyAirShipmentMode() {
    // Hide all other shipment modes except Air
    document.getElementById('roadModeOption').style.display = 'none';
    document.getElementById('trainModeOption').style.display = 'none';
    document.getElementById('seaModeOption').style.display = 'none';
    
    // If any other mode was selected, uncheck it
    const selectedMode = document.querySelector('input[name="shipment_mode"]:checked');
    if (selectedMode && selectedMode.value !== 'Air') {
      selectedMode.checked = false;
      // Auto-select Air option
      document.querySelector('input[name="shipment_mode"][value="Air"]').checked = true;
    }
  }
  
  function showAllShipmentModes() {
    // Show all shipment modes
    document.getElementById('roadModeOption').style.display = 'block';
    document.getElementById('trainModeOption').style.display = 'block';
    document.getElementById('seaModeOption').style.display = 'block';
  }
  
  
  
  function changeStep(n) {
    const newStep = currentStep + n;
    
    // Validate step movement
    if (newStep >= 0 && newStep < steps.length) {
        // Special handling for moving from Step 3 to Step 4
        if (currentStep === 2 && n > 0) {
            const shipmentMode = document.querySelector('input[name="shipment_mode"]:checked')?.value;
            if (!shipmentMode) {
                return; // Don't proceed if no shipment mode is selected
            }
        }
        
        // Validate warehouse selection before proceeding from warehouse step
        if (currentStep === 5 && n > 0) {
            if (!window.selectedWarehouseId) {
                alert('Please select a warehouse before proceeding.');
                return;
            }
        }
        
        currentStep = newStep;
        showStep(currentStep);
        
        // Update button states
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        
        prevBtn.style.display = currentStep === 0 ? 'none' : 'block';
        nextBtn.style.display = currentStep === steps.length - 1 ? 'none' : 'block';
        
        // Disable next button on warehouse step until selection is made
        if (currentStep === 5) {
            nextBtn.disabled = !window.selectedWarehouseId;
        } else {
            nextBtn.disabled = false;
        }
    }
  }
  
  function nextIfSelected() {
    const currentInputs = steps[currentStep].querySelectorAll('input[type="radio"]');
    const selected = [...currentInputs].some(input => input.checked);
    if (selected) {
      updateSummary();
      changeStep(1);
    }
  }
  
  function updateSummary() {
    shipmentSummary.textContent = document.querySelector('input[name="shipment_type"]:checked')?.value || '';
    orderSummary.textContent = document.querySelector('input[name="order_type"]:checked')?.value || '';
    modeSummary.textContent = document.querySelector('input[name="shipment_mode"]:checked')?.value || '';
    // locationSummary.textContent = document.querySelector('input[name="dispatch_location"]:checked')?.value || '';
    
    const consigneeName = document.querySelector('input[name="consignee_name"]')?.value;
    if (consigneeName) {
      consigneeSummary.textContent = consigneeName;
    }
  }
  
 
  // Dynamic display rules remain unchanged
  document.querySelectorAll('input[name="order_type"]').forEach(el => {
    el.addEventListener('change', () => {
      const allowed = ['Heavy', 'Normal','E-Com','Priority'];
      document.getElementById('modeOptions').style.display = allowed.includes(el.value) ? 'block' : 'none';
    });
  });
  
  document.querySelectorAll('input[name="shipment_mode"]').forEach(el => {
    el.addEventListener('change', () => {
        nextIfSelected();
    });
  });
  
  showStep(currentStep);

  // Add warehouse selection functionality
  document.addEventListener('click', function (event) {
    if (event.target && event.target.matches('.select-btn')) {
        const warehouseID = event.target.getAttribute('data-id');
        const card = event.target.closest('.warehouse-card');
        
        // Remove highlight from all cards
        document.querySelectorAll('.warehouse-card').forEach(c => {
            c.style.border = '1px solid #eaf0f9';
            c.style.transform = 'scale(1)';
        });
        
        // Highlight selected card
        if (card) {
            card.style.border = '2px solid #5a99f7';
            card.style.transform = 'scale(1.02)';
        }
        
        // Store selected warehouse ID
        window.selectedWarehouseId = warehouseID;
        
        // Enable next button if a warehouse is selected
        const nextBtn = document.getElementById('nextBtn');
        if (nextBtn) {
            nextBtn.disabled = false;
        }
    }
  });
</script>
            <script>
  let selectedWarehouseId = null;
  
  function submitForm() {
    // updateSummary();
    
    // Get the selected warehouse ID
    console.log("selected warehouse id",selectedWarehouseId)
    
    
    // Get the order type (Single or Multiple)
    const orderType = document.querySelector('input[name="dispatch_location"]:checked').value;
    let clientID = null;
    if (roledata == 1) {
      console.log("In the role_data in the 1");
      if (orderType === 'Single') {
        clientID = document.getElementById('client_select').value; // Get selected client ID for single order
      } else {
        // For multiple orders, get the first multiple client selection value
        const firstMultipleClientSelect = document.querySelector('.multipleclientselection');
        if (firstMultipleClientSelect) {
          clientID = firstMultipleClientSelect.value;
        }
      }
    } else {
      clientID = clientidreal; // Make sure to pass clientId from your route
    }
    
    let orderData;
    
    if (orderType === 'Single') {
      // Collect data from the single order form
      const singleOrderData = collectSingleOrderData();
          orderDataToSend = {
                  // Include all form data
          orderid: singleOrderData.orderid,            // Order ID
          consigneeDetails: singleOrderData.consigneeDetails,  // Consignee information
          orderDate: singleOrderData.orderDate,        // Order date
          paymentType: singleOrderData.paymentType,    // Payment type (COD, check, etc.)
          additionalData: singleOrderData.additionalData,  // Payment specific details (COD, check)
          totalWeight: singleOrderData.totalWeight,    // Total weight of the order
          unit: singleOrderData.unit, 
          weightUnit:singleOrderData.weightUnit,                 // Selected dimension unit
          totalBoxes: singleOrderData.totalBoxes,      // Total number of boxes (sum of quantities)
          boxes: singleOrderData.boxes,                // Array of boxes with quantity, length, breadth, height
          clientID,  
          products:singleOrderData.products,
          wareHouseselectedid:selectedWarehouseId,
          poOrder:singleOrderData.poOrder,
          invoiceAmount:singleOrderData.InvoiceAmount,
          InvoiceNo:singleOrderData.InvoiceNo                                      // Client ID (assumed to be available)
        };

    } else {
      // Collect data from the multiple order form
      const multipleOrderData = collectMultipleOrderData(); 
      console.log("data in multiple from the collectMultiple",multipleOrderData) // This should return the complete data structure
 
// Construct the order data object to send to the backend
        orderDataToSend = {
            orderid: multipleOrderData.orderid,              // Order ID
            consigneeDetails: multipleOrderData.consigneeDetails, // Consignee details
            orderDate: multipleOrderData.orderDate,          // Order date
           
            clientID,                                        // Client ID
            poData: multipleOrderData.poData,                // PO data array containing product and box data
                  // Total weight for the orde
           
            
        };
    }

    // Submit the form data
    const url = orderType === 'Single' ? '/create_order_single' : '/create_order_multi';
    axios
      .post(
        url,
        orderDataToSend,
        {
          headers: {
            'Content-Type': 'application/json',
          },
        }
      )
      .then((response) => {
        console.log('Form submitted successfully:', response.data);
        Swal.fire({
          html: `
            <div class="card" style="background: linear-gradient(179deg, rgb(255 255 255 / 26%), rgb(81 110 221 / 47%));
    border-radius: 20px;
    padding: 20px;
    text-align: center;
    color: #d1e7f3;
    width: max-content;
    display: flex;
    flex-direction: column;
    align-items: center;">
              <h6 style="font-size: 18px;font-weight: 600;margin-bottom: 10px;text-transform: capitalize;color:#ffffff;"><i class="fas fa-check-circle"></i> Success!</h6>
              <p style="font-size: 10px;font-weight: 400;margin-bottom: 12px;text-align: left;text-transform: capitalize;">
                Form submitted successfully
              </p>
              <button class="btn btn-custom" style="background-color: rgba(255, 255, 255, 0.2); border: none; border-radius: 20px; color: #d1e7f3; padding: 10px 20px; width: 100%;" onclick="window.location.href='/unprocessed-orders'">
                Continue
              </button>
            </div>
          `,
          showConfirmButton: false,
          background: 'rgb(19 36 74)', 
          maxWidth: 'fit-content',
          customClass: {
            popup: 'border-0',
            container: 'border-radius: 50px; width: fit-content; display: flex;'
          }
        });
      })
      .catch((error) => {
        console.error('Error submitting form:', error.response ? error.response.data : error.message);

        let errorMessage = 'An error occurred.';
        if (error.response && error.response.data && error.response.data.errors) {
          const errors = error.response.data.errors;
          
          const processErrors = (errObj) => {
            let messages = [];
            for (const key in errObj) {
              if (typeof errObj[key] === 'object' && errObj[key] !== null) {
                messages = messages.concat(processErrors(errObj[key]));
              } else {
                messages.push(errObj[key]);
              }
            }
            return messages;
          };

          const errorMessages = processErrors(errors);
          
          errorMessage = errorMessages.map((msg, index) => {
            return `${index + 1}. ${msg}`;
          }).join('<br>');

        } else if (error.response && error.response.data.message) {
          errorMessage = error.response.data.message;
        } else if (error.message) {
          errorMessage = error.message;
        }

        Swal.fire({
          html: `
            <div class="card" style="background: linear-gradient(179deg, rgb(255 255 255 / 26%), rgb(81 110 221 / 47%));
    border-radius: 20px;
    padding: 20px;
    text-align: center;
    color: #d1e7f3;
    width: 100%;
    max-width: max-content;
    display: flex;
    justify-content: center;">
              <h6 style="font-size: 18px;font-weight: 600;margin-bottom: 10px;text-transform: capitalize;color:#ffffff;"> <i class="fas fa-exclamation-circle"></i> Oops! Seems like you missed something</h6>
              <p style="font-size: 10px;font-weight: 400;margin-bottom: 12px;text-align: left;text-transform: capitalize;">
                ${errorMessage}
              </p>
              <button class="btn btn-custom" style="background-color: rgba(255, 255, 255, 0.2); border: none; border-radius: 20px; color: #d1e7f3; padding: 10px 20px; width: 100%;" onclick="Swal.close()">
                OK
              </button>
            </div>
          `,
          showConfirmButton: false,
          background: 'rgb(19 36 74)',
          customClass: {
            popup: 'border-0',
            container: 'border-radius: 50px; display: flex !important; justify-content: center;'
          }
        });
      });
  }
  
</script>

            <script> document.addEventListener('DOMContentLoaded', async function () {
      const cardsPerPage = 2; // Number of cards to show per page
      let currentPage = 1; // Current page number
      let allAddresses = []; // All warehouse data
      let filteredAddresses = []; // Filtered warehouse data based on search
      const modalBody = document.getElementById('modalBody');
      // const pagination = document.getElementById('pagination');
      const searchInput = document.getElementById('searchInput');
      const totalCardsElement = document.getElementById('totalCards');
      const clientSelect = document.getElementById('client_select');
  
      // Initially, show a message in the modal
      modalBody.innerHTML = '<p>Please select a client to view warehouse addresses.</p>';
      totalCardsElement.innerHTML = ''; // Clear total cards display
  
      // Function to update the total card count
      function updateTotalCards(count) {
        totalCardsElement.innerHTML = `Available Addresses: <span style=" color: white; padding: 2px 8px; border-radius: 4px;">${count}</span>`;
        totalCardsElement.style.fontWeight = '600';
        totalCardsElement.style.fontSize = '16px';
        totalCardsElement.style.color = '#495057';
        // totalCardsElement.style.backgroundColor = '#e9ecef';
        totalCardsElement.style.padding = '8px 12px';
        totalCardsElement.style.borderRadius = '6px';
        // totalCardsElement.style.boxShadow = '0 2px 4px rgba(0, 0, 0, 0.1)';
        totalCardsElement.style.margin = '0';
        // totalCardsElement.style.display = 'inline-block';
      }
  
      // Function to populate the modal with warehouse cards
      function populateModal(addresses, page) {
        modalBody.innerHTML = ''; // Clear existing content
        const startIndex = (page - 1) * cardsPerPage;
        const endIndex = Math.min(startIndex + cardsPerPage, addresses.length);
  
        if (addresses.length === 0) {
          modalBody.innerHTML = '<p>No warehouse addresses found.</p>';
          return;
        }
  
        for (let i = startIndex; i < endIndex; i++) {
          const location = addresses[i];
          const card = `<div class="card mt-3 mb-3 col-12 col-sm-6 col-md-6 warehouse-card" style="cursor: pointer; border: 1px solid #eaf0f9; border-radius: 15px; box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1); transition: all 0.3s ease-in-out; overflow: hidden;" data-id="${location.serial}">
            <div class="card-header" style="background: linear-gradient(51deg, #2d4c7e,#5a99f7); font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">
              <h5 class="card-title" style="text-transform: uppercase; color: white; margin: 0; font-weight: 600; font-size: 1.2rem; display: flex; justify-content: space-between; align-items: center;">
                ${location.warehouse_name}
                <span style="background: rgb(234 240 249);padding: 4px 8px;border-radius: 8px;font-size: 0.8rem;color: black;">W-ID: ${location.serial}</span>
              </h5>
            </div>
            <div class="card-body" style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: #ffffff;">
              <div class="info-group" style="margin-bottom: 1.25rem;">
                <div class="info-item" style="padding:2px; background: #f8f9fa; border-radius: 8px; margin-bottom: 10px;">
                  <p style="margin: 0; line-height: 1.6; color: #333;">
                    <i class="fas fa-map-marker-alt" style="color: #5a99f7; margin-right: 8px;"></i>
                    <strong>Address:</strong> 
                    <span style="color: #666; text-transform: capitalize;">${location.warehouse_address}, ${location.warehouse_city}, ${location.warehouse_state}, ${location.warehouse_pincode}</span>
                  </p>
                </div>
                
                <div class="info-item" style="padding:2px; background: #f8f9fa; border-radius: 8px; margin-bottom: 10px;">
                  <p style="margin: 0; line-height: 1.6; color: #333;">
                    <i class="fas fa-envelope" style="color: #5a99f7; margin-right: 8px;"></i>
                    <strong>Email:</strong>
                    <span style="color: #666;">${location.warehouse_contact_email_person}</span>
                  </p>
                </div>
                
                <div class="info-item" style="padding:2px; background: #f8f9fa; border-radius: 8px; margin-bottom: 10px;">
                  <p style="margin: 0; line-height: 1.6; color: #333;">
                    <i class="fas fa-user" style="color: #5a99f7; margin-right: 8px;"></i>
                    <strong>Contact Person:</strong>
                    <span style="color: #666; text-transform: capitalize;">${location.warehouse_person}</span>
                  </p>
                </div>
                
                <div class="info-item" style="padding:2px; background: #f8f9fa; border-radius: 8px; margin-bottom: 10px;">
                  <p style="margin: 0; line-height: 1.6; color: #333;">
                    <i class="fas fa-phone" style="color: #5a99f7; margin-right: 8px;"></i>
                    <strong>Contact:</strong>
                    <span style="color: #666;">${location.warehouse_contact_person}</span>
                  </p>
                </div>
                
                <div class="info-item" style="padding:2px; background: #f8f9fa; border-radius: 8px; margin-bottom: 10px;">
                  <p style="margin: 0; line-height: 1.6; color: #333;">
                    <i class="fas fa-clock" style="color: #5a99f7; margin-right: 8px;"></i>
                    <strong>Working Hours:</strong>
                    <span style="color: #666;">${location.working_hours_from} to ${location.working_hours_to}</span>
                  </p>
                </div>
                
                <div class="info-item" style="padding:2px; background: #f8f9fa; border-radius: 8px;">
                  <p style="margin: 0; line-height: 1.6; color: #333;">
                    <i class="fas fa-calendar-alt" style="color: #5a99f7; margin-right: 8px;"></i>
                    <strong>Working Days:</strong>
                    <span style="color: #666;">${location.working_days}</span>
                  </p>
                </div>
              </div>
              
               <button type="button" class="btn btn-primary select-btn " style="background: #5a99f7; border: none;border-radius: 8px; font-weight: 600; transition: all 0.3s ease;" data-id="${location.serial}">
                <i class="fas fa-check-circle" style="margin-right: 8px;"></i>Select Warehouse
              </button>
            </div>
          </div>`;
          modalBody.innerHTML += card;
        }

        // Add click event listeners to warehouse cards
        const cards = document.querySelectorAll('.warehouse-card');
        cards.forEach(card => {
          card.addEventListener('click', function() {
            // Remove highlight from all cards
            cards.forEach(c => {
              c.style.border = '1px solid #eaf0f9';
              c.style.transform = 'scale(1)';
            });
            
            // Add highlight to clicked card
            this.style.border = '2px solid #5a99f7';
            this.style.transform = 'scale(1.02)';
          });
        });
      }
      // function generatePagination(totalItems) {
      //   const totalPages = Math.ceil(totalItems / cardsPerPage);
      //   // pagination.innerHTML = ''; // Clear existing pagination
  
      //   // Previous button
      //   const prevButton = document.createElement('li');
      //   prevButton.classList.add('page-item');
      //   prevButton.innerHTML = `<button class="page-link" ${currentPage === 1 ? 'disabled' : ''}>&laquo; Previous</button>`;
      //   prevButton.addEventListener('click', () => {
      //     if (currentPage > 1) {
      //       currentPage--;
      //       fetchWarehouseData(clientSelect.value); // Pass the selected client ID
      //     }
      //   });
      //   pagination.appendChild(prevButton);
  
      //   // Page buttons
      //   for (let i = 1; i <= totalPages; i++) {
      //     const pageButton = document.createElement('li');
      //     pageButton.classList.add('page-item');
      //     if (i === currentPage) pageButton.classList.add('active');
      //     pageButton.innerHTML = `<button class="page-link">${i}</button>`;
      //     pageButton.addEventListener('click', () => {
      //       currentPage = i;
      //       fetchWarehouseData(clientSelect.value); // Pass the selected client ID
      //     });
      //     pagination.appendChild(pageButton);
      //   }
  
      //   // Next button
      //   const nextButton = document.createElement('li');
      //   nextButton.classList.add('page-item');
      //   nextButton.innerHTML = `<button class="page-link" ${currentPage === totalPages ? 'disabled' : ''}>Next &raquo;</button>`;
      //   nextButton.addEventListener('click', () => {
      //     if (currentPage < totalPages) {
      //       currentPage++;
      //       fetchWarehouseData(clientSelect.value); // Pass the selected client ID
      //     }
      //   });
      //   pagination.appendChild(nextButton);
      // }
  
      // Function to fetch warehouse data with search and pagination
      function fetchWarehouseData(clientId) {
        console.log("Fetching warehouse data for client ID:", clientId);
        axios.get('/get_warehouse_addresses', {
          params: {
            page: currentPage,
            limit: cardsPerPage,
            query: searchInput.value, // Pass the search query here
            clientId: clientId // Pass the selected client ID
          }
        })
        .then(function (response) {
          console.log("Response data:", response.data); // Log the response data
          const data = response.data;
          if (data && data.filteredAddresses) {
            allAddresses = data.allAddresses;
            filteredAddresses = data.filteredAddresses;
            updateTotalCards(data.totalItems);
            populateModal(filteredAddresses, currentPage);
            // generatePagination(data.totalItems);
          } else {
            modalBody.innerHTML = '<p>No warehouse data available or incorrect response format.</p>';
          }
        })
        .catch(function (error) {
          console.error('Error fetching warehouse addresses:', error);
          modalBody.innerHTML = '<p>Error loading data. Please try again later.</p>';
        });
      }
  
      // Search functionality
      searchInput.addEventListener('input', function () {
        const query = searchInput.value.toLowerCase().replace(/\s|[-()]/g, ''); // Remove spaces and special characters
  
        // If the search query is empty, show all addresses and reset pagination
        if (query === '') {
          filteredAddresses = allAddresses;
          currentPage = 1; // Reset to the first page
        } else {
          // Filter the addresses based on the search query
          filteredAddresses = allAddresses.filter((location) => {
            const warehouseName = location.warehouse_name?.toLowerCase() || '';
            const warehouseAddress = location.warehouse_address?.toLowerCase() || '';
            const warehouseCity = location.warehouse_city?.toLowerCase() || '';
            const warehouseState = location.warehouse_state?.toLowerCase() || '';
            const warehouseEmail = location.warehouse_contact_email_person?.toLowerCase() || '';
            const warehousePhone = location.warehouse_contact_phone?.toString().replace(/\s|[-()]/g, '') || ''; // Clean phone number
  
            // Check if the query matches any field
            return (
              warehouseName.includes(query) ||
              warehouseAddress.includes(query) ||
              warehouseCity.includes(query) ||
              warehouseState.includes(query) ||
              warehouseEmail.includes(query) ||
              warehousePhone.includes(query)
            );
          });
        }
  
        // Update total cards, populate modal and generate pagination
        updateTotalCards(filteredAddresses.length);
        populateModal(filteredAddresses, currentPage);
        // generatePagination(filteredAddresses.length);
      });
  
      // Event listener for selecting a warehouse address
      document.addEventListener('click', function (event) {
        if (event.target && event.target.matches('.select-btn')) {
          const warehouseID = event.target.getAttribute('data-id');
          axios.get(`/api/location/${warehouseID}`)
            .then(function (response) {
              console.log('Selected warehouse:', response.data);
              console.log("selected warehouse id",response.data.location)
              selectedWarehouseId = response.data.location.serial;
            })
            .catch(function (error) {
              console.error('Error fetching location details:', error);
            });
        }
      });
  
      // Get role and clientId from the server-side data
      const role = parseInt(roledata);
      const clientId = parseInt("<%= clientId %>"); // Make sure to pass clientId from your route
      clientidreal = clientId
      console.log("client id in the create order",clientidreal)

      // Handle warehouse data fetching based on role
      if (role === 1) {
        // For admin (role 1), wait for client selection
        clientSelect.addEventListener('change', function () {
          const selectedClientId = clientSelect.value;
          if (selectedClientId) {
            fetchWarehouseData(selectedClientId);
          } else {
            modalBody.innerHTML = '<p>Please select a client to view warehouse addresses.</p>';
            totalCardsElement.innerHTML = '';
          }
        });
      } else {
        // For other roles (2,3,4,5,6), automatically fetch warehouse data
        if (clientId) {
          console.log("Auto-fetching warehouse data for client ID:", clientId);
          // Hide client selection if not admin
          if (clientSelect) {
            clientSelect.style.display = 'none';
          }
          fetchWarehouseData(clientId);
        } else {
          console.error("No client ID available for this user");
          modalBody.innerHTML = '<p>Error: No client associated with this account.</p>';
        }
      }
    });
  </script>
            <script
                src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

            <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
            <!-- Add Bootstrap JS for tab functionality -->
            <script
                src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
            <script src="assets/libs/apexcharts/apexcharts.min.js"></script>
            <script
                src="assets/libs/tabulator-tables/js/tabulator.min.js"></script>
            <script src="assets/js/pages/analytics-customers.init.js"></script>
            <!-- App js -->
            <script src="assets/js/app.js"></script>
            <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

            <!-- Include Select2 JS -->
            <script
                src="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/js/select2.min.js"></script>
            <script>
  $(document).ready(function() {
      // Initialize Select2 on your select element
      $('#Category').select2({
          placeholder: "search",
          allowClear: true,
          width: '100%' // Adjust this as needed
      });
  });
</script>
            <script>
  // Payment type handling
  document.getElementById('paymentType').addEventListener('change', function() {
    const selectedValue = this.value;
    const codAmountField = document.querySelector('.codAmount');
    const checkDetailsFields = document.querySelectorAll('.checkDetails, .divCheckAmount');

    // Reset visibility
    codAmountField.style.display = 'none';
    checkDetailsFields.forEach(field => field.style.display = 'none');

    // Show fields based on selected payment type
    if (selectedValue === 'cod') {
        codAmountField.style.display = 'block';
    } else if (selectedValue === 'check-on-delivery') {
        checkDetailsFields.forEach(field => field.style.display = 'block');
    }
  });

  // Amount validation
  function validateAmount(inputElement) {
    const invoiceAmount = parseFloat(document.getElementById('InvoiceAmount').value);
    const inputAmount = parseFloat(inputElement.value);

    if (inputAmount > invoiceAmount) {
        Swal.fire({
            icon: 'warning',
            title: 'Invalid Amount',
            text: 'Amount cannot be greater than the Invoice Amount. Enter correct amount',
            confirmButtonText: 'OK'
        }).then(() => {
            inputElement.value = invoiceAmount;
        });
    }
  }

  // Add event listeners for amount validation
  document.getElementById('amount_cash').addEventListener('input', function() {
    validateAmount(this);
  });

  document.getElementById('checkAmount').addEventListener('input', function() {
    validateAmount(this);
  });
 

</script>
            <script>
  function togglePaymentFields(selectElement) {
    const row = selectElement.closest('.row');
    const codAmount = row.querySelector('.codAmount');
    const checkDetails = row.querySelector('.checkDetails');
    const divCheckAmount = row.querySelector('.divCheckAmount');

    // Hide all payment-specific fields
    codAmount.style.display = 'none';
    checkDetails.style.display = 'none';
    divCheckAmount.style.display = 'none';

    // Show relevant fields based on selection
    switch (selectElement.value) {
        case 'cod':
            codAmount.style.display = 'block';
            break;
        case 'check-on-delivery':
            checkDetails.style.display = 'block';
            divCheckAmount.style.display = 'block';
            break;
    }
  }
</script>

            <script>
// Function to add more products
function addProduct(button) {
    const productContainer = document.querySelector('.product-container');
    const newSection = document.createElement('div');
    newSection.className = 'product-section';
    
    newSection.innerHTML = `
        <div class="form-row" style="justify-content: flex-end;">
            <button type="button" class="btn" onclick="removeProduct(this)" 
                style="border: none; font-size: 12px; color: #dc3545;">
                <i class="ti ti-minus menu-icon"></i>&nbsp; Remove product
            </button>
        </div>

        <div class="form-row">
            <div class="form-field">
                <label for="product_name">Product Name<span class="required">*</span></label>
                <input type="text" name="product_name[]" 
                    class="input-field"
                    placeholder="Enter product name" 
                    required>
            </div>
            <div class="form-field">
                <label for="Category">Category</label>
                <select name="Category[]" class="input-field">
                    <option value="No selection" selected>Select category</option>
                    <% commodities.forEach(commodity => { %>
                    <option value="<%= commodity.COMMODITY_NAME %>"><%= commodity.COMMODITY_NAME %></option>
                    <% }); %>
                </select>
            </div>
        </div>

        <div class="form-row">
            <div class="form-field">
                <label for="Quantity">Quantity<span class="required">*</span></label>
                <input type="number" name="Quantity[]" 
                    class="input-field"
                    placeholder="Enter Quantity" 
                    required>
            </div>
            <div class="form-field">
                <label for="order_value">Order Value<span class="required">*</span></label>
                <input type="number" name="order_value[]" 
                    class="input-field"
                    placeholder="Enter order value" 
                    required>
            </div>
            <div class="form-field">
                <label for="hsn_id">HSN ID</label>
                <input type="text" name="hsn_id[]" 
                    class="input-field"
                    placeholder="Enter HSN ID">
            </div>
        </div>
    `;
    
    productContainer.appendChild(newSection);
}

// Function to remove product section
function removeProduct(button) {
    const productSection = button.closest('.product-section');
    productSection.remove();
}
</script>

            <script>
// Function to add more boxes
function addBox(button) {
    const boxContainer = button.closest('.box-container');
    const boxEntry = boxContainer.querySelector('.box-entry').cloneNode(true);
    
    // Add remove button
    const removeBtn = document.createElement('div');
    removeBtn.className = 'form-row';
    removeBtn.style.justifyContent = 'flex-end';
    removeBtn.innerHTML = `
        <button type="button" class="btn" onclick="removeBox(this)" 
            style="border: none; font-size: 12px; color: #dc3545;">
            <i class="ti ti-minus menu-icon"></i>&nbsp; Remove Box
        </button>
    `;
    
    // Clear input values
    boxEntry.querySelectorAll('input').forEach(input => {
        input.value = '';
    });
    
    boxEntry.insertBefore(removeBtn, boxEntry.firstChild);
    boxContainer.appendChild(boxEntry);
}

// Function to remove box
function removeBox(button) {
    const boxEntry = button.closest('.box-entry');
    boxEntry.remove();
}

// Function to update placeholders based on dimension unit
function updatePlaceholders(select) {
    const boxEntry = select.closest('.box-container');
    const unit = select.value;
    const inputs = boxEntry.querySelectorAll('input[name^="Length"], input[name^="Breadth"], input[name^="Height"]');
    
    inputs.forEach(input => {
        const label = input.previousElementSibling;
        const fieldName = label.textContent.replace('*', '').trim();
        input.placeholder = `Enter ${fieldName} in ${unit}`;
    });
}

// Initialize placeholders on page load
document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.unit-select').forEach(select => {
        if (select.value) {
            updatePlaceholders(select);
        }
    });
});
</script>

            <script>
// Function to get the next tab number
function getNextTabNumber() {
    const tabContainer = document.getElementById('tab-container');
    return tabContainer.children.length + 1;
}

// Function to delete a tab
function deleteTab(event, tabId, tabNumber) {
    event.preventDefault();
    event.stopPropagation();

    // Remove tab and its content
    document.getElementById(`${tabId}-tab`).parentElement.remove();
    document.getElementById(tabId).remove();

    // If there are remaining tabs, activate the first one
    const firstTab = document.querySelector('.nav-link');
    if (firstTab) {
        firstTab.click();
    }
}

// Function to add new PO tab
function addWpid() {
    const tabContainer = document.getElementById('tab-container');
    const tabContentContainer = document.getElementById('tab-content-container');

    // Generate tab ID and determine the PO number
    const tabNumber = getNextTabNumber();
    const tabId = `tab-${tabNumber}`;

    // Create new tab button with dynamic PO name
    const newTab = document.createElement('li');
    newTab.className = 'nav-item';

    // Add tab button with delete button only if not the first PO
    newTab.innerHTML = `
        <button class="nav-link ${tabContainer.children.length === 0 ? 'active' : ''}" 
                id="${tabId}-tab" 
                data-bs-toggle="tab" 
                data-bs-target="#${tabId}" 
                type="button" 
                role="tab" 
                aria-controls="${tabId}" 
                aria-selected="${tabContainer.children.length === 0 ? 'true' : 'false'}">
            PO ${tabNumber}
        </button>
        ${tabContainer.children.length > 0 ? `
        <button class="btn btn-outline-danger btn-sm ms-2 delete-tab-button" 
                onclick="deleteTab(event, '${tabId}', ${tabNumber})">
            Delete
        </button>` : ''}
    `;

    // Create new tab content
    const newTabContent = document.createElement('div');
    newTabContent.className = `tab-pane fade ${tabContainer.children.length === 0 ? 'show active' : ''}`;
    newTabContent.id = tabId;
    newTabContent.setAttribute('role', 'tabpanel');
    newTabContent.setAttribute('aria-labelledby', `${tabId}-tab`);
    newTabContent.innerHTML = `
        <div class="wpid-section  form-section mb-4" id="${tabId}"  style="display:flex;flex-direction: row;border-radius: 0px 0px 20px 20px;">
            <div class="row p-2 mb-3 form-row ">
                <div class="col-sm-2 form-field">
                    <label for="wpid" class="form-label">PO.NO*</label>
                    <input type="text" class="form-control border-custom wpid-id input-field" name="wpid[]" placeholder="Enter P.O. ID" required>
                    <button class="btn" style="border: none; font-size: 12px; font-weight: 600; margin-top: 8px;"
                        type="button" onclick="autoGenerateWpid(this)">
                        <span class="material-symbols-outlined mt-1">+</span>&nbsp;Auto-Generate PO.Id
                    </button>
                </div>
                <div class="col-sm-2 payment_mode form-field">
                    <label for="payment" class="form-label" >Mode of Payment*</label>
                    <select class="form-control border-custom paymentType input-field" name="paymentType[]" onchange="togglePaymentFields(this)">
                        <option value="#" disable>Select Payment Type</option>
                        <option value="prepaid">Pre-Paid</option>
                        <option value="cod">COD</option>
                        <option value="check-on-delivery">Cheque on Delivery</option>
                    </select>
                </div>
                <div class="col-sm-1 invoiceDetails form-field">
                    <label for="InvoiceAmount" class="form-label InvoiceAmount">Invoice Amount</label>
                    <input type="number" name="InvoiceAmount[]" class="form-control border-custom InvoiceAmount input-field" placeholder="Invoice Amount" />
                </div>
                <div class="col-sm-2" id="invoiceNumberDetails form-field">
                    <label for="InvoiceNO" class="form-label">Invoice NO</label>
                    <input type="text" name="InvoiceNO[]" class="form-control border-custom InvoiceNO input-field" placeholder="Invoice NO"/>
                </div>
                <div class="col-sm-4" id="fodAmountDetails form-field">
                    <label for="FODAmount" class="form-label">FOD Amount</label>
                    <input type="number" name="FODAmount[]" class="form-control border-custom FODAmount input-field" placeholder="FOD Amount"/>
                </div>
                <div class="col-sm-1 codAmount form-field" style="display: none; width: 120px;">
                    <label for="amount_cash" class="form-label">COD Amount</label>
                    <input type="number" name="amount_cash[]" class="form-control border-custom amount_cash input-field" placeholder="Enter amount"/>
                </div>
                <div class="col-sm-2 checkDetails form-field" style="display: none">
                    <label for="checkFavour" class="form-label">Check Favour Of</label>
                    <input type="text" name="check_favour[]" class="form-control border-custom checkFavour input-field" placeholder="Enter name" />
                </div>
                <div class="col-sm-1 divCheckAmount form-field" style="display: none">
                    <label for="checkAmount" class="form-label">Check Amount</label>
                    <input type="number" name="check_amount[]" class="form-control border-custom checkAmount input-field" placeholder="Enter amount"/>
                </div>
                <div class="col-sm-4 form-field">
                    <div>
                      <label for="wpid" class="form-label">Select Client</label>
                      <% if (role_data.role == 1) { %>
                          <div class="form-group col-sm-12">
                              <select class="form-control border-custom multipleclientselection" id="client_select_${tabId}" name="client_select[]" required style="font-size: 12px;padding: 15px;border-radius: 10px;font-size: 14px;" onchange="handleClientSelection(this,'${tabId}')">
                                  <option value="select client" selected>Select client</option>
                                  <% clients.forEach(client => { %>
                                      <option value="<%= client.id %>"><%= client.company_name %>/<%= client.id %></option>
                                  <% }) %>
                              </select>
                          </div>
                      <% } %>
              
                            <!-- Always show warehouse dropdown for all roles -->
                            <div id="warehouse_dropdown_${tabId}" class="warehouse-dropdown">
                                <!-- Warehouse dropdown will be populated here -->
                            </div>
                      </div>
                  </div>
               </div>

           

        </div>
         <!-- Product Details Section -->
            <div class="form-row ">
                <div class="form-field form-section" style="box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px; border-radius: 5px; text-align: start; text-transform: capitalize;">
                    <div class="row" style="display: flex; flex-direction: row; flex-wrap: nowrap; align-content: center; align-items: center;padding:10px;">
                        <div class="col-6" style="display: flex; align-items: start; margin-left: 5px;">
                            <i class="fa-solid fa-gift p-2 ml-2" style="font-size: 22px; color: #5a99f7; border-radius: 5px;"></i>
                        </div>
                        <div class="col-6" style="text-align: end; padding-right: 25px; text-transform: uppercase;">
                            <h5>Product Details</h5>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="product-container">
                            <div class="product-section">
                               
                                <div>
                                    <div class="form-row p-3 row m-0">
                                        <div class="col-12" style="text-align: end; text-transform: uppercase;">
                                        <button type="button" class="btn-add btn btn-success m-2"  onclick="addMultipleProduct(this)" style="border: none;">
                                            <i class="ti ti-plus menu-icon"></i>&nbsp; Add Product
                                        </button>
                                    </div>
                                        <div class="col-md-6 form-field">
                                            <label for="product_name" class="form-label">Product Name*</label>
                                            <input type="text" class="form-control border-custom input-field" name="product_name[]" required placeholder="Enter Product Name" />
                                        </div>
                                        <div class="col-md-6 form-field">
                                            <label for="Category" class="form-label">Category</label>
                                            <select class="form-control border-custom input-field" name="Category[]">
                                                <option value="No selection" selected>Select category</option>
                                                <% commodities.forEach(commodity => { %>
                                                <option value="<%= commodity.COMMODITY_NAME %>"><%= commodity.COMMODITY_NAME %></option>
                                                <% }); %>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="form-row p-3 row m-0">
                                        <div class="col-md-4 form-field form-field">
                                            <label for="Quantity" class="form-label">Quantity</label>
                                            <input type="number" class="form-control border-custom input-field" name="Quantity[]" required placeholder="Enter Quantity" />
                                        </div>
                                        <div class="col-md-4 form-field">
                                            <label for="order_value" class="form-label">Order Value*</label>
                                            <input type="number" class="form-control border-custom input-field" name="order_value[]" required placeholder="Enter Order Value" />
                                        </div>
                                        <div class="col-md-4 form-field">
                                            <label for="hsn_id" class="form-label">HSN ID</label>
                                            <input type="text" class="form-control border-custom input-field" name="hsn_id[]" placeholder="Enter HSN ID" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Product Weight and Dimensions -->
                <div class="col-md-6 form-field form-section" style="box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px; border-radius: 5px; text-align: start; text-transform: capitalize;">
                    <div class="row " style=" display: flex; flex-direction: row; flex-wrap: nowrap; align-content: center; align-items: center;padding:10px;">
                        <div class="col-6" style="display: flex; align-items: start; margin-left: 5px;">
                            <i class="fa-solid fa-ruler-combined p-2 ml-2" style="font-size: 22px; color: #5a99f7; border-radius: 5px;"></i>
                        </div>
                        <div class="col-6" style="text-align: end; padding-right: 25px; text-transform: uppercase;">
                            <h5>Product Weight & Dimensions</h5>
                        </div>
                    </div>
                    <div class="box-container card p-3" style="background:none;border: none;">
                        <div class="row">
                            <div class="col-md-12" style="text-align: end; text-transform: uppercase;">
                                <button type="button" class="btn btn-success m-2" onclick="addBox(this)" style="border: none;">
                                    <i class="ti ti-plus menu-icon"></i>&nbsp; Add Box
                                </button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <label for="weight" class="form-label">Total wt. <i class="fa-solid fa-circle-info"></i></label>
                                <input type="number" class="form-control border-custom input-field" name="weight_box[]" required />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label chooseDimensionUnit">Choose wt. unit*</label>
                                <select name="weight_unit[]" class="form-control border-custom unit-select form-select input-field">
                                    <option value="">Select update unit type</option>
                                    <option value="kg">KG</option>
                                    <option value="gm">Gram</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label chooseDimensionUnit">Choose DIM. Unit*</label>
                                <select name="unit-select" class="form-control border-custom unit-select form-select input-field" onchange="updatePlaceholders(this)">
                                    <option value="">Select Dimension Unit type</option>
                                    <option value="cm">cm. (Centimeter)</option>
                                    <option value="feet">ft. (Feet)</option>
                                    <option value="inches">in.(Inches)</option>
                                </select>
                            </div>
                        </div>
                        <div class="box-entry">
                            <div class="row p-3">
                                <div class="col-md-3">
                                    <label for="Quantity_box" class="form-label">Qty. of Boxes</label>
                                    <input type="number" class="form-control border-custom input-field" name="Quantity_box[]" required />
                                </div>
                                <div class="col-md-3">
                                    <label for="Length" class="form-label">Length*</label>
                                    <input type="number" class="form-control border-custom input-field" name="Length[]" required />
                                </div>
                                <div class="col-md-3">
                                    <label for="Breadth" class="form-label">Breadth*</label>
                                    <input type="number" class="form-control border-custom input-field" name="Breadth[]" required />
                                </div>
                                <div class="col-md-3">
                                    <label for="Height" class="form-label">Height*</label>
                                    <input type="number" class="form-control border-custom input-field" name="Height[]" required />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
    `;

    // Append new tab and content
    tabContainer.appendChild(newTab);
    tabContentContainer.appendChild(newTabContent);
    console.log("role_data",roledata)
    if(roledata !== "1"){
        console.log("if part")
        const clientID = "<%= clientId %>";
        console.log("clientID in addWpid:", clientID);
        
        // Only proceed if clientID is valid
        if (clientID && clientID !== "" && !isNaN(parseInt(clientID))) {
            const mockSelect = { value: clientID };
            handleClientSelection(mockSelect, tabId);
        } else {
            console.error("Invalid clientID for warehouse dropdown in addWpid:", clientID);
            const warehouseDropdown = document.getElementById(`warehouse_dropdown_${tabId}`);
            if (warehouseDropdown) {
                warehouseDropdown.innerHTML = '<div class="alert alert-warning mt-2">Error: Invalid client ID</div>';
            }
        }
    }
}

// Function to toggle payment fields in multiple order form
function togglePaymentFields(selectElement) {
    const row = selectElement.closest('.row');
    const codAmount = row.querySelector('.codAmount');
    const checkDetails = row.querySelector('.checkDetails');
    const divCheckAmount = row.querySelector('.divCheckAmount');

    // Hide all payment-specific fields
    codAmount.style.display = 'none';
    checkDetails.style.display = 'none';
    divCheckAmount.style.display = 'none';

    // Show relevant fields based on selection
    switch (selectElement.value) {
        case 'cod':
            codAmount.style.display = 'block';
            break;
        case 'check-on-delivery':
            checkDetails.style.display = 'block';
            divCheckAmount.style.display = 'block';
            break;
    }
}

// Auto-generate WPID
function autoGenerateWpid(button) {
    const wpidInput = button.closest('.col-sm-2').querySelector('.wpid-id');
    const timestamp = new Date().getTime();
    wpidInput.value = `PO${timestamp}`;
}
</script>

            <link rel="stylesheet"
                href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />

            <script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize client selection handling for admin
    const clientSelect = document.getElementById('client_select');
    if (clientSelect) {
      clientSelect.addEventListener('change', function() {
        const selectedClientId = this.value;
        if (selectedClientId) {
          // Clear previous warehouse selection
          window.selectedWarehouseId = null;
          
          // Reset warehouse cards
          const modalBody = document.getElementById('modalBody');
          modalBody.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Loading warehouses...</div>';
          
          // Fetch warehouses for selected client
          fetchWarehouseData(selectedClientId);
          
          // Disable next button until warehouse is selected
          const nextBtn = document.getElementById('nextBtn');
          if (nextBtn) {
            nextBtn.disabled = true;
          }
        } else {
          // Clear warehouse display if no client is selected
          const modalBody = document.getElementById('modalBody');
          modalBody.innerHTML = '<div class="text-center p-4"><p>Please select a client to view available warehouses.</p></div>';
        }
      });
    }
  });
</script>
            <script>
  function addMultipleProduct(button) {
    const productContainer = button.closest('.product-container');
    if (!productContainer) return;

    const newProductSection = document.createElement('div');
    newProductSection.className = 'product-section';
    
    newProductSection.innerHTML = `
        <div>
            <div class="row p-3">
                <div class="col-md-6 form-field">
                    <label for="product_name" class="form-label">Product Name*</label>
                    <input type="text" class="form-control border-custom input-field" name="product_name[]" required placeholder="Enter Product Name" />
                </div>
                <div class="col-md-6">
                    <label for="Category" class="form-label">Category</label>
                    <select class="form-control border-custom input-field" name="Category[]">
                        <option value="No selection" selected>Select category</option>
                        <% commodities.forEach(commodity => { %>
                        <option value="<%= commodity.COMMODITY_NAME %>"><%= commodity.COMMODITY_NAME %></option>
                        <% }); %>
                    </select>
                </div>
            </div>
            <div class="row p-3">
                <div class="col-md-4">
                    <label for="Quantity" class="form-label">Quantity</label>
                    <input type="number" class="form-control border-custom input-field" name="Quantity[]" required placeholder="Enter Quantity" />
                </div>
                <div class="col-md-4">
                    <label for="order_value" class="form-label">Order Value*</label>
                    <input type="number" class="form-control border-custom input-field" name="order_value[]" required placeholder="Enter Order Value" />
                </div>
                <div class="col-md-4">
                    <label for="hsn_id" class="form-label">HSN ID</label>
                    <input type="text" class="form-control border-custom input-field" name="hsn_id[]" placeholder="Enter HSN ID" />
                </div>
            </div>
            <div class="row">
                <div class="col-12" style="text-align: end; text-transform: uppercase;">
                    <button type="button" class="btn" onclick="removeMultipleProduct(this)" style="border: none; color: #dc3545;">
                        <i class="ti ti-minus menu-icon"></i>&nbsp; Remove product
                    </button>
                </div>
            </div>
        </div>
    `;
    
    productContainer.appendChild(newProductSection);
}

// Function to remove product in multiple order form
function removeMultipleProduct(button) {
    const productSection = button.closest('.product-section');
    if (productSection) {
        productSection.remove();
    }
}
</script>

            <script>
// ... existing code ...

// Phone validation - ensures phone is 10 digits starting with 6-9
function validatePhoneInput(inputField) {
  const phoneNumber = inputField.value;
  const mobileHelp = document.getElementById('mobileHelp');
 
  // Show the error message only after the user has typed the first digit
  if (phoneNumber.length > 0) {
    mobileHelp.style.display = 'block';
  }
  if (phoneNumber.length === 0) {
    mobileHelp.style.display = 'none';
  }
 
  // Check if the first digit is not 6, 7, 8, or 9
  if (phoneNumber.length === 1 && !/^[6-9]$/.test(phoneNumber)) {
    // Clear the input if the first character is invalid
    inputField.value = '';
  }
 
  // Restrict further input beyond 10 digits
  if (phoneNumber.length > 10) {
    inputField.value = phoneNumber.slice(0, 10); // Trim to 10 digits if user tries to input more
  }
 
  // Hide the error only if the input length is exactly 10 digits and the first digit is valid
  if (phoneNumber.length === 10 && /^[6-9]/.test(phoneNumber)) {
    mobileHelp.style.display = 'none';
  }
}
function alternateValidatePhoneInput(inputField) {
  const phoneNumber = inputField.value;
  const alternateMobileHelp = document.getElementById('alternateMobileHelp');
 
  // Show the error message only after the user has typed the first digit
  if (phoneNumber.length > 0) {
    alternateMobileHelp.style.display = 'block';
  }
  if (phoneNumber.length === 0) {
    alternateMobileHelp.style.display = 'none';
  }
 
  // Check if the first digit is not 6, 7, 8, or 9
  if (phoneNumber.length === 1 && !/^[6-9]$/.test(phoneNumber)) {
    // Clear the input if the first character is invalid
    inputField.value = '';
  }
 
  // Restrict further input beyond 10 digits
  if (phoneNumber.length > 10) {
    inputField.value = phoneNumber.slice(0, 10); // Trim to 10 digits if user tries to input more
  }
 
  // Hide the error only if the input length is exactly 10 digits and the first digit is valid
  if (phoneNumber.length === 10 && /^[6-9]/.test(phoneNumber)) {
    alternateMobileHelp.style.display = 'none';
  }
}

// Handle phone blur event - fetches addresses when valid phone is entered
function handlePhoneBlur() {
  const phoneNumber = document.getElementById('consignee_phone').value.trim();
  if (phoneNumber.length === 10) {
    fetchAddresses({ phoneNumber });
  } else {
    // If phone number is not valid, you can add an error message or handle as needed
    document.getElementById('mobileHelp').style.display = 'block';
  }
}

// Fetch addresses from API based on phone number
function fetchAddresses(data) {
  // Use axios if available, otherwise use fetch
  if (window.axios) {
    axios.post('/get-addresses', data)
      .then((response) => {
        handleAddressResponse(response.data);
      })
      .catch((error) => {
        console.error('Error fetching addresses:', error);
      });
  } else {
    fetch('/get-addresses', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
      handleAddressResponse(data);
    })
    .catch(error => {
      console.error('Error fetching addresses:', error);
    });
  }
}

// Handle the response from the address API
function handleAddressResponse(data) {
  if (data.success) {
    const addresses = data.addresses;
    console.log("Addresses fetched:", addresses);

    if (addresses.length > 0) {
      // Use SweetAlert2 if available, otherwise use confirm
      if (window.Swal) {
        Swal.fire({
          title: 'Previous Address Found',
          text: 'Do you want to use your previous address?',
          icon: 'question',
          showCancelButton: true,
          confirmButtonText: 'Yes',
          cancelButtonText: 'No',
        }).then((result) => {
          if (result.isConfirmed) {
            populateAddressModal(addresses);
          }
        });
      } else {
        const confirmUse = confirm('Previous address found. Do you want to use your previous address?');
        if (confirmUse) {
          populateAddressModal(addresses);
        }
      }
    } else {
      console.log('No addresses found for this phone number.');
    }
  } else {
    console.error('Unexpected response from server.');
  }
}

// Populate address modal with previous addresses
function populateAddressModal(addresses) {
  // Create modal content for address selection
  let addressHtml = '';
  
  // Generate address cards
  addresses.forEach((address, index) => {
    addressHtml += `
      <div class="address-card" onclick="selectAddress(${index})">
        <div class="card mb-3" style="cursor: pointer; border: 1px solid #eaeaea; border-radius: 8px;">
          <div class="card-header" style="background: linear-gradient(51deg, #2d4c7e,#5a99f7); color: white; border-radius: 8px 8px 0 0;">
            <h5 class="card-title mb-0" style="font-size: 16px; font-weight: 600;">
              ${address.name || 'Address ' + (index + 1)}
            </h5>
          </div>
          <div class="card-body" style="padding: 15px;">
            <p style="margin: 0; line-height: 1.6; font-size: 14px;">
              <i class="fas fa-map-marker-alt" style="color: #5a99f7; margin-right: 8px;"></i>
              <strong>Address:</strong> 
              <span style="color: #666;">${address.address || ''}, ${address.city || ''}, ${address.state || ''} - ${address.pincode || ''}</span>
            </p>
            <p style="margin: 8px 0; line-height: 1.6; font-size: 14px;">
              <i class="fas fa-phone" style="color: #5a99f7; margin-right: 8px;"></i>
              <strong>Phone:</strong>
              <span style="color: #666;">${address.phone || ''}</span>
            </p>
            <p style="margin: 8px 0; line-height: 1.6; font-size: 14px;">
              <i class="fas fa-envelope" style="color: #5a99f7; margin-right: 8px;"></i>
              <strong>Email:</strong>
              <span style="color: #666;">${address.email || ''}</span>
            </p>
            ${address.nearby ? `
            <p style="margin: 8px 0; line-height: 1.6; font-size: 14px;">
              <i class="fas fa-landmark" style="color: #5a99f7; margin-right: 8px;"></i>
              <strong>Landmark:</strong>
              <span style="color: #666;">${address.nearby}</span>
            </p>` : ''}
          </div>
        </div>
      </div>
    `;
  });

  // Show the addresses using SweetAlert2 if available
  if (window.Swal) {
    Swal.fire({
      title: 'Select an Address',
      html: `<div class="address-container" style="max-height: 400px; overflow-y: auto;">${addressHtml}</div>`,
      showConfirmButton: false,
      showCloseButton: true,
      width: '600px',
    });
  } else {
    // Create a simple modal if SweetAlert is not available
    const modalContainer = document.createElement('div');
    modalContainer.id = 'addressSelectionModal';
    modalContainer.style.cssText = 'position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: center; z-index: 9999;';
    
    modalContainer.innerHTML = `
      <div style="background: white; border-radius: 8px; width: 80%; max-width: 600px; max-height: 80vh; overflow-y: auto; padding: 20px;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
          <h3 style="margin: 0;">Select an Address</h3>
          <button onclick="document.getElementById('addressSelectionModal').remove()" style="background: none; border: none; font-size: 20px; cursor: pointer;">×</button>
        </div>
        <div class="address-container">${addressHtml}</div>
      </div>
    `;
    
    document.body.appendChild(modalContainer);
  }

  // Store addresses in a global variable for selection
  window.storedAddresses = addresses;
}

// Select and fill an address
function selectAddress(index) {
  const address = window.storedAddresses[index];
  
  // Fill in form fields with selected address
  document.getElementById('consignee_name').value = address.name || '';
  document.getElementById('consignee_phone').value = address.phone || '';
  document.getElementById('consignee_email').value = address.email || '';
  document.getElementById('consignee_pincode').value = address.pincode || '';
  document.getElementById('consignee_state').value = address.state || '';
  document.getElementById('consignee_city').value = address.city || '';
  document.getElementById('consignee_address').value = address.address || '';
  document.getElementById('consignee_landmark').value = address.nearby || '';
  
  // If store code is present in the address data, fill that too
  if (address.store_code) {
    document.getElementById('store_code').value = address.store_code;
  }
  
  // Close the modal
  if (window.Swal) {
    Swal.close();
  } else {
    const modal = document.getElementById('addressSelectionModal');
    if (modal) {
      modal.remove();
    }
  }
}

// Function to set up sidebar updates based on order type
function setupSidebarUpdates(orderType) {
    const orderDetailsSummary = document.getElementById('summary-order-details');
    
    // Clear any existing intervals
    if (window.poUpdateInterval) {
        clearInterval(window.poUpdateInterval);
    }
    
    // Set up consignee details updates
    setupConsigneeDetailsSidebar();
    
    if (orderType === 'Single') {
        // Set up listeners for single order form fields
        const orderIdInput = document.querySelector('#singleOrderForm #orderid');
        const poIdInput = document.querySelector('#singleOrderForm #wpid');
        const paymentTypeSelect = document.querySelector('#singleOrderForm #paymentType');
        const invoiceAmountInput = document.querySelector('#singleOrderForm #InvoiceAmount');
        const fodAmountInput = document.querySelector('#singleOrderForm #FODAmount');
        
        // Function to update sidebar with single order details
        const updateSingleOrderSidebar = () => {
            orderDetailsSummary.innerHTML = `
                <div class="summary-item">
                    <span class="summary-label" style="color: #f0f4ff;">Order ID:</span>
                    <span class="summary-value">${orderIdInput.value || 'Not set'}</span>
                </div>
                <div class="summary-item">
                    <span class="summary-label" style="color: #f0f4ff;">PO.NO:</span>
                    <span class="summary-value">${poIdInput.value || 'Not set'}</span>
                </div>
                <div class="summary-item">
                    <span class="summary-label" style="color: #f0f4ff;">Payment:</span>
                    <span class="summary-value">${paymentTypeSelect.value || 'Not set'}</span>
                </div>
                <div class="summary-item">
                    <span class="summary-label" style="color: #f0f4ff;">Invoice Amount:</span>
                    <span class="summary-value">${invoiceAmountInput ? invoiceAmountInput.value || '0' : '0'}</span>
                </div>
                ${fodAmountInput ? `
                <div class="summary-item">
                    <span class="summary-label" style="color: #f0f4ff;">FOD Amount:</span>
                    <span class="summary-value">${fodAmountInput.value || '0'}</span>
                </div>` : ''}
            `;
        };
        
        // Initial update
        setTimeout(updateSingleOrderSidebar, 500);
        
        // Add event listeners to inputs
        orderIdInput.addEventListener('input', updateSingleOrderSidebar);
        poIdInput.addEventListener('input', updateSingleOrderSidebar);
        paymentTypeSelect.addEventListener('change', updateSingleOrderSidebar);
        if (invoiceAmountInput) {
            invoiceAmountInput.addEventListener('input', updateSingleOrderSidebar);
        }
        if (fodAmountInput) {
            fodAmountInput.addEventListener('input', updateSingleOrderSidebar);
        }
        
    } else if (orderType === 'Multiple') {
        // Set up listeners for multiple order form
        const orderIdInput = document.querySelector('#multipleOrderForm #orderid');
        
        // Function to update sidebar with multiple order details
        const updateMultipleOrderSidebar = () => {
            // Get all PO IDs
            const poInputs = document.querySelectorAll('#multipleOrderForm .wpid-id');
            let poList = '';
            
            // Fix: Create an array of valid PO inputs to ensure sequential numbering
            const validPoInputs = Array.from(poInputs).filter(input => input.value);
            
            validPoInputs.forEach((input, index) => {
                poList += `<div class="summary-subitem">PO ${index + 1}: ${input.value}</div>`;
            });
            
            if (!poList) {
                poList = '<div class="summary-subitem">No POs added yet</div>';
            }
            
            // Get payment type and amounts for each PO
            const paymentTypes = document.querySelectorAll('#multipleOrderForm .paymentType');
            const invoiceAmounts = document.querySelectorAll('#multipleOrderForm .InvoiceAmount');
            
            let paymentsList = '';
            if (paymentTypes.length > 0) {
                paymentsList = '<div class="summary-subitem">Payment Types:</div>';
                
                // Fix: Create arrays of valid payment types to ensure sequential numbering
                const validPaymentTypes = Array.from(paymentTypes).filter(select => select.value && select.value !== '#');
                
                validPaymentTypes.forEach((select, index) => {
                    paymentsList += `<div class="summary-subitem">PO ${index + 1}: ${select.value}</div>`;
                });
            }
            
            let amountsList = '';
            if (invoiceAmounts.length > 0) {
                amountsList = '<div class="summary-subitem">Invoice Amounts:</div>';
                
                // Fix: Create arrays of valid invoice amounts to ensure sequential numbering
                const validInvoiceAmounts = Array.from(invoiceAmounts).filter(input => input.value);
                
                validInvoiceAmounts.forEach((input, index) => {
                    amountsList += `<div class="summary-subitem">PO ${index + 1}: ${input.value}</div>`;
                });
            }
            
            orderDetailsSummary.innerHTML = `
                <div class="summary-item">
                    <span class="summary-label" style="color: #f0f4ff;">Order ID:</span>
                    <span class="summary-value">${orderIdInput ? orderIdInput.value || 'Not set' : 'Not set'}</span>
                </div>
                <div class="summary-item">
                    <span class="summary-label" style="color: #f0f4ff;">PO Numbers:</span>
                    <div class="summary-value">${poList}</div>
                </div>
                ${paymentsList ? `
                <div class="summary-item">
                    <span class="summary-label" style="color: #f0f4ff;">Payment Details:</span>
                    <div class="summary-value">${paymentsList}</div>
                </div>` : ''}
                ${amountsList ? `
                <div class="summary-item">
                    <span class="summary-label" style="color: #f0f4ff;">Invoice Details:</span>
                    <div class="summary-value">${amountsList}</div>
                </div>` : ''}
            `;
        };
        
        // Initial update with slight delay to ensure DOM is ready
        setTimeout(updateMultipleOrderSidebar, 500);
        
        // Add event listener to order ID
        if (orderIdInput) {
            orderIdInput.addEventListener('input', updateMultipleOrderSidebar);
        }
        
        // Add function to check for PO changes regularly
        window.poUpdateInterval = setInterval(updateMultipleOrderSidebar, 2000);
    }
}

// Function to update consignee details in the sidebar
function setupConsigneeDetailsSidebar() {
    const consigneeDetailsSummary = document.getElementById('summary-consignee-details');
    if (!consigneeDetailsSummary) return;
    
    // Get consignee input fields
    const nameInput = document.getElementById('consignee_name');
    const phoneInput = document.getElementById('consignee_phone');
    const alternatePhoneInput = document.getElementById('alternate_mobile');
    const emailInput = document.getElementById('consignee_email');
    const pincodeInput = document.getElementById('consignee_pincode');
    const stateInput = document.getElementById('consignee_state');
    const cityInput = document.getElementById('consignee_city');
    const addressInput = document.getElementById('consignee_address');
    const landmarkInput = document.getElementById('consignee_landmark');
    
    // Function to update the sidebar
    const updateConsigneeDetails = () => {
        let phoneDetails = '';
        if (phoneInput && phoneInput.value) {
            phoneDetails = phoneInput.value;
            if (alternatePhoneInput && alternatePhoneInput.value) {
                phoneDetails += `, ${alternatePhoneInput.value}`;
            }
        }
        
        let addressDetails = '';
        if (addressInput && addressInput.value) {
            addressDetails = addressInput.value;
            if (cityInput && cityInput.value) {
                addressDetails += `, ${cityInput.value}`;
            }
            if (stateInput && stateInput.value) {
                addressDetails += `, ${stateInput.value}`;
            }
            if (pincodeInput && pincodeInput.value) {
                addressDetails += ` - ${pincodeInput.value}`;
            }
        }
        
        consigneeDetailsSummary.innerHTML = `
            ${nameInput && nameInput.value ? `
            <div class="summary-item">
                <span class="summary-label" style="color: #f0f4ff;">Name:</span>
                <span class="summary-value">${nameInput.value}</span>
            </div>` : ''}
            
            ${phoneDetails ? `
            <div class="summary-item">
                <span class="summary-label" style="color: #f0f4ff;">Phone:</span>
                <span class="summary-value">${phoneDetails}</span>
            </div>` : ''}
            
            ${emailInput && emailInput.value ? `
            <div class="summary-item">
                <span class="summary-label" style="color: #f0f4ff;">Email:</span>
                <span class="summary-value">${emailInput.value}</span>
            </div>` : ''}
            
            ${addressDetails ? `
            <div class="summary-item">
                <span class="summary-label" style="color: #f0f4ff;">Address:</span>
                <span class="summary-value">${addressDetails}</span>
            </div>` : ''}
            
            ${landmarkInput && landmarkInput.value ? `
            <div class="summary-item">
                <span class="summary-label" style="color: #f0f4ff;">Landmark:</span>
                <span class="summary-value">${landmarkInput.value}</span>
            </div>` : ''}
        `;
    };
    
    // Initial update
    setTimeout(updateConsigneeDetails, 500);
    
    // Add event listeners to all inputs
    const consigneeInputs = [
        nameInput, phoneInput, alternatePhoneInput, emailInput, 
        pincodeInput, stateInput, cityInput, addressInput, landmarkInput
    ];
    
    consigneeInputs.forEach(input => {
        if (input) {
            input.addEventListener('input', updateConsigneeDetails);
            input.addEventListener('change', updateConsigneeDetails);
        }
    });
}
</script>

            <style>
  /* Summary items in sidebar */
  .summary-item {
    margin-bottom: 8px;
    font-size: 13px;
  }
  
  .summary-label {
    font-weight: 600;
    color: #2d4c7e;
    display: block;
  }
  
  .summary-value {
    color: #e1d6d6;
    word-break: break-word;
  }
  
  .summary-subitem {
    margin-left: 8px;
    font-size: 12px;
    color: #e1d6d6;
    border-left: 2px solid #e1d6d6;
    padding-left: 6px;
    margin-top: 4px;
  }
</style>

            <script>
  function showComingSoon(featureType) {
    // Uncheck the radio button
    document.querySelector(`input[value="${featureType}"]`).checked = false;
    
    // Show a notification
    Swal.fire({
      title: 'Coming Soon!',
      text: `${featureType} shipment option will be available soon.`,
      icon: 'info',
      confirmButtonText: 'OK',
      confirmButtonColor: '#3085d6'
    });
  }
  // Function to handle client selection and fetch warehouses
  async function handleClientSelection(selectElement, tabId) {
    try {
      // console.log("try part handleClientSelection")
      const clientId = selectElement.value;
      const warehouseDropdown = document.getElementById(`warehouse_dropdown_${tabId}`);
      
      // Don't fetch if no client is selected or "select client" is selected
      if (!clientId || clientId === 'select client') {
        warehouseDropdown.style.display = 'none';
        return;
      }
      
      // Show loading indicator
      warehouseDropdown.style.display = 'block';
      warehouseDropdown.innerHTML = '<div class="text-center mt-2"><i class="fas fa-spinner fa-spin"></i> Loading warehouses...</div>';
      
      try {
        // Fetch warehouses for the selected client using Axios
        const response = await axios.get(`/get_warehouse_addresses?clientId=${clientId}`);
        const data = response.data;
        
        // Create warehouse dropdown content
        if (data && data.filteredAddresses && data.filteredAddresses.length > 0) {
          let warehouseOptions = `
            <div class="form-group mt-2">
              <label for="warehouse_select_${tabId}" class="form-label">Select Warehouse*</label>
              <select class="form-control border-custom" id="warehouse_select_${tabId}" name="warehouse_select[]" required style="
    padding: 15px;
    border-radius: 10px;
">
                <option value="">Select warehouse</option>
          `;
          
          // Add warehouse options
          data.filteredAddresses.forEach(warehouse => {
            warehouseOptions += `<option value="${warehouse.serial}">${warehouse.warehouse_name} (${warehouse.warehouse_address})</option>`;
          });
          
          warehouseOptions += `
              </select>
            </div>
          `;
          
          warehouseDropdown.innerHTML = warehouseOptions;
        } else {
          warehouseDropdown.innerHTML = '<div class="alert alert-warning mt-2">No warehouses found for this client</div>';
        }
      } catch (fetchError) {
        console.error('Error fetching warehouses:', fetchError);
        warehouseDropdown.innerHTML = '<div class="alert alert-danger mt-2">Error loading warehouses. Please try again.</div>';
      }
    } catch (error) {
      console.error('General error in handleClientSelection:', error);
    }
  }

  // Add this to your script section
  
</script>

            <script>
  // Add this to your script section
  document.addEventListener('DOMContentLoaded', function() {
    // Get role data
    const roledata = "<%= role_data.role %>";
    console.log(roledata,"roledata");
    
    if (roledata === "1") {
      // For admin, client dropdowns are already in the form
      // They'll trigger handleClientSelection when changed
      
      // Pre-select client if clientId is provided from server
      const clientId = "<%= clientId %>";
      if (clientId && clientId !== "") {
        // Find all client dropdowns and set their value
        const clientDropdowns = document.querySelectorAll('.multipleclientselection');
        clientDropdowns.forEach(dropdown => {
          if (dropdown.querySelector(`option[value="${clientId}"]`)) {
            dropdown.value = clientId;
            
            // Get the tab ID from the dropdown ID
            const tabId = dropdown.id.replace('client_select_', '');
            
            // Trigger the warehouse fetch function
            handleClientSelection(dropdown, tabId);
          }
        });
      }
    } else {
      console.log("else part")
      // For roles 2 and 4, always use client ID from server for warehouse dropdowns
      // Find all warehouse dropdowns and populate them automatically
      const warehouseDropdowns = document.querySelectorAll('.warehouse-dropdown');
      warehouseDropdowns.forEach(dropdown => {
        // Make sure warehouse dropdown is visible
        dropdown.style.display = 'block';
        
        const tabId = dropdown.id.replace('warehouse_dropdown_', '');
        
        // Create a mock select element with the clientId from server
        const clientId = "<%= clientId %>";
        console.log("mockSelect part, clientId =", clientId);
        
        // Only proceed if clientId is valid
        if (clientId && clientId !== "" && !isNaN(parseInt(clientId))) {
          const mockSelect = { value: clientId };
          
          // Call warehouse fetch function with client ID
          handleClientSelection(mockSelect, tabId);
        } else {
          console.error("Invalid clientId for warehouse dropdown:", clientId);
          dropdown.innerHTML = '<div class="alert alert-warning mt-2">Error: Invalid client ID</div>';
        }
      });
    }
  });
</script>
            <!-- form data collection -->
            <script>
 function collectSingleOrderData() {
  const form = document.getElementById('forming'); // Form element
  
  // Debug the form element and its children
  // console.log("Form element:", form);
  // console.log("Form has children:", form.children.length);
  // console.log("Form fields:", form.elements);
  
  const formData = new FormData(form); // Collect all form data
  console.log("formData", formData);

  
  // Log all form data entries for debugging
  console.log("All form data entries:");
  for (let pair of formData.entries()) {
    console.log(pair[0], pair[1]);
  }
 
  // Extract common fields
  const orderid = formData.get('orderid');
  console.log("orderid", orderid);
  const orderDate = formData.get('orderDate');
  console.log("orderDate", orderDate);
  const InvoiceAmount = formData.get('InvoiceAmount');
  console.log("InvoiceAmount", InvoiceAmount);
  const InvoiceNo = formData.get('InvoiceNO');
  console.log("InvoiceNo", InvoiceNo);
  const poOrder = formData.get('wpid[]');
  console.log("poOrder", poOrder);
  const paymentType = formData.get('paymentType');
  console.log("payment type", paymentType);
 
  // Conditionally collect additional fields based on payment type
  let additionalData = {};
  if (paymentType === 'cod') {
    additionalData = {
      amountCash: formData.get('cod_amount'),
    };
  } else if (paymentType === 'check-on-delivery') {
    additionalData = {
      checkFavourOf: formData.get('check_favour'),
      checkAmount: formData.get('check_amount'),
    };
  }
 
  // Extract consignee details
  const consigneeDetails = {
    name: document.getElementById('consignee_name').value,
    email: document.getElementById('consignee_email').value,
    phone: document.getElementById('consignee_phone').value,
    address: document.getElementById('consignee_address').value,
    pincode: document.getElementById('consignee_pincode').value,
    state: document.getElementById('consignee_state').value,
    city: document.getElementById('consignee_city').value,
    nearby: document.getElementById('consignee_landmark').value,
    alternate_phone: document.getElementById('alternate_mobile').value,
  };
 
  // Log consignee details
  console.log("Consignee details: ", consigneeDetails);
 
  console.log('Collected Fields:', { orderid, orderDate, paymentType ,additionalData});
 
  // Ensure required fields are not empty
 
 
  // Extract product details
  const productNames = formData.getAll('product_name[]');
  const categories = formData.getAll('Category[]');
  const quantities = formData.getAll('Quantity[]');
  const orderValues = formData.getAll('order_value[]');
  const hsnIds = formData.getAll('hsn_id[]');
 
  // Map product data into an array of objects
  const products = productNames.map((_, index) => ({
    productName: productNames[index],
    category: categories[index] || null,
    quantity: parseInt(quantities[index], 10), // Convert to number
    orderValue: parseFloat(orderValues[index]), // Convert to number
    hsnId: hsnIds[index] || null,
  }));
  console.log("shabbar ansari",products)
  // console.log("shabbar ansari",duhudfhdufhuf)
 
  const totalWeight = formData.get('weight_box[]'); 
   // Assuming this is for the entire order
   const weightUnit = form.querySelector('.weight-unit-select').value;
  const unit = form.querySelector('.unit-select').value; // Get selected unit from dropdown
  const quantitiesBoxes = formData.getAll('Quantity_box[]');
  const lengths = formData.getAll('Length[]');
  const breadths = formData.getAll('Breadth[]');
  const heights = formData.getAll('Height[]');
 
  // Map box data into an array of objects
  const boxes = quantitiesBoxes.map((_, index) => ({
    quantity: parseInt(quantitiesBoxes[index], 10), // Quantity of boxes
    length: parseFloat(lengths[index]), // Box length
    breadth: parseFloat(breadths[index]), // Box breadth
    height: parseFloat(heights[index]), // Box height
  }));
 
  // Calculate the total number of boxes (sum of all quantities)
  const totalBoxes = boxes.reduce((sum, box) => sum + box.quantity, 0);
  console.log("the data from the single orders", totalBoxes,boxes,totalWeight,unit)
 
  
  return {
    orderid,
    poOrder,
    orderDate,
    paymentType,
    additionalData,
    consigneeDetails,
    products,
    totalWeight,  // Total weight for the order
    unit,
    weightUnit,          // Unit for dimensions
    totalBoxes,    // Total number of boxes (sum of quantities)
    boxes,
    InvoiceAmount,
    InvoiceNo         // Array of boxes with their quantity and dimensions
  };
}
   

function collectMultipleOrderData() {
    // Collect data from the 'forming' form
    const form = document.getElementById('multipleOrder');
    const formData = new FormData(form);

    // Extract common fields for the order
    const orderid = formData.get('orderid');
    const orderDate = formData.get('orderDate');

    // Initialize PO data array
    const poData = [];

    // Loop through all dynamic tabs to collect PO data
    const tabs = document.querySelectorAll('.tab-pane');
    tabs.forEach((tab, tabIndex) => {
        const tabData = {};

        // Get WPID (PO number)
        const wpidInput = tab.querySelector('.wpid-id');
        if (wpidInput) {
            tabData.wpid = wpidInput.value;
            console.log("wpid: " + wpidInput.value);
        }

        // Get payment type, invoice amount, and invoice number for the current tab
        const paymentTypeSelect = tab.querySelector('.paymentType');
        if (paymentTypeSelect) {
            tabData.paymentType = paymentTypeSelect.value;
            console.log("Payment Type: " + tabData.paymentType);
        }

        const weightUnitSelect = tab.querySelector('select[name="weight_unit[]"]');
        if (weightUnitSelect) {
            tabData.weightUnit = weightUnitSelect.value; // Add weight unit to tabData
            console.log("Weight Unit: " + tabData.weightUnit);
        }

        const invoiceAmountInput = tab.querySelector('input[name="InvoiceAmount[]"]');
        if (invoiceAmountInput) {
            tabData.InvoiceAmount = invoiceAmountInput.value;
            console.log("Invoice Amount: " + tabData.InvoiceAmount);
        }

        const invoiceNoInput = tab.querySelector('input[name="InvoiceNO[]"]');
        if (invoiceNoInput) {
            tabData.InvoiceNo = invoiceNoInput.value;
            console.log("Invoice No: " + tabData.InvoiceNo);
        }
        const warehouseIdInput = tab.querySelector('select[name="warehouse_select[]"]');
        console.log("warehouseIdInput",warehouseIdInput)
        if (warehouseIdInput) {
            tabData.warehouseId = warehouseIdInput.value;
            console.log("Warehouse ID: " + tabData.warehouseId);
        }

        // Collect additional data based on payment type
        if (tabData.paymentType === 'cod') {
            const codAmountInput = tab.querySelector('input[name="amount_cash[]"]');
            if (codAmountInput) {
                tabData.additionalData = {
                    amountCash: codAmountInput.value
                };
            }
        } else if (tabData.paymentType === 'check-on-delivery') {
            const checkFavourInput = tab.querySelector('input[name="check_favour[]"]');
            const checkAmountInput = tab.querySelector('input[name="check_amount[]"]');
            if (checkFavourInput && checkAmountInput) {
                tabData.additionalData = {
                    checkFavourOf: checkFavourInput.value,
                    checkAmount: checkAmountInput.value
                };
            }
        }

        // Initialize products array for the tab
        const products = [];
        tab.querySelectorAll('.product-section').forEach(productSection => {
            const productData = {};

            // Get product details
            const productName = productSection.querySelector('input[name="product_name[]"]');
            if (productName) {
                productData.product_name = productName.value;
                console.log("Product", productData.product_name);
            }
            const category = productSection.querySelector('select[name="Category[]"]');
            if (category) {
                productData.category = category.value;
                console.log("Category", productData.category);
            }
            const quantity = productSection.querySelector('input[name="Quantity[]"]');
            if (quantity) {
                productData.quantity = quantity.value;
                console.log("Quantity", productData.quantity);
            }
            const orderValue = productSection.querySelector('input[name="order_value[]"]');
            if (orderValue) {
                productData.order_value = orderValue.value;
                console.log("Order Value", productData.order_value);
            }
            const hsnId = productSection.querySelector('input[name="hsn_id[]"]');
            if (hsnId) {
                productData.hsn_id = hsnId.value;
                console.log("HSN ID", productData.hsn_id);
            }

            products.push(productData);
            console.log("products inside: " + productData);
        });
        console.log("Products whole data", products);

        if (products.length > 0) {
            tabData.products = products;
        }

        // Collect box data for the current PO
        const boxes = [];
        const weightBoxInput = tab.querySelector('input[name="weight_box[]"]');
        const weightUnit = tab.querySelector('select[name="weight-unit-select"]');
        const dimensionUnitSelect = tab.querySelector('select[name="unit-select"]');
        console.log("dimension data ", dimensionUnitSelect, weightBoxInput);
        const boxData = {};
        let totalBoxes = 0;

        // Collect total weight
        if (weightBoxInput) {
            tabData.totalWeight = weightBoxInput.value; // Add total weight to tabData
            console.log("Total Weight: " + tabData.totalWeight);
        }

        if (weightUnit) {
            boxData.weightUnit = weightUnit.value;
            console.log("Weight Unit for PO: ", boxData.weightUnit);
        }

        if (dimensionUnitSelect) {
            boxData.dimensionUnit = dimensionUnitSelect.value;
            console.log("Dimension Unit for PO: ", boxData.dimensionUnit);
        }

        // Collect box-specific data
        tab.querySelectorAll('.box-entry .row').forEach(boxRow => {
            const boxDataDetails = {};

            // Get box details for each entry
            const boxQuantity = boxRow.querySelector('input[name="Quantity_box[]"]');
            if (boxQuantity) {
                const quantityValue = parseInt(boxQuantity.value, 10) || 0;
                boxDataDetails.boxQuantity = quantityValue;
                totalBoxes += quantityValue; // Add to total boxes
            }
            const length = boxRow.querySelector('input[name="Length[]"]');
            if (length) {
                boxDataDetails.length = length.value;
                console.log("Length", boxDataDetails.length);
            }
            const breadth = boxRow.querySelector('input[name="Breadth[]"]');
            if (breadth) {
                boxDataDetails.breadth = breadth.value;
                console.log("Breadth", boxDataDetails.breadth);
            }
            const height = boxRow.querySelector('input[name="Height[]"]');
            if (height) {
                boxDataDetails.height = height.value;
                console.log("Height", boxDataDetails.height);
            }

            boxes.push(boxDataDetails);
            console.log("Boxes inside: ", boxDataDetails);
        });

        // Add the collected box data to the tabData
        if (boxes.length > 0) {
            tabData.boxes = boxes;
        }

        // Add the PO-level weight and unit data to the tabData
        if (boxData.weightUnit) {
            tabData.weightUnit = boxData.weightUnit; // Add weight unit to tabData
        }

        // Add the tab data (PO data) to the PO data array
        tabData.totalBoxes = totalBoxes;
        poData.push(tabData);
    });

    console.log("PO data");
    const consigneeDetails = {
    name: document.getElementById('consignee_name').value,
    email: document.getElementById('consignee_email').value,
    phone: document.getElementById('consignee_phone').value,
    address: document.getElementById('consignee_address').value,
    pincode: document.getElementById('consignee_pincode').value,
    state: document.getElementById('consignee_state').value,
    city: document.getElementById('consignee_city').value,
    nearby: document.getElementById('consignee_landmark').value,
    alternate_phone: document.getElementById('alternate_mobile').value,
  };

    // Validate PO data (ensure each PO has valid products and boxes)
    const validPoData = poData.filter(po => po.wpid && (po.products?.length > 0 || po.boxes?.length > 0 || po.totalWeight));

    // Log the filtered PO data for debugging
    console.log("Valid PO data", validPoData);

    // Return the complete data for multiple orders, including PO-specific data
    return {
        consigneeDetails,
        orderid,
        orderDate,
        poData: validPoData // Add PO data here
    };
}
 
 
</script>

            <!-- स्क्रिप्ट्स -->
            <script src="/js/main.js"></script>
        </body>

    </html>