<%- include('../../partials/header') %>
  <%- include('../../partials/left-sidebar') %>

    <main>
      <style>
    .flex-column {
    font-size: 12px ;
    }
    .b, strong{
      font-size: 12px ;
    }

    /* Completely hide ALL DataTable sorting arrows and disable clicks */
    .data-table-rows table.dataTable thead th:before,
    .data-table-rows table.dataTable thead th:after,
    .data-table-rows table.dataTable thead .sorting:before,
    .data-table-rows table.dataTable thead .sorting:after,
    .data-table-rows table.dataTable thead .sorting_asc:before,
    .data-table-rows table.dataTable thead .sorting_asc:after,
    .data-table-rows table.dataTable thead .sorting_desc:before,
    .data-table-rows table.dataTable thead .sorting_desc:after,
    .data-table-rows table.dataTable thead .sorting_asc_disabled:before,
    .data-table-rows table.dataTable thead .sorting_asc_disabled:after,
    .data-table-rows table.dataTable thead .sorting_desc_disabled:before,
    .data-table-rows table.dataTable thead .sorting_desc_disabled:after {
      display: none !important;
      content: none !important;
      visibility: hidden !important;
      opacity: 0 !important;
    }

    /* Disable sorting clicks on table headers */
    .data-table-rows table.dataTable thead th {
      cursor: default !important;
      pointer-events: none !important;
    }

    .data-table-rows table.dataTable thead th.sorting,
    .data-table-rows table.dataTable thead th.sorting_asc,
    .data-table-rows table.dataTable thead th.sorting_desc {
      cursor: default !important;
      pointer-events: none !important;
    }
      </style>
      <div class="container-fluid">
        <div class="row">
          <div class="col-12">
            <h1 class="p-0">Order Return</h1><br>
            <nav class="breadcrumb-container d-none d-sm-block d-lg-inline-block" aria-label="breadcrumb">
              <ol class="breadcrumb ">
                <li class="breadcrumb-item">
                  <a href="#">Home</a>
                </li>
                <li class="breadcrumb-item">
                  <a href="#">E-commerce</a>
                </li>
                <li class="breadcrumb-item active" aria-current="page">Order Return</li>
              </ol>
            </nav>
            <div class="top-right-button-container">
              <div class="btn-group me-2">
                <button class="btn  btn-lg dropdown-toggle" type="button" data-toggle="dropdown"
                  aria-haspopup="true" aria-expanded="false">
                  EXPORT
                </button>
                <div class="dropdown-menu">
                  <a class="dropdown-item" id="dataTablesCopy" href="#" onclick="exportToCSV()">
                    <i class="fas fa-copy me-2"></i>CSV Export
                  </a>
                  <a class="dropdown-item" id="dataTablesExcel" href="#" onclick="exportToExcel()">
                    <i class="fas fa-file-excel me-2"></i>Excel Export
                  </a>
                  <a class="dropdown-item" id="dataTablesPdf" href="#" onclick="exportToPDF()">
                    <i class="fas fa-file-pdf me-2"></i>PDF Export
                  </a>
                </div>
              </div>

              <!-- Bulk Actions Button -->
              <div class="btn-group">
                <button class="btn btn-sm" id="bulkActionsDropdown" type="button"
                  data-bs-toggle="dropdown" aria-expanded="false" disabled>
                  <i class="fas fa-tasks me-2"></i><strong >BULK ACTIONS</strong>
                  <span id="selectedCountBadge" class="text-primary mx-2" style="display: none;font-size: 14px;">0</span>
                </button>
                <div class="dropdown-menu dropdown-menu-end">
                  <a class="dropdown-item bulk-print-label" href="#" data-size="4X6"
                    onclick="generateBulkLabels(getSelectedRows(), '4X6')">
                    <i class="fas fa-print me-2"></i>Print 4X6 Labels
                  </a>
                  <a class="dropdown-item bulk-print-label" href="#" data-size="4X4"
                    onclick="generateBulkLabels(getSelectedRows(), '4X4')">
                    <i class="fas fa-print me-2"></i>Print 4X4 Labels
                  </a>
                  <a class="dropdown-item bulk-print-label" href="#" data-size="A4"
                    onclick="generateBulkLabels(getSelectedRows(), 'A4')">
                    <i class="fas fa-print me-2"></i>Print A4 Labels
                  </a>

                </div>
              </div>
            </div>

          


            <div class="separator"></div>
          </div>
        </div>
        <!-- main content body start -->
        <!-- MAIN CONTENT -->
        <div id="main-content">
          <div class="container pt-4">
            <!-- Orders Table -->
            <div class="row ">
              <div class="col-12 mb-4 data-table-rows">           

                <table class="data-table data-table-feature" id="ordersTable">
                  <thead style="font-size: 14px;text-align: center;">
                    <tr>
                      <th>
                        <div class="d-flex align-items-center">
                          <input class="form-check-input me-2" type="checkbox" id="selectAll" title="Select All">
                          <span class="select-all-label">All</span>
                          <span id="selectedCountBadge" class="badge bg-primary ms-2" style="display: none;">0</span>
                        </div>
                      </th>
                      <th>Order/LR Details</th>
                      <th>Consignor & Consignee</th>
                      <th>Weight Details/Payment Mode</th>
                      <th>Courier</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody id="ordersTableBody">
                    <% // Separate order_id (for API calls) and orderid (for display) // order_id is the numeric ID used in API calls // orderid is the display string shown to users %>

                      <% result.forEach(function(order) {
                        const lrDateObj = new Date(order.created_at);
                        const orderIdForAPI = order.order_id; // Use order_id for API calls
                        const orderIdForDisplay = order.orderid; // Use orderid for display
                        const orderDateObj = new Date(order.order_date || order.created_at || Date.now());
                        const formatDate = (date) => date.toLocaleDateString('en-IN', {
                          weekday: 'short',
                          year: 'numeric',
                          month: 'short',
                          day: 'numeric',
                          timeZone: 'Asia/Kolkata'
                        });
                        const consigneeFull = ((order.consignee_first_name || '') + ' ' + (order.consignee_last_name || '')).trim();
                        const courierName = (order.tagged_api || '').toLowerCase();
                        let logoPath = '/assets/images/logos/logo-dark.png';
                        if (courierName.includes('delhivery')) logoPath = '/assets/images/logos/delhivery.png';
                        else if (courierName.includes('xpress') || courierName.includes('expressbees')) logoPath =
                        '/assets/images/logos/expressbees.png';
                        else if (courierName.includes('dtdc')) logoPath = '/assets/images/logos/dtdc.png';
                        else if (courierName.includes('bluedart')) logoPath = '/assets/images/BlueDart.png';
                        else if (courierName.includes('fedex')) logoPath = '/assets/images/FedEx.png';
                        %>

                        <tr class="order-card  mb-2" data-client="<%= order.client_id %>" data-company-name="<%= order.company_name %>"
                          data-created="<%= lrDateObj.toISOString() %>" data-payment="<%= order.payment_mode || '' %>"
                          data-warehouse-pincode="<%= order.warehouse_pincode || 'N/A' %>"
                          data-consignee-pincode="<%= order.consignee_pincode || 'N/A' %>"
                          data-weight="<%= order.chargable_weight || 'N/A' %>"
                          data-package-weight="<%= order.chargable_weight || 'N/A' %>"
                          data-chargeable-weight="<%= order.chargable_weight || 'N/A' %>"
                          data-volumetric-weight="<%= order.volumetric_weight || 'N/A' %>"
                          data-total-weight="<%= order.total_weight || 'N/A' %>"
                          data-weight-unit="<%= order.weight_unit || 'kg' %>"
                          data-tagged-api="<%= order.tagged_api || 'N/A' %>"
                          data-service-type="<%= order.forwarder_product_type || 'N/A' %>"
                          data-charges="<%= order.total_lr_charges || 'N/A' %>"
                          data-lr-date="<%= lrDateObj.toISOString() %>" data-eta="<%= order.eta || 3 %>"
                          data-pickup-zone="<%= order.pickup_zone || 'NA' %>"
                          data-destination-zone="<%= order.destination_zone || 'NA' %>"
                          data-warehouse-address="<%= order.warehouse_address || 'NA' %>"
                          data-consignee-address="<%= order.consignee_address1 || 'NA' %>"
                          data-grand-total="<%= order.grand_total || 'N/A' %>"
                          data-collectable-amount="<%= order.collectable_amount || 'N/A' %>"
                          data-mobile-no="<%= order.consignee_phone || 'N/A' %>"
                          data-email-id="<%= order.consignee_email || 'N/A' %>"
                          data-consignee-phone-no="<%= order.consignee_phone || 'N/A' %>"
                          data-consignee-first-name="<%= order.consignee_first_name || 'N/A' %>"
                          data-consignee-last-name="<%= order.consignee_last_name || 'N/A' %>"
                          data-consignee-email-id="<%= order.consignee_email || 'N/A' %>"
                          data-invoice-no="<%= order.invoice_no || 'N/A' %>"
                          data-order-id-db="<%= order.orderid || 'N/A' %>"
                          data-invoice-amount="<%= order.grand_total || 'N/A' %>"
                          data-status="<%= order.status !== null && order.status !== undefined ? order.status : 'N/A' %>"
                          data-order-id="<%= orderIdForAPI %>">

                          <!-- Select -->
                          <td class="text-center">
                            <input class="form-check-input rowCheckbox" type="checkbox" data-id="<%= order.lr_no %>">
                          </td>

                          <!-- Order/LR Details -->
                          <td>
                            <div class="d-flex flex-column">
                              <div class="order-id lrNo fw-bold text-primary" role="button" tabindex="0"
                                data-bs-toggle="offcanvas" data-bs-target="#orderDetailsCanvas"
                                aria-controls="orderDetailsCanvas" data-lrno="<%= order.lr_no %>"
                                data-vendor-type="<%= order.tagged_api %>" data-orderid="<%= orderIdForAPI %>"
                                style="cursor: pointer;">
                                <%= order.lr_no %>
                              </div>
                              <small class="text-muted">LR Date: <%= formatDate(lrDateObj) %></small>
                              <div class="order-id mt-1">Order: <%= orderIdForDisplay %>
                              </div>
                              <small class="text-muted">Order Date: <%= formatDate(orderDateObj) %></small>
                              <button type="button" class="btn btn-sm w-90 btn-primary mt-1" data-toggle="modal"
                                data-backdrop="static" data-target="#exampleModalRight">
                                Track Order
                              </button>
                            </div>
                          </td>

                          <!-- Company & Consignee -->
                          <td>
                            <div class="d-flex flex-column">
                              <div class="mb-2">
                                <strong class="text-primary">Consignor</strong>
                                <div class="text-muted small">
                                  <%= order.company_name || 'N/A' %>
                                </div>
                                <div class="text-muted small">Pincode: <%= order.warehouse_pincode || 'N/A' %>
                                </div>
                              </div>
                              <div>
                                <strong class="text-primary">Consignee</strong>
                                <div class="text-muted small">
                                  <%= order.consignee_first_name || 'N/A' %>
                                    <%= order.consignee_last_name || '' %>
                                      (<%= order.consignee_city || 'N/A' %>)
                                </div>
                                <div class="text-muted small">Phone: <%= order.consignee_phone || 'N/A' %>
                                </div>
                                <div class="text-muted small">Alt Phone: <%= order.consignee_alternate_mobile || 'N/A'
                                    %>
                                </div>
                              </div>
                            </div>
                          </td>

                          <!-- Weight Details -->
                          <td>
                            <div class="text-start">
                              <div style="font-size: 12px;display: flex;justify-content: space-between;"><strong class="text-primary mx-2">Chargeable:</strong>
                               <span> <%= order.chargable_weight || 'N/A' %> kg</span>
                              </div>
                              <div style="font-size: 12px;display: flex;justify-content: space-between;"><strong class="text-primary mx-2">Volumetric: </strong>
                                <span> <%= order.volumetric_weight || 'N/A' %> kg</span>
                              </div>
                              <div style="font-size: 12px;display: flex;justify-content: space-between;"><strong class="text-primary mx-2">Actual: </strong>
                                <span> <%= order.total_weight || 'N/A' %> kg</span>
                              </div>
                              <div style="font-size: 12px;display: flex;justify-content: space-between;"><strong class="text-primary mx-2">Payment Mode: </strong>
                                <span style="font-weight: bold;text-transform:uppercase;"> <%= order.payment_mode || 'N/A' %></span>
                              </div>
                              <div style="font-size: 12px;display: flex;justify-content: space-between;"><strong class="text-primary mx-2">Order Value: </strong>
                                <span>₹ <%= order.grand_total || 'N/A' %></span>
                              </div>
                            </div>
                          </td>

                          <!-- Courier Partner -->
                          <td>
                            <div class="courier-compact card" data-courier="<%= order.tagged_api %>">
                              <div class=" d-flex align-items-center justify-content-between p-2  flex-row"
                                style="cursor: pointer;" onclick="toggleCourierOptions(this)">
                                <div class="d-flex flex-column align-items-satrt p-2">
                                  <img src="<%= logoPath %>" alt="<%= order.tagged_api || 'Courier' %>"
                                    style="width: 100px; height: 40px; object-fit: contain; border-radius: 4px;">
                                   
                                  <div class="d-flex justify-content-between align-items-center text-primary small mt-1">
                                    <span style="font-size: 12px;">
                                      <%= order.forwarder_product_type || 'N/A' %>
                                      <% if ((order.forwarder_product_type||'').toLowerCase().includes('air')) { %>
                                        <i class="fas fa-plane ms-1 text-primary" aria-hidden="true"></i>
                                      <% } else { %>
                                        <i class="fas fa-truck ms-1 text-primary" aria-hidden="true"></i>
                                      <% } %>
                                    </span>
                                  
                                  </div>
                                  
                                </div>
                                
                                <div class="d-flex flex-column align-items-center p-2">
                                  <span>Shipping Cost</span>
                                  <span class="badge  text-primary mb-1" style="font-size: 14px;">₹<%=
                                      order.total_lr_charges || 'N/A' %></span>
                                      <span class="dropdown-toggle text-primary" data-bs-toggle="dropdown" aria-expanded="false"style="font-size: x-large;">
                                        <i class="fas fa-chevron-down"></i>
                                      </span>
                                </div>
                                
                                
                              </div>
    <!-- Expandable Options -->
    <div class="courier-options-compact"
    style="max-height: 0; overflow: hidden; transition: max-height 0.3s ease;">
    <div class=" border-start border-end rounded-bottom p-2">
     
      <div class="d-flex justify-content-between align-items-center mb-1 p-1">
        <div>
          <div class="fw-semibold small">Base Rate</div>
        </div>
        <div class="text-end">
          <div class="fw-bold small">₹<%= order.base_rate || 'N/A' %>
          </div>
        </div>
      </div>
      <div class="d-flex justify-content-between align-items-center mb-1 p-1">
        <div>
          <div class="fw-semibold small">Total Additional</div>
        </div>
        <div class="text-end">
          <div class="fw-bold small">₹<%= order.total_additional || 'N/A' %>
          </div>
        </div>
      </div>
      <div class="d-flex justify-content-between align-items-center mb-1 p-1">
        <div>
          <div class="fw-semibold small">Total GST (18%)</div>
        </div>
        <div class="text-end">
          <div class="fw-bold small">₹<%= order.total_gst || 'N/A' %>
          </div>
        </div>
      </div>
       <!-- Total -->
       <div class="d-flex fw-bold text-primary justify-content-between align-items-center mb-1 p-1">
        <div>
          <div class="fw-semibold  small">Total Rate</div>
        </div>
        <div class="text-end">
          <div class="fw-bold text-outline-primary small">₹<%= order.total_lr_charges || 'N/A' %>
          </div>
        </div>
      </div>
    </div>
  </div>
                          
                            </div>
                          </td>

                          <!-- Actions -->
                          <td>
                            <div class="d-flex align-items-center gap-2">
                              <!-- Pickup Request -->
                              <!--
                              <button class="btn pickup-request d-flex align-items-center justify-content-center" data-orderid="<%= orderIdForAPI %>"
                                data-client-id="<%= order.client_id %>" data-courier="<%= order.tagged_api %>"
                                data-awb-number="<%= order.lr_no %>" title="Pickup Request"
                                onclick="requestPickup('<%= orderIdForAPI %>', '<%= order.client_id %>', '<%= order.tagged_api %>')">
                                <i class="text-primary simple-icon-directions me-1 d-flex align-items-center" aria-hidden="true"></i>
                              </button>
                              -->

                              <!-- Cancel LR -->
                              <button class="btn cancel-lr d-flex align-items-center justify-content-center" data-action="cancel-lr-awb"
                                data-courier="<%= order.tagged_api %>" data-awb-number="<%= order.lr_no %>"
                                data-orderid="<%= orderIdForAPI %>" data-client-id="<%= order.client_id %>"
                                title="Cancel LR"
                                onclick="cancelLR('<%= orderIdForAPI %>', '<%= order.tagged_api %>', '<%= order.lr_no %>', '<%= order.client_id %>')"
                                style="display: flex; align-items: center; justify-content: center;">
                                <i class="text-primary simple-icon-minus d-flex align-items-center" aria-hidden="true"></i>
                              </button>

                              <!-- Shipping Labels -->
                              <div class="dropdown">
                                <button class="btn  d-flex align-items-center justify-content-center" type="button" data-bs-toggle="dropdown"
                                  aria-expanded="false" title="Print Shipping Label"
                                  style="display: flex; align-items: center; justify-content: center;">
                                  <i class="text-primary simple-icon-menu d-flex align-items-center" aria-hidden="true"></i>
                                </button>
                                <div class="dropdown-menu">
                                  <% if (order.tagged_api && order.tagged_api.includes("Delhivery/LTL-surface")) { %>
                                    <a class="dropdown-item print-label d-flex align-items-center" href="#" data-size="4X4"
                                      data-courier="<%= order.tagged_api %>" data-awb-number="<%= order.lr_no %>"
                                      data-orderid="<%= orderIdForAPI %>" aggrigator-id="<%= order.aggrigator_id %>"
                                      client-id="<%= order.client_id %>"
                                      onclick="generateShippingLabel('<%= orderIdForAPI %>', '4X4', '<%= order.tagged_api %>', '<%= order.lr_no %>', '<%= order.client_id %>', '<%= order.aggrigator_id %>')">
                                      <i class="text-primary iconsminds-receipt-4 me-2 d-flex align-items-center"></i>4X4 Label
                                    </a>
                                  <% } else { %>
                                    <a class="dropdown-item print-label d-flex align-items-center" href="#" data-size="4X6"
                                      data-courier="<%= order.tagged_api %>" data-awb-number="<%= order.lr_no %>"
                                      data-orderid="<%= orderIdForAPI %>" aggrigator-id="<%= order.aggrigator_id %>"
                                      client-id="<%= order.client_id %>"
                                      onclick="generateShippingLabel('<%= orderIdForAPI %>', '4X6', '<%= order.tagged_api %>', '<%= order.lr_no %>', '<%= order.client_id %>', '<%= order.aggrigator_id %>')">
                                      <i class="text-primary iconsminds-receipt-4 me-2 d-flex align-items-center"></i>4X6 Label
                                    </a>
                                    <a class="dropdown-item print-label d-flex align-items-center" href="#" data-size="A4"
                                      data-courier="<%= order.tagged_api %>" data-awb-number="<%= order.lr_no %>"
                                      data-orderid="<%= orderIdForAPI %>" aggrigator-id="<%= order.aggrigator_id %>"
                                      client-id="<%= order.client_id %>"
                                      onclick="generateShippingLabel('<%= orderIdForAPI %>', 'A4', '<%= order.tagged_api %>', '<%= order.lr_no %>', '<%= order.client_id %>', '<%= order.aggrigator_id %>')">
                                      <i class="text-primary iconsminds-receipt-4 me-2 d-flex align-items-center"></i>A4 Label
                                    </a>
                                    <a class="dropdown-item print-label d-flex align-items-center" href="#" data-size="4X4"
                                      data-courier="<%= order.tagged_api %>" data-awb-number="<%= order.lr_no %>"
                                      data-orderid="<%= orderIdForAPI %>" aggrigator-id="<%= order.aggrigator_id %>"
                                      client-id="<%= order.client_id %>"
                                      onclick="generateShippingLabel('<%= orderIdForAPI %>', '4X4', '<%= order.tagged_api %>', '<%= order.lr_no %>', '<%= order.client_id %>', '<%= order.aggrigator_id %>')">
                                      <i class="text-primary iconsminds-receipt-4 me-2 d-flex align-items-center"></i>4X4 Label
                                    </a>
                                    <a class="dropdown-item print-label d-flex align-items-center" href="#" data-size="4X2"
                                      data-courier="<%= order.tagged_api %>" data-awb-number="<%= order.lr_no %>"
                                      data-orderid="<%= orderIdForAPI %>" aggrigator-id="<%= order.aggrigator_id %>"
                                      client-id="<%= order.client_id %>"
                                      onclick="generateShippingLabel('<%= orderIdForAPI %>', '4X2', '<%= order.tagged_api %>', '<%= order.lr_no %>', '<%= order.client_id %>', '<%= order.aggrigator_id %>')">
                                      <i class="text-primary iconsminds-receipt-4 me-2 d-flex align-items-center"></i>4X2 Label
                                    </a>
                                  <% } %>
                                </div>
                              </div>
                            </div>
                          </td>

                        </tr>

                        <% }); %>
                  </tbody>
                </table>

              </div>
            </div>


            <!-- main content body end -->

          </div>


          <div class="modal fade modal-right" id="exampleModalRight" tabindex="-1" role="dialog"
            aria-labelledby="exampleModalRight" aria-modal="true" style="padding-right: 15px;">
            <div class="modal-dialog" role="document" style="margin: 0; margin-right: 0; max-width: 100%;">
              <div class="modal-content">
                <div class="modal-header d-flex justify-content-between align-items-center">
                  <h5 class="modal-title mb-0">Shipment Overview & Tracking</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                </div>
                <div class="modal-body">
                  <div class="row">
                    <!-- Left panel - Shipment Overview -->
                    <div class="col-sm-4">
                      <aside class="left-panel p-4 d-flex flex-column border-end h-100">
                        <header class="d-flex justify-content-between align-items-center mb-4">
                          <h2 class="fw-semibold fs-6 text-dark mb-0">Shipment Overview & Tracking</h2>
                          <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                        </header>

                        <!-- Delivery Date Card -->
                        <div class="d-flex justify-content-between align-items-start mb-4">
                          <div>
                            <p class="text-muted small mb-1" id="orderDateDisplay">Order Date: Dec 15, 2024</p>
                            <p class="text-muted small mb-1">Estimated Delivery Date</p>
                            <p class="fw-bold fs-5 mb-0" id="deliveryDay">Monday</p>
                            <p class="text-muted small mb-2" id="deliveryMonth">February</p>
                            <p class="delivery-date mb-2" id="deliveryDate">25</p>
                            <p class=" mb-0" id="lrNumberDisplay" style="color: #333;">AWB NUMBER</p>
                            <p class=" fw-semibold fs-5 mb-0" id="lrNumberData"
                              style="color:  #4caf50;font-weight: 800;">12345
                            </p>
                            <p class="text-muted " id="orderIdDisplay">Order ID #18498-98018</p>
                          </div>
                          <div class="align-self-start">
                            <div class=" small mb-1">Invoice Amount</div>
                            <div class=" small mb-1" id="grandTotal" style="font-size:1rem; color:#333;">₹0</div>
                            <div class="text-muted small mb-1">Payment Type</div>
                            <div class=" small mb-1" style="font-size:3rem; color:#333;text-transform: uppercase;"
                              id="paymentType">COD</div>

                            <div class="text-muted small mb-1" id="codtitle">COD Amount</div>
                            <div class=" small mb-1" id="collectableAmount" style="font-size:3rem; color:#333;">₹ 0
                            </div>
                          </div>
                        </div>

                        <!-- Shipment Route -->
                        <section class="mb-4">
                          <div class="mb-1">
                            <strong class="text-muted small">ZONE <br>FROM &rarr; TO</strong>
                          </div>
                          <div class="d-flex justify-content-between align-items-center mb-1">
                            <span class="small fw-semibold" id="shipmentRoute">Florence → Stockholm</span>
                            <img id="courierLogo" src="assets/images/logos/default.png" alt="Courier Logo"
                              style="width: 120px; height: 60px; object-fit: contain;">
                          </div>
                        </section>

                        <!-- Current Shipment Card -->
                        <section class="border rounded-3 p-3 mb-4 d-flex flex-column hover-effect">
                          <div class="d-flex justify-content-between align-items-center mb-1">
                            <span class="small fw-semibold">
                              <span class="text-muted">From:</span>
                            <span id="fromLocation">Norra Nynäshamn</span>
                              <span class="fw-bold ms-2 text-muted">To:</span>
                              <span class="fw-bold" id="toLocation">Stockholm</span>
                            </span>
                          </div>
                          <span class="status-badge status-in-transit" style="width: fit-content;" id="currentStatus">IN
                            TRANSIT</span>
                          <div class="text-muted small mb-2" id="lrNumber">Order ID #29698-98971</div>

                          <!-- Progress Bar -->
                          <div class="progress tracking-progress mb-3">
                            <div class="progress-bar tracking-progress-bar" style="width: 70%"></div>
                          </div>

                          <!-- Shipment Details -->
                          <div class="row gx-2 small text-muted mb-3">
                            <div class="col-6 col-sm-3 mb-2 mb-sm-0">
                              <div class="fw-semibold text-dark">Sender</div>
                              <span id="senderName">Amazon</span>
                            </div>
                            <div class="col-6 col-sm-3 mb-2 mb-sm-0">
                              <div class="fw-semibold text-dark">Order Date</div>
                              <span id="departureDate">15 Dec<br>03:27 PM</span>
                            </div>
                            <div class="col-6 col-sm-3">
                              <div class="fw-semibold text-dark">Service Type</div>
                              <span id="serviceType">Express</span>
                            </div>
                            <div class="col-6 col-sm-3">
                              <div class="fw-semibold text-dark">Weight</div>
                              <span id="packageWeight">5.2 kg</span>
                            </div>
                          </div>

                          <!-- Courier Information -->
                          <div class="d-flex align-items-center gap-3">
                            <img src="assets/images/logos/default.png"
                              class="courier-img rounded-circle" alt="Courier Harris Whitaker" id="roundlogo" />
                            <div class="flex-grow-1 small">
                              <div class="fw-semibold">Courier Partner</div>
                              <span id="courierPartner">Harris Whitaker</span>
                            </div>
                            <button class="btn btn-sm p-2 rounded-circle border" type="button"
                              aria-label="Chat with courier">
                              <i class="fas fa-comment-alt text-muted"></i>
                            </button>
                            <button class="btn btn-sm p-2 rounded-circle border" type="button"
                              aria-label="Call courier">
                              <i class="fas fa-phone-alt text-muted"></i>
                            </button>
                          </div>
                        </section>
                      </aside>
                    </div>
                    <!-- Middle panel - Map and Tracking Details -->
                    <div class="col-sm-5">
                      <div class="right-panel">
                        <div class="d-flex flex-column flex-md-row gap-4 flex-grow-1">
                          <!-- Map Section -->
                          <section class="flex-grow-1 d-flex flex-column">
                            <!-- Tracking Summary Card -->
                            <div
                              class="card rounded-3 p-4 mb-4 d-flex flex-column flex-md-row align-items-center justify-content-between gap-3 hover-effect">
                              <div class="d-flex flex-column flex-md-row align-items-center gap-3">
                                <div class="small fw-semibold" id="trackingOrderId">Order ID #29698-98971</div>
                                <span class="status-badge status-in-transit" id="trackingStatus">IN TRANSIT</span>
                              </div>
                              <div class="position-relative d-inline-block" style="z-index: 10;">
                                <button class="btn btn-outline-secondary btn-sm rounded-pill px-3" type="button"
                                  id="contactCourierBtn" onmouseenter="showCourierBalloon(this)"
                                  onmouseleave="hideCourierBalloon(this)">
                                  Contact courier
                                </button>
                                <div class="courier-balloon shadow-lg animate__animated animate__fadeIn"
                                  style="display:none; position:absolute; top:110%; left:50%; transform:translateX(-50%); min-width:220px; background:#fff; border-radius:12px; border:1px solid #e0e0e0; padding:1rem; box-shadow:0 4px 16px rgba(0,0,0,0.10); font-size:0.95rem;">
                                  <div class="fw-semibold mb-1" style="color:#2d3a4a;">Dispatch Solutions</div>
                                  <div>
                                    <a href="mailto:customercare@dispatch.co.in" class="text-decoration-none"
                                      style="color:#007bff;">
                                      customercare@dispatch.co.in
                                    </a>
                                  </div>
                                  <div>
                                    <a href="tel:+919313388388" class="text-decoration-none" style="color:#007bff;">
                                      +91 9313 388 388
                                    </a>
                                  </div>
                                </div>
                              </div>
                              <script>
                                function showCourierBalloon(btn) {
                                  const balloon = btn.parentElement.querySelector('.courier-balloon');
                                  if (balloon) {
                                    balloon.style.display = 'block';
                                    balloon.classList.add('animate__fadeIn');
                                  }
                                }
                                function hideCourierBalloon(btn) {
                                  const balloon = btn.parentElement.querySelector('.courier-balloon');
                                  if (balloon) {
                                    balloon.style.display = 'none';
                                    balloon.classList.remove('animate__fadeIn');
                                  }
                                }
                              </script>
                            </div>
          
                            <!-- Tracking Details Grid -->
                            <div class="card p-4 mb-4">
                              <div class="row g-3">
                                <!-- From Section -->
                                <div class="col-lg-2 col-md-4 col-6">
                                  <div class="text-center">
                                    <div class="fw-semibold mb-2">From</div>
                                    <div class="fw-bold mb-1" id="trackingFromCity">Norra Nynäshamn</div>
                                    <div class="small" id="trackingFromwarehouse">Warehouse</div>
                                  </div>
                                </div>

                                <!-- To Section -->
                                <div class="col-lg-2 col-md-4 col-6">
                                  <div class="text-center">
                                    <div class="fw-semibold mb-2">To</div>
                                    <div class="fw-bold mb-1" id="trackingToCity">Stockholm</div>
                                    <div class="small mb-1" id="trackingToAddress">Sweden</div>
                                    <div class="small" id="trackingpincode">123456</div>
                                  </div>
                                </div>

                                <!-- Consignee Section -->
                                <div class="col-lg-2 col-md-4 col-6">
                                  <div class="text-center">
                                    <div class="fw-semibold mb-2">Consignee</div>
                                    <div class="fw-bold mb-1" id="trackingConsignee">Farsta</div>
                                    <div class="small" id="trackingConsigneeCity">Sweden</div>
                                  </div>
                                </div>

                                <!-- Shipment Charges Section -->
                                <div class="col-lg-3 col-md-6 col-6">
                                  <div class="text-center">
                                    <div class="fw-semibold mb-2">Shipment Charges</div>
                                    <div class="fw-bold" id="trackingCharges">₹246</div>
                                  </div>
                                </div>

                                <!-- LR Number Section -->
                                <div class="col-lg-3 col-md-6 col-6">
                                  <div class="text-center">
                                    <div class="fw-semibold mb-2">LR Number</div>
                                    <div class="fw-bold" id="trackingLrNumber">LR123456</div>
                                  </div>
                                </div>
                              </div>
                            </div>
          
                            <!-- Map Container -->
                            <!-- <div class="map-container flex-grow-1 mb-4">
                              <img src="https://storage.googleapis.com/a1aa/image/b69f93a4-d7b9-42b7-8f75-1d7571c97426.jpg"
                                class="img-fluid w-100 h-100 object-fit-cover" alt="Package delivery route map" />
                              <div class="map-controls">
                                <button class="map-control-btn" type="button" aria-label="Search" style="border: none;">
                                  <i class="fas fa-search text-muted"></i>
                                </button>
                                <button class="map-control-btn" type="button" aria-label="Map settings" style="border: none;">
                                  <i class="fas fa-cog text-muted"></i>
                                </button>
                              </div>
                            </div> -->
                          </section>
                        </div>
                      </div>
                    </div>
                    <!-- Right panel - Shipment Status Timeline -->
                    <div class="col-sm-3">
                      <section class="card rounded-3 p-4 hover-effect h-100" style="min-width: 300px;">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                          <h3 class="h5 fw-semibold mb-0">Shipment Status</h3>
                        </div>
                        <div class="card border-0" id="deliveryTimeline">
                          <!-- Dynamic timeline will be populated here -->
                          <div class="card-body p-4">
                            <div class="text-center text-muted py-4">
                              <i class="fas fa-shipping-fast fa-3x mb-3 text-muted"></i>
                              <h5 class="text-dark mb-2">Click on any order to view tracking details</h5>
                              <p class="text-muted mb-0">Status timeline will appear here</p>

                            </div>
                          </div>
                        </div>
                      </section>
                    </div>
                  </div>
                </div>

              </div>
            </div>
          </div>
          <!-- Dynamic Data Functions -->
          <script>
            // ========== DYNAMIC DATA MANAGEMENT FUNCTIONS ==========

            // Function to dynamically load and update order data
            function loadDynamicOrderData() {
              console.log('Loading dynamic order data...');

              // Get current page and filters
              const pageInfo = ordersTable ? ordersTable.page.info() : { page: 0, length: 10 };
              const currentFilters = activeFilters;

              // Make AJAX call to get fresh data
              const apiUrl = `${window.location.protocol}//${window.location.hostname}:8001/api/ecom/orders/dynamic`;
              fetch(apiUrl, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  page: pageInfo.page + 1,
                  limit: pageInfo.length,
                  filters: currentFilters
                })
              })
                .then(response => {
                  if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                  }
                  return response.json();
                })
                .then(data => {
                  if (data.success && data.orders) {
                    updateOrdersDisplay(data.orders);
                    updatePaginationInfo(data.totalCount, data.page, data.limit);
                  }
                })
                .catch(error => {
                  console.error('Error loading dynamic data:', error);
                  showErrorNotification('Failed to load latest order data. Please check your connection.');
                });
            }

            // Function to update orders table with dynamic data
            function updateOrdersDisplay(orders) {
              if (!ordersTable) return;

              // Clear existing rows
              ordersTable.clear();

              // Add new rows
              orders.forEach(order => {
                const rowData = createOrderRowData(order);
                ordersTable.row.add(rowData);
              });

              // Redraw table
              ordersTable.draw(false);

              // Update allOrders array for other functions
              allOrders = orders;
              filteredOrders = orders.slice();
            }

            // Function to create row data for DataTable
            function createOrderRowData(order) {
              const lrDateObj = new Date(order.created_at);
              const orderIdForAPI = order.order_id;
              const orderIdForDisplay = order.orderid;
              const orderDateObj = new Date(order.order_date || order.created_at || Date.now());

              const formatDate = (date) =>
                date.toLocaleDateString('en-IN', {
                  weekday: 'short',
                  year: 'numeric',
                  month: 'short',
                  day: 'numeric',
                  timeZone: 'Asia/Kolkata'
                });

              const consigneeFull = ((order.consignee_first_name || '') + ' ' + (order.consignee_last_name || '')).trim();
              const courierName = (order.tagged_api || '').toLowerCase();
              let logoPath = '/assets/images/logos/logo-dark.png';

              if (courierName.includes('delhivery')) logoPath = '/assets/images/logos/delhivery.png';
              else if (courierName.includes('xpress') || courierName.includes('expressbees')) logoPath = '/assets/images/logos/expressbees.png';
              else if (courierName.includes('dtdc')) logoPath = '/assets/images/logos/dtdc.png';
              else if (courierName.includes('bluedart')) logoPath = '/assets/images/BlueDart.png';
              else if (courierName.includes('fedex')) logoPath = '/assets/images/FedEx.png';

              return [
                `<input class="form-check-input rowCheckbox" type="checkbox" data-id="${order.lr_no}">`,
                createOrderDetailsCell(order, lrDateObj, orderIdForDisplay, formatDate, lrDateObj, orderDateObj),
                createCompanyConsigneeCell(order),
                createWeightDetailsCell(order),
                createCourierPartnerCell(order, logoPath),
                createActionsCell(order, orderIdForAPI)
              ];
            }

            // Function to create order details cell
            function createOrderDetailsCell(order, lrDateObj, orderIdForDisplay, formatDate, lrDateObj, orderDateObj) {
              return `
                <div class="d-flex flex-column">
                  <div class="order-id lrNo fw-bold text-primary" role="button" tabindex="0"
                    data-bs-toggle="offcanvas" data-bs-target="#orderDetailsCanvas"
                    aria-controls="orderDetailsCanvas" data-lrno="${order.lr_no}"
                    data-vendor-type="${order.tagged_api}" data-orderid="${orderIdForAPI}"
                    style="cursor: pointer;">
                    ${order.lr_no}
                  </div>
                  <small class="text-muted">LR Date: ${formatDate(lrDateObj)}</small>
                  <div class="order-id mt-1">Order: ${orderIdForDisplay}</div>
                  <small class="text-muted">Order Date: ${formatDate(orderDateObj)}</small>
                  <button type="button" class="btn btn-sm w-90 btn-primary mt-1" data-toggle="modal"
                    data-backdrop="static" data-target="#exampleModalRight">
                    Track Order
                  </button>
                </div>
              `;
            }

            // Function to create company and consignee cell
            function createCompanyConsigneeCell(order) {
              return `
                <div class="d-flex flex-column">
                  <div class="mb-2">
                    <strong class="text-primary">Company:</strong>
                    <div class="text-muted small">${order.company_name || 'N/A'}</div>
                    <div class="text-muted small">Pincode: ${order.warehouse_pincode || 'N/A'}</div>
                  </div>
                  <div>
                    <strong class="text-primary">Consignee:</strong>
                    <div class="text-muted small">${order.consignee_first_name || 'N/A'} ${order.consignee_last_name || ''} (${order.consignee_city || 'N/A'})</div>
                    <div class="text-muted small">Phone: ${order.consignee_phone || 'N/A'}</div>
                    <div class="text-muted small">Alt Phone: ${order.consignee_alternate_mobile || 'N/A'}</div>
                  </div>
                </div>
              `;
            }

            // Function to create weight details cell
            function createWeightDetailsCell(order) {
              return `
                <div class="text-center">
                  <div><strong>Chargeable:</strong> ${order.chargable_weight || 'N/A'} kg</div>
                  <div><strong>Volumetric:</strong> ${order.volumetric_weight || 'N/A'} kg</div>
                   <div><strong>Actual:</strong> ${order.total_weight || 'N/A'} kg</div>
                </div>
              `;
            }

            // Function to create courier partner cell
            function createCourierPartnerCell(order, logoPath) {  
              const serviceType = order.forwarder_product_type || 'N/A';
              const charges = order.total_lr_charges || 'N/A';
              const iconClass = serviceType.toLowerCase().includes('air') ? 'fa-plane' : 'fa-truck';

              return `
                <div class="courier-compact" data-courier="${order.tagged_api}">
                  <div class="d-flex align-items-center justify-content-between p-2 card flex-row"
                  
                    onclick="toggleCourierOptions(this)">
                    <div class="d-flex flex-column align-items-center">
                      <img src="${logoPath}" alt="${order.tagged_api || 'Courier'}"
                        style="width: 100px; height: 40px; object-fit: contain; border-radius: 4px;">
                      <div class="text-muted small mt-1">
                        ${serviceType}
                        <i class="fas ${iconClass} ms-1 text-primary" aria-hidden="true"></i>
                      </div>
                    </div>
                    <div class="d-flex flex-column align-items-center">
                      <span class="badge btn-outline-primary mb-1" style="font-size: 10px;">₹${charges}</span>
                    </div>
                  </div>

                  <div class="courier-options-compact"
                    style="max-height: 0; overflow: hidden; transition: max-height 0.3s ease;">
                    <div class="border-top border-start border-end rounded-bottom p-2">
                      <div class="d-flex text-primary justify-content-between align-items-center mb-1 p-1">
                        <div><div class="fw-semibold small">Total Rate</div></div>
                        <div class="text-end">  
                          <div class="fw-bold text-primary small">₹${charges}</div>
                        </div>
                      </div>
                      <div class="d-flex text-primary justify-content-between align-items-center mb-1 p-1">
                        <div><div class="fw-semibold small">Base Rate</div></div>
                        <div class="text-end">
                          <div class="fw-bold small">₹${order.base_rate || 'N/A'}</div>
                        </div>
                      </div>
                      <div class="d-flex btn-outline-primary justify-content-between align-items-center mb-1 p-1">
                        <div><div class="fw-semibold small">Total Additional</div></div>
                        <div class="text-end">
                          <div class="fw-bold small">₹${order.total_additional || 'N/A'}</div>
                        </div>
                      </div>
                      <div class="d-flex btn-outline-primary justify-content-between align-items-center mb-1 p-1">
                        <div><div class="fw-semibold small">Total GST (18%)</div></div>
                        <div class="text-end">
                          <div class="fw-bold small">₹${order.total_gst || 'N/A'}</div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              `;
            }

            // Function to create actions cell
            function createActionsCell(order, orderIdForAPI) {
              const courierName = order.tagged_api || '';
              const isDelhiveryLTL = courierName.includes("Delhivery/LTL-surface");

              return `
                <div class="d-flex gap-1 justify-content-center" style="flex-wrap: nowrap;">
                  <button class="btn btn-sm btn-outline-primary pickup-request"
                    data-orderid="${orderIdForAPI}" data-client-id="${order.client_id}"
                    data-courier="${order.tagged_api}" data-awb-number="${order.lr_no}"
                    title="Pickup Request" style="padding: 0.25rem 0.5rem; font-size: 0.875rem;">
                    <i class="fas fa-person-walking-luggage" aria-hidden="true"></i>
                  </button>

                  <button class="btn btn-sm btn-outline-danger cancel-lr" data-action="cancel-lr-awb"
                    data-courier="${order.tagged_api}" data-awb-number="${order.lr_no}"
                    data-orderid="${orderIdForAPI}" data-client-id="${order.client_id}"
                    title="Cancel LR" style="padding: 0.25rem 0.5rem; font-size: 0.875rem;">
                    <i class="fas fa-times-circle" aria-hidden="true"></i>
                  </button>

                  <div class="dropdown">
                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button"
                      data-bs-toggle="dropdown" aria-expanded="false" title="Print Shipping Label"
                      style="padding: 0.25rem 0.5rem; font-size: 0.875rem;">
                      <i class="fas fa-receipt" aria-hidden="true"></i>
                    </button>
                    <div class="dropdown-menu dropdown-menu-end">
                      ${isDelhiveryLTL ? `
                        <a class="dropdown-item print-label" href="#" data-size="4X4"
                          data-courier="${order.tagged_api}" data-awb-number="${order.lr_no}"
                          data-orderid="${orderIdForAPI}" aggrigator-id="${order.aggrigator_id}"
                          client-id="${order.client_id}">
                          <i class="fas fa-print me-2"></i>4X4 Label
                        </a>
                      ` : `
                        <a class="dropdown-item print-label" href="#" data-size="4X6"
                          data-courier="${order.tagged_api}" data-awb-number="${order.lr_no}"
                          data-orderid="${orderIdForAPI}" aggrigator-id="${order.aggrigator_id}"
                          client-id="${order.client_id}">
                          <i class="fas fa-print me-2"></i>4X6 Label
                        </a>
                        <a class="dropdown-item print-label" href="#" data-size="A4"
                          data-courier="${order.tagged_api}" data-awb-number="${order.lr_no}"
                          data-orderid="${orderIdForAPI}" aggrigator-id="${order.aggrigator_id}"
                          client-id="${order.client_id}">
                          <i class="fas fa-print me-2"></i>A4 Label
                        </a>
                        <a class="dropdown-item print-label" href="#" data-size="4X4"
                          data-courier="${order.tagged_api}" data-awb-number="${order.lr_no}"
                          data-orderid="${orderIdForAPI}" aggrigator-id="${order.aggrigator_id}"
                          client-id="${order.client_id}">
                          <i class="fas fa-print me-2"></i>4X4 Label
                        </a>
                        <a class="dropdown-item print-label" href="#" data-size="4X2"
                          data-courier="${order.tagged_api}" data-awb-number="${order.lr_no}"
                          data-orderid="${orderIdForAPI}" aggrigator-id="${order.aggrigator_id}"
                          client-id="${order.client_id}">
                          <i class="fas fa-print me-2"></i>4X2 Label
                        </a>
                      `}
                    </div>
                  </div>
                </div>
              `;
            }

            // Function to update pagination info dynamically
            function updatePaginationInfo(totalCount, currentPage, pageSize) {
              const paginationInfo = document.getElementById('paginationInfo');
              if (paginationInfo) {
                const start = (currentPage - 1) * pageSize + 1;
                const end = Math.min(currentPage * pageSize, totalCount);
                const selectedCount = selectedOrderIds.size;
                const selectedText = selectedCount > 0 ? ` (${selectedCount} selected)` : '';

                if (totalCount === 0) {
                  paginationInfo.textContent = 'No entries';
                } else {
                  paginationInfo.textContent = `Showing ${start} to ${end} of ${totalCount} entries${selectedText}`;
                }
              }

              const pageNumberIndicator = document.getElementById('pageNumberIndicator');
              if (pageNumberIndicator) {
                pageNumberIndicator.textContent = currentPage.toString();
              }

              const pageSizeBtn = document.getElementById('pageSizeBtn');
              if (pageSizeBtn) {
                pageSizeBtn.textContent = pageSize.toString();
              }
            }


            // Function to refresh data periodically
            function startPeriodicDataRefresh(intervalMinutes = 5) {
              const intervalMs = intervalMinutes * 60 * 1000; // Convert to milliseconds

              setInterval(() => {
                if (document.visibilityState === 'visible') {
                  loadDynamicOrderData();
                }
              }, intervalMs);
            }

         
            // Function to handle real-time update messages
            function handleRealTimeUpdate(data) {
              switch (data.type) {
                case 'ORDER_STATUS_UPDATE':
                  updateOrderStatus(data.orderId, data.newStatus);
                  break;
                case 'NEW_ORDER':
                  addNewOrder(data.order);
                  break;
                case 'ORDER_DELETED':
                  removeOrder(data.orderId);
                  break;
                case 'BULK_UPDATE':
                  loadDynamicOrderData(); // Reload all data for bulk updates
                  break;
                default:
                  console.log('Unknown update type:', data.type);
              }
            }

            // Function to update specific order status
            function updateOrderStatus(orderId, newStatus) {
              // Find and update the order in allOrders array
              const orderIndex = allOrders.findIndex(order => order.order_id === orderId);
              if (orderIndex !== -1) {
                allOrders[orderIndex].status = newStatus;

                // Update the table row if it exists
                if (ordersTable) {
                  const row = ordersTable.row(`[data-order-id="${orderId}"]`);
                  if (row.length) {
                    // Update the specific row data
                    const updatedOrder = allOrders[orderIndex];
                    const rowData = createOrderRowData(updatedOrder);
                    ordersTable.row(row).data(rowData).draw(false);
                  }
                }

                // Show notification
                showSuccessNotification(`Order ${orderId} status updated to ${newStatus}`);
              }
            }

            // Function to add new order to the table
            function addNewOrder(order) {
              allOrders.unshift(order); // Add to beginning of array
              filteredOrders = allOrders.slice();

              if (ordersTable) {
                const rowData = createOrderRowData(order);
                ordersTable.row.add(rowData).draw(false);

                // Update pagination info
                const pageInfo = ordersTable.page.info();
                updatePaginationInfo(allOrders.length, pageInfo.page + 1, pageInfo.length);
              }

              showSuccessNotification('New order added');
            }

            // Function to remove order from table
            function removeOrder(orderId) {
              // Remove from allOrders array
              const orderIndex = allOrders.findIndex(order => order.order_id === orderId);
              if (orderIndex !== -1) {
                allOrders.splice(orderIndex, 1);
                filteredOrders = allOrders.slice();
              }

              // Remove from selected orders if it was selected
              selectedOrderIds.delete(orderId.toString());

              // Remove from table
              if (ordersTable) {
                const row = ordersTable.$(`[data-order-id="${orderId}"]`).closest('tr');
                if (row.length) {
                  ordersTable.row(row).remove().draw(false);
                }
              }

              showSuccessNotification('Order removed');
            }

            // Function to export data with dynamic filters
            function exportFilteredData(format = 'csv') {
              const exportData = {
                filters: activeFilters,
                selectedIds: Array.from(selectedOrderIds),
                format: format
              };

              fetch('/api/ecom/orders/export', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(exportData)
              })
                .then(response => response.blob())
                .then(blob => {
                  const url = window.URL.createObjectURL(blob);
                  const a = document.createElement('a');
                  a.href = url;
                  a.download = `orders_export_${new Date().toISOString().split('T')[0]}.${format}`;
                  document.body.appendChild(a);
                  a.click();
                  document.body.removeChild(a);
                  window.URL.revokeObjectURL(url);
                })
                .catch(error => {
                  console.error('Export failed:', error);
                  showErrorNotification('Failed to export data');
                });
            }

            // Function to update statistics display
            function updateStatisticsDisplay(stats) {
              // Update various statistics elements on the page
              const statElements = {
                'total-orders': stats.totalOrders || 0,
                'ready-to-dispatch': stats.readyToDispatch || 0,
                'in-transit': stats.inTransit || 0,
                'delivered': stats.delivered || 0,
                'cancelled': stats.cancelled || 0
              };

              Object.entries(statElements).forEach(([elementId, value]) => {
                const element = document.getElementById(elementId);
                if (element) {
                  element.textContent = value.toLocaleString();
                }
              });
            }

            // Function to handle bulk operations with dynamic data
            function performBulkOperation(operation, orderIds) {
              const payload = {
                operation: operation,
                orderIds: orderIds,
                filters: activeFilters
              };

              fetch('/api/ecom/orders/bulk-operation', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload)
              })
                .then(response => response.json())
                .then(data => {
                  if (data.success) {
                    showSuccessNotification(`Bulk ${operation} completed successfully`);
                    loadDynamicOrderData(); // Refresh data after bulk operation
                  } else {
                    showErrorNotification(data.message || `Bulk ${operation} failed`);
                  }
                })
                .catch(error => {
                  console.error('Bulk operation failed:', error);
                  showErrorNotification(`Failed to perform bulk ${operation}`);
                });
            }

            // Initialize dynamic data functionality when page loads
            document.addEventListener('DOMContentLoaded', function () {
              // Start periodic data refresh
              startPeriodicDataRefresh(5); // Refresh every 5 minutes

              console.log('Dynamic data functions initialized');
            });

            // Make functions globally available
            window.loadDynamicOrderData = loadDynamicOrderData;
            window.exportFilteredData = exportFilteredData;
            window.performBulkOperation = performBulkOperation;
      

          </script>

          <!-- this is a click pono script start-->
          <script>
            // ---------- Helpers ----------
            const safeValue = (v) => (v === null || v === undefined || v === '' ? 'N/A' : v);
            const safeGet = (obj, path, fallback = 'N/A') => {
              try {
                return path.split('.').reduce((o, k) => (o && o.hasOwnProperty(k) ? o[k] : undefined), obj) ?? fallback;
              } catch { return fallback; }
            };
            const swalOrAlert = (title, text = '', icon = 'info') => {
              if (window.Swal) return Swal.fire({ title, text, icon });
              alert(text ? `${title}\n${text}` : title);
            };

            // Notification functions
            function showErrorNotification(message) {
              if (window.Swal) {
                Swal.fire({
                  icon: 'error',
                  title: 'Error',
                  text: message,
                  timer: 3000,
                  showConfirmButton: false
                });
              } else {
                console.error('Error:', message);
                alert('Error: ' + message);
              }
            }

            function showSuccessNotification(message) {
              if (window.Swal) {
                Swal.fire({
                  icon: 'success',
                  title: 'Success',
                  text: message,
                  timer: 3000,
                  showConfirmButton: false
                });
              } else {
                console.log('Success:', message);
                alert('Success: ' + message);
              }
            }

            function showLoadingToast(message) {
              if (window.Swal) {
                return Swal.fire({
                  title: message,
                  allowOutsideClick: false,
                  showConfirmButton: false,
                  willOpen: () => {
                    Swal.showLoading();
                  }
                });
              } else {
                console.log('Loading:', message);
                return null;
              }
            }

            function hideLoadingToast(toast) {
              if (toast && window.Swal) {
                Swal.close();
              }
            }
            const pickCourierLogo = (name = '') => {
              const n = String(name).toLowerCase();
              if (n.includes('delhivery')) return 'assets/images/logos/delhivery.png';
              if (n.includes('xpress') || n.includes('expressbees')) return 'assets/images/logos/expressbees.png';
              if (n.includes('dtdc')) return 'assets/images/logos/dtdc.png';
              if (n.includes('bluedart')) return 'assets/images/BlueDart.png';
              if (n.includes('fedex')) return 'assets/images/FedEx.png';
              return 'assets/images/logos/logo-dark.png';
            };
            const showDefaultTrackingUI = (order) => {
              const container = document.querySelector('.detailedorder');
              if (!container) return;
              container.innerHTML = `
                <div class="package" style="background:linear-gradient(135deg,#fdfcfb 0%,#fff6dd 100%)">
                  <div class="col-sm-8">Package from ${safeValue(order.warehouse_address)}</div>
                  <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                  <div class="status">order created</div>
                  <div class="info-icon" onclick="event.stopPropagation(); const b=this.querySelector('.details-balloon'); b.style.display = (b.style.display==='none'||!b.style.display) ? 'block':'none'">
                    <span style="color:#5a99fc;">View Details</span>
                    <div class="details-balloon" style="display: none;">
                      <span class="close-details" onclick="event.stopPropagation(); this.closest('.details-balloon').style.display='none'">×</span>
                      <div>Location<br/><strong>${safeValue(order.warehouse_address)}</strong></div>
                      <div>Order Date<br/><strong>${new Date(order.order_date).toLocaleString()}</strong></div>
                    </div>
                  </div>
                </div>`;
            };
            const setText = (id, value) => { const el = document.getElementById(id); if (el) el.textContent = value; };

            // Time/ETA helpers
            const toDate = (d) => (d ? new Date(d) : null);
            const formatDate = (d, locale = 'en-US', opts = { month: 'short', day: 'numeric', year: 'numeric' }) =>
              d ? d.toLocaleDateString(locale, opts) : 'N/A';
          </script>


          <script>
            /* =========================================================
             * Utilities
             * =======================================================*/
            // safeValue and setText are already defined above, so we don't redeclare them

            const fmtDate = (d, withTime = false) => {
              if (!d) return 'N/A';
              const dt = (d instanceof Date) ? d : new Date(d);
              if (Number.isNaN(dt.getTime())) return 'N/A';
              return withTime
                ? dt.toLocaleString()
                : dt.toLocaleDateString();
            };

            const setRightLogo = (logoPath) => {
              const rightLogo = document.getElementById('right-logo');
              if (rightLogo && logoPath) rightLogo.src = logoPath;
            };

            const setTrackingStatus = (text) => {
              const statusElement = document.getElementById('tracking-status');
              if (!statusElement) return;
              statusElement.textContent = text || 'In Transit';
              statusElement.style.background = '#e6f7ff';
              statusElement.style.color = '#1890ff';
            };

            const detailsBalloonToggler = `
              onclick="event.stopPropagation();
                const b=this.querySelector('.details-balloon');
                b.style.display = (b.style.display==='none'||!b.style.display) ? 'block':'none'"
            `;

            const closeBalloonBtn = `
              <span class="close-details" onclick="event.stopPropagation(); this.closest('.details-balloon').style.display='none'">×</span>
            `;

            /* =========================================================
             * Shared Renderers
             * =======================================================*/
            function renderPackageHeaderBlock({ bg, client, order, statusText, progress = '81%' }) {
              return `
                <div class="package" style="background:${bg}">
                  <div class="col-sm-8">Package from ${safeValue(client.company_name)}</div>
                  <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                  <div class="status">${safeValue(statusText)}</div>
                  <div class="progress-bar" style="width:${progreszs};"></div>
                  <div class="details">
                    <div>Customer<br/><strong>${safeValue(order.consignee_name)}</strong></div>
                    <div>Weight<br/><strong>${safeValue(order.total_weight ?? order.chargable_weight ?? 'N/A')} ${safeValue(order.weight_unit || '')}</strong></div>
                    <div>Price<br/><strong>₹ ${safeValue(order.Invoice_amount)}</strong></div>
                    <div>Departure<br/><strong>${fmtDate(order.order_date)}</strong></div>
                  </div>
                </div>
              `;
            }

            function renderStaticCreatedBlock(order, client) {
              return `
                <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
                  <div class="col-sm-8">Package from ${safeValue(client.company_name)}</div>
                  <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                  <div class="status">order created</div>
                  <div class="info-icon" ${detailsBalloonToggler}>
                    <span style="color:#5a99fc;">View Details</span>
                    <div class="details-balloon" style="display: none;">
                      ${closeBalloonBtn}
                      <div>Location<br/><strong>${safeValue(order.warehouse_address)}</strong></div>
                      <div>Order Date<br/><strong>${fmtDate(order.order_date, true)}</strong></div>
                    </div>
                  </div>
                </div>
              `;
            }

            function renderStaticProcessingBlock(order, client) {
              return `
                <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
                  <div class="col-sm-8">Package from ${safeValue(client.company_name)}</div>
                  <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                  <div class="status">order in process</div>
                  <div class="info-icon" ${detailsBalloonToggler}>
                    <span style="color:#5a99fc;">View Details</span>
                    <div class="details-balloon" style="display: none;">
                      ${closeBalloonBtn}
                      <div>Location<br/><strong>${safeValue(order.warehouse_address)}</strong></div>
                      <div>Update Date<br/><strong>${fmtDate(order.order_date, true)}</strong></div>
                    </div>
                  </div>
                </div>
              `;
            }

            function renderBucketBlock({ title, fromText, order, combinedDetailsHTML, bg }) {
              return `
                <div class="package" style="background:${bg}">
                  <div class="col-sm-8">${title} ${fromText}</div>
                  <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                  <div class="status ${title.toLowerCase().includes('transit') ? 'transit' : 'ready'}">${title}</div>
                  <div class="info-icon" ${detailsBalloonToggler}>
                    <span style="color:#5a99fc;">View Details</span>
                    <div class="details-balloon" style="display:none;">
                      ${closeBalloonBtn}
                      ${combinedDetailsHTML}
                    </div>
                  </div>
                </div>
              `;
            }

            function mountIntoDetailedOrder(html) {
              const container = document.querySelector('.detailedorder');
              if (!container) return;
              container.innerHTML = `
                <div class="mb-4">
                  <div class="">${html}</div>
                </div>
              `;
            }

            /* =========================================================
             * DTDC – LTL
             * deliveryStatus[].strAction, strOrigin, strDestination, strActionDate, strActionTime, strVehicleNo, strDriverName
             * =======================================================*/
            function updateDTDCStatus(vendor, deliveryStatus, logoPath, lrNo, order, client) {
              console.log('updateDTDCStatus invoked');

              const last = (deliveryStatus && deliveryStatus.length) ? deliveryStatus[deliveryStatus.length - 1] : null;
              setRightLogo(logoPath);
              setTrackingStatus(last?.strAction || 'In Transit');

              let html = '';
              // Header card
              html += renderPackageHeaderBlock({
                bg: 'linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)',
                client, order, statusText: last?.strAction || 'In Transit'
              });
              // Static blocks
              html += renderStaticCreatedBlock(order, client);
              html += renderStaticProcessingBlock(order, client);

              // Buckets
              const readyToDispatchActions = ['Booked', 'Manifest Prepared'];
              const inTransitActions = ['THC OUT', 'LDS Updation', 'THC Arrived'];

              const processed = new Set();

              const ready = (deliveryStatus || []).filter(s => readyToDispatchActions.includes(s.strAction));
              if (ready.length) {
                const details = ready.map(s => `
                  <div>Status: ${safeValue(s.strAction)}</div>
                  <div>Location: ${safeValue(s.strOrigin)}</div>
                  <div>Updated On: ${fmtDate(s.strActionDate, true)}</div>
                  <div>Updated Time: ${safeValue(s.strActionTime)}</div>
                `).join('<hr/>');

                html += renderBucketBlock({
                  title: 'Ready to Dispatch',
                  fromText: `from ${safeValue(ready[0].strOrigin || order.warehouse_address)}`,
                  order,
                  combinedDetailsHTML: details
                });

                ready.forEach(s => processed.add(s.strAction));
              }

              const transit = (deliveryStatus || []).filter(s => inTransitActions.includes(s.strAction));
              if (transit.length) {
                const details = transit.map(s => `
                  <div>Status: ${safeValue(s.strAction)}</div>
                  <div>Origin: ${safeValue(s.strOrigin)}</div>
                  <div>Destination: ${safeValue(s.strDestination)}</div>
                  <div>Updated On: ${fmtDate(s.strActionDate, true)}</div>
                  <div>Updated Time: ${safeValue(s.strActionTime)}</div>
                  ${s.strVehicleNo ? `<div>Vehicle No: ${safeValue(s.strVehicleNo)}</div>` : ''}
                  ${s.strDriverName ? `<div>Driver: ${safeValue(s.strDriverName)}</div>` : ''}
                `).join('<hr/>');

                html += renderBucketBlock({
                  title: 'In Transit',
                  fromText: `from ${safeValue(transit[0].strOrigin)}`,
                  order,
                  combinedDetailsHTML: details
                });

                transit.forEach(s => processed.add(s.strAction));
              }

              // Remaining statuses
              (deliveryStatus || []).forEach(s => {
                if (processed.has(s.strAction)) return;
                const details = `
                  <div>Status: ${safeValue(s.strAction)}</div>
                  <div>Origin: ${safeValue(s.strOrigin)}</div>
                  <div>Destination: ${safeValue(s.strDestination)}</div>
                  <div>Updated On: ${fmtDate(s.strActionDate, true)}</div>
                  <div>Updated Time: ${safeValue(s.strActionTime)}</div>
                  ${s.strVehicleNo ? `<div>Vehicle No: ${safeValue(s.strVehicleNo)}</div>` : ''}
                  ${s.strDriverName ? `<div>Driver: ${safeValue(s.strDriverName)}</div>` : ''}
                `;
                html += renderBucketBlock({
                  title: safeValue(s.strAction),
                  fromText: `from ${safeValue(s.strOrigin)}`,
                  order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)',
                  combinedDetailsHTML: details
                });
              });

              mountIntoDetailedOrder(html);
            }

            /* =========================================================
             * DTDC – Standard / B2C Smart Express
             * deliveryStatus[].strAction, strOrigin, strDestination, strActionDate, strActionTime
             * =======================================================*/
            function updateDTDCStatusStd(vendor, deliveryStatus, logoPath, lrNo, order, client) {
              console.log('updateDTDCStatusStd invoked');

              const last = (deliveryStatus && deliveryStatus.length) ? deliveryStatus[deliveryStatus.length - 1] : null;
              setRightLogo(logoPath);
              setTrackingStatus(last?.strAction || 'In Transit');

              let html = '';
              html += renderPackageHeaderBlock({
                bg: 'linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)',
                client, order, statusText: last?.strAction || 'In Transit'
              });
              html += renderStaticCreatedBlock(order, client);
              html += renderStaticProcessingBlock(order, client);

              const readyToDispatchActions = ['Booked', 'Manifest Prepared', 'Picked Up', 'Pickup Reassigned', 'Pickup Scheduled', 'Pickup Awaited'];
              const inTransitActions = ['In Transit', 'LDS Updation', 'THC Arrived', 'Reached At Destination', 'LINEHAUL DELAYED ROAD BLOCK / TRAFFIC JAM'];

              const processed = new Set();

              const ready = (deliveryStatus || []).filter(s => readyToDispatchActions.includes(s.strAction));
              if (ready.length) {
                const details = ready.map(s => `
                  <div>Status: ${safeValue(s.strAction)}</div>
                  <div>Location: ${safeValue(s.strOrigin)}</div>
                  <div>Updated On: ${fmtDate(s.strActionDate, true)}</div>
                  <div>Updated Time: ${String(safeValue(s.strActionTime)).slice(0, 2)}:${String(safeValue(s.strActionTime)).slice(2)}</div>
                `).join('<hr/>');

                html += renderBucketBlock({
                  title: 'Ready to Dispatch',
                  fromText: `from ${safeValue(ready[0].strOrigin || order.warehouse_address)}`,
                  order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)',
                  combinedDetailsHTML: details
                });
                ready.forEach(s => processed.add(s.strAction));
              }

              const transit = (deliveryStatus || []).filter(s => inTransitActions.includes(s.strAction));
              if (transit.length) {
                const details = transit.map(s => `
                  <div>Status: ${safeValue(s.strAction)}</div>
                  <div>Origin: ${safeValue(s.strOrigin)}</div>
                  <div>Destination: ${safeValue(s.strDestination)}</div>
                  <div>Updated On: ${fmtDate(s.strActionDate, true)}</div>
                  <div>Updated Time: ${String(safeValue(s.strActionTime)).slice(0, 2)}:${String(safeValue(s.strActionTime)).slice(2)}</div>
                  ${s.strVehicleNo ? `<div>Vehicle No: ${safeValue(s.strVehicleNo)}</div>` : ''}
                  ${s.strDriverName ? `<div>Driver: ${safeValue(s.strDriverName)}</div>` : ''}
                `).join('<hr/>');

                html += renderBucketBlock({
                  title: 'In Transit',
                  fromText: `from ${safeValue(transit[0].strOrigin)}`,
                  order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)',
                  combinedDetailsHTML: details
                });
                transit.forEach(s => processed.add(s.strAction));
              }

              (deliveryStatus || []).forEach(s => {
                if (processed.has(s.strAction)) return;
                const details = `
                  <div>Status: ${safeValue(s.strAction)}</div>
                  <div>Origin: ${safeValue(s.strOrigin)}</div>
                  <div>Destination: ${safeValue(s.strDestination)}</div>
                  <div>Updated On: ${fmtDate(s.strActionDate, true)}</div>
                  <div>Updated Time: ${String(safeValue(s.strActionTime)).slice(0, 2)}:${String(safeValue(s.strActionTime)).slice(2)}</div>
                  ${s.strVehicleNo ? `<div>Vehicle No: ${safeValue(s.strVehicleNo)}</div>` : ''}
                  ${s.strDriverName ? `<div>Driver: ${safeValue(s.strDriverName)}</div>` : ''}
                `;
                html += renderBucketBlock({
                  title: safeValue(s.strAction),
                  fromText: `from ${safeValue(s.strOrigin)}`,
                  order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)',
                  combinedDetailsHTML: details
                });
              });

              mountIntoDetailedOrder(html);
            }

            /* =========================================================
             * Delhivery – LTL
             * deliveryStatus[].status, location, manifested_date, scan_remark
             * =======================================================*/
            function updateDeliveryStatus(vendor, deliveryStatus, logoPath, lrNo, order, client) {
              console.log('updateDeliveryStatus (Delhivery LTL) invoked');

              const last = (deliveryStatus && deliveryStatus.length) ? deliveryStatus[deliveryStatus.length - 1] : null;
              setRightLogo(logoPath);
              setTrackingStatus(last?.status || 'In Transit');

              let html = '';
              html += renderPackageHeaderBlock({
                bg: 'linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)',
                client, order, statusText: last?.status || 'In Transit'
              });
              html += renderStaticCreatedBlock(order, client);
              html += renderStaticProcessingBlock(order, client);

              const readyToDispatchScans = ['MANIFESTED'];
              const inTransitScans = ['LEFT_ORIGIN', 'REACH_DESTINATION'];

              const processed = new Set();

              const ready = (deliveryStatus || []).filter(s => readyToDispatchScans.includes(s.status));
              if (ready.length) {
                const details = ready.map(s => `
                  <div>Status: ${safeValue(s.status)}</div>
                  <div>Location: ${safeValue(s.location)}</div>
                  <div>Manifested Date: ${fmtDate(s.manifested_date, true)}</div>
                  <div>Scan Remark: ${safeValue(s.scan_remark)}</div>
                `).join('<hr/>');

                html += renderBucketBlock({
                  title: 'Ready to Dispatch',
                  fromText: `from ${safeValue(ready[0].location || order.warehouse_address)}`,
                  order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)',
                  combinedDetailsHTML: details
                });
                ready.forEach(s => processed.add(s.status));
              }

              const transit = (deliveryStatus || []).filter(s => inTransitScans.includes(s.status));
              if (transit.length) {
                const details = transit.map(s => `
                  <div>Status: ${safeValue(s.status)}</div>
                  <div>Location: ${safeValue(s.location)}</div>
                  <div>Manifested Date: ${fmtDate(s.manifested_date, true)}</div>
                  <div>Scan Remark: ${safeValue(s.scan_remark)}</div>
                `).join('<hr/>');

                html += renderBucketBlock({
                  title: 'In Transit',
                  fromText: `from ${safeValue(transit[0].location)}`,
                  order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)',
                  combinedDetailsHTML: details
                });
                transit.forEach(s => processed.add(s.status));
              }

              (deliveryStatus || []).forEach(s => {
                if (processed.has(s.status)) return;
                const details = `
                  <div>Status: ${safeValue(s.status)}</div>
                  <div>Location: ${safeValue(s.location)}</div>
                  <div>Manifested Date: ${fmtDate(s.manifested_date, true)}</div>
                  <div>Scan Remark: ${safeValue(s.scan_remark)}</div>
                  <div>Estimated Delivery: ${fmtDate(s.estimated_date, true)}</div>
                  <div>Promised Delivery: ${fmtDate(s.promised_delivery_date, true)}</div>
                  <div>Pickup Date: ${fmtDate(s.pickup_date, true)}</div>
                  <div>Delivered Date: ${fmtDate(s.delivered_date, true)}</div>
                `;
                html += renderBucketBlock({
                  title: safeValue(s.status),
                  fromText: `from ${safeValue(s.location)}`,
                  order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)',
                  combinedDetailsHTML: details
                });
              });

              mountIntoDetailedOrder(html);
            }

            /* =========================================================
             * Delhivery – Standard
             * deliveryStatus[].scan, scanned_location, instructions, scan_datetime (and sometimes status_datetime)
             * =======================================================*/
            function updateDeliveryStdStatus(vendor, deliveryStatus, logoPath, lrNo, order, client) {
              console.log('updateDeliveryStdStatus (Delhivery Standard) invoked');

              const last = (deliveryStatus && deliveryStatus.length) ? deliveryStatus[deliveryStatus.length - 1] : null;
              setRightLogo(logoPath);
              setTrackingStatus(last?.scan || 'In Transit');

              let html = '';
              html += renderPackageHeaderBlock({
                bg: 'linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)',
                client, order, statusText: last?.scan || 'In Transit'
              });
              html += renderStaticCreatedBlock(order, client);
              html += renderStaticProcessingBlock(order, client);

              const readyToDispatchScans = ['Manifested'];
              const inTransitScans = ['In Transit', 'Pending', 'Dispatched'];

              const processed = new Set();

              const ready = (deliveryStatus || []).filter(s => readyToDispatchScans.includes(s.scan));
              if (ready.length) {
                const details = ready.map(s => `
                  <div>Status: ${safeValue(s.scan)}</div>
                  <div>Location: ${safeValue(s.scanned_location)}</div>
                  <div>Scan Remark: ${safeValue(s.instructions)}</div>
                  <div>Scan Date: ${fmtDate(s.scan_datetime || s.status_datetime, true)}</div>
                `).join('<hr/>');

                html += renderBucketBlock({
                  title: 'Ready to Dispatch',
                  fromText: `from ${safeValue(ready[0].scanned_location || order.warehouse_address)}`,
                  order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)',
                  combinedDetailsHTML: details
                });
                ready.forEach(s => processed.add(s.scan));
              }

              const transit = (deliveryStatus || []).filter(s => inTransitScans.includes(s.scan));
              if (transit.length) {
                const details = transit.map(s => `
                  <div>Status: ${safeValue(s.scan)}</div>
                  <div>Location: ${safeValue(s.scanned_location)}</div>
                  <div>Scan Remark: ${safeValue(s.instructions)}</div>
                  <div>Scan Date: ${fmtDate(s.scan_datetime || s.status_datetime, true)}</div>
                `).join('<hr/>');

                html += renderBucketBlock({
                  title: 'In Transit',
                  fromText: `from ${safeValue(transit[0].scanned_location)}`,
                  order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)',
                  combinedDetailsHTML: details
                });
                transit.forEach(s => processed.add(s.scan));
              }

              (deliveryStatus || []).forEach(s => {
                if (processed.has(s.scan)) return;
                const details = `
                  <div>Status: ${safeValue(s.scan)}</div>
                  <div>Location: ${safeValue(s.scanned_location)}</div>
                  <div>Scan Remark: ${safeValue(s.instructions)}</div>
                  <div>Date: ${fmtDate(s.scan_datetime || s.status_datetime, true)}</div>
                `;
                html += renderBucketBlock({
                  title: safeValue(s.scan),
                  fromText: `from ${safeValue(s.scanned_location)}`,
                  order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)',
                  combinedDetailsHTML: details
                });
              });

              mountIntoDetailedOrder(html);
            }

            /* =========================================================
             * ExpressBees – Standard
             * deliveryStatus[].message, location, event_time
             * =======================================================*/
            function updateExpressBeesStatus(vendor, deliveryStatus, logoPath, lrNo, order, client) {
              console.log('updateExpressBeesStatus invoked');

              const last = (deliveryStatus && deliveryStatus.length) ? deliveryStatus[deliveryStatus.length - 1] : null;
              setRightLogo(logoPath);
              setTrackingStatus(last?.message || 'In Transit');

              let html = '';
              // Use first "In Transit" time as departure, else order date
              const firstTransit = (deliveryStatus || []).find(s => s.message === 'In Transit');

              html += renderPackageHeaderBlock({
                bg: 'linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)',
                client, order,
                statusText: last?.message || 'In Transit',
                progress: '81%'
              }).replace(
                /(<div>Departure<br\/><strong>)(.*?)(<\/strong>)/,
                `$1${fmtDate(firstTransit?.event_time || order.order_date)}$3`
              );

              html += renderStaticCreatedBlock(order, client);
              html += renderStaticProcessingBlock(order, client);

              const readyToDispatchMessages = ['Data Received', 'Pickup Not Done'];
              const inTransitMessages = ['Picked', 'Out For Pickup', 'Pickup Done'];

              const processed = new Set();

              const ready = (deliveryStatus || []).filter(s => readyToDispatchMessages.includes(s.message));
              if (ready.length) {
                const details = ready.map(s => `
                  <div>Status: ${safeValue(s.message)}</div>
                  <div>Location: ${safeValue(s.location)}</div>
                  <div>Event Time: ${fmtDate(s.event_time, true)}</div>
                `).join('<hr/>');

                html += renderBucketBlock({
                  title: 'Ready to Dispatch',
                  fromText: `from ${safeValue(ready[0].location || order.warehouse_address)}`,
                  order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)',
                  combinedDetailsHTML: details
                });
                ready.forEach(s => processed.add(s.message));
              }

              const transit = (deliveryStatus || []).filter(s => inTransitMessages.includes(s.message));
              if (transit.length) {
                const details = transit.map(s => `
                  <div>Status: ${safeValue(s.message)}</div>
                  <div>Location: ${safeValue(s.location)}</div>
                  <div>Event Time: ${fmtDate(s.event_time, true)}</div>
                `).join('<hr/>');

                html += renderBucketBlock({
                  title: 'Pickup details',
                  fromText: `from ${safeValue(transit[0].location)}`,
                  order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)',
                  combinedDetailsHTML: details
                });
                transit.forEach(s => processed.add(s.message));
              }

              (deliveryStatus || []).forEach(s => {
                if (processed.has(s.message)) return;
                const details = `
                  <div>Status: ${safeValue(s.message)}</div>
                  <div>Location: ${safeValue(s.location)}</div>
                  <div>Event Time: ${fmtDate(s.event_time, true)}</div>
                `;
                html += renderBucketBlock({
                  title: safeValue(s.message),
                  fromText: `from ${safeValue(s.location)}`,
                  order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)',
                  combinedDetailsHTML: details
                });
              });

              mountIntoDetailedOrder(html);
            }

            /* =========================================================
             * Balloons (info popovers)
             * =======================================================*/
            function toggleBalloon(item) {
              // Close others
              document.querySelectorAll('.info-balloon').forEach(b => { b.style.display = 'none'; });
              // Toggle this one
              const balloon = item.querySelector('.info-balloon');
              if (balloon) balloon.style.display = (balloon.style.display === 'none' || !balloon.style.display) ? 'block' : 'none';
            }

            function closeBalloonOutside(event) {
              document.querySelectorAll('.info-balloon').forEach(balloon => {
                if (!balloon.contains(event.target) && !event.target.closest('.progressList_item')) {
                  balloon.style.display = 'none';
                }
              });
            }
            document.addEventListener('click', closeBalloonOutside);

            function closeBalloon(event, element) {
              event.stopPropagation();
              const balloon = element.closest('.info-balloon');
              if (balloon) balloon.style.display = 'none';
            }
          </script>

          <!-- DataTable CSS removed - using custom pagination -->

          <script>
            // Handle submenu toggle
            document.querySelectorAll('.dropdown-submenu > a').forEach(function (element) {
              element.addEventListener('click', function (e) {
                e.preventDefault();
                e.stopPropagation();

                // Close all open submenus
                var openSubmenus = document.querySelectorAll('.dropdown-submenu .dropdown-menu');
                openSubmenus.forEach(function (submenu) {
                  submenu.style.display = 'none';
                });

                // Open the current submenu
                var currentSubmenu = this.nextElementSibling;
                currentSubmenu.style.display = 'block';
              });
            });
          </script>

          <!-- cancel lr script -->
          <script>
            document.addEventListener('DOMContentLoaded', function () {
              // Add event listener to all "Cancel LR/AWB" buttons
              document.querySelectorAll('.cancel-lr').forEach(button => {
                button.addEventListener('click', async function (event) {
                  event.preventDefault(); // Prevent default link behavior

                  const courier_partner = this.getAttribute('data-courier'); // Get client type
                  const lrNumber = this.getAttribute('data-awb-number');
                  const po_number = this.getAttribute("data-poid")
                  const client_id = this.getAttribute("data-client-id")
                  console.log("client_id: " + client_id)
                  if (!courier_partner || !lrNumber) {
                    console.error('Client type or LR number is missing.');
                    return;
                  }

                  // Check for DTDC LTL services
                  if (courier_partner === 'DTDC/LTL-surface' || courier_partner === 'DTDC/ltl') {
                    Swal.fire({
                      title: 'Cannot Cancel',
                      text: 'DTDC LTL LR cannot be cancelled',
                      icon: 'error',
                      confirmButtonText: 'OK'
                    });
                    return;
                  }

                  // Show confirmation dialog before proceeding
                  const result = await Swal.fire({
                    title: 'Confirm Cancellation',
                    text: `Do you really want to cancel LR ${lrNumber}?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, cancel it!',
                    cancelButtonText: 'No, keep it'
                  });

                  // If user confirms, proceed with cancellation
                  if (result.isConfirmed) {
                    try {
                      let response;
                      let apiEndpoint = '';

                      // Determine which API endpoint to use based on courier_partner
                      if (courier_partner === 'Delhivery/Standard-Surface' ||
                        courier_partner === 'Delhivery/standard-surface' ||
                        courier_partner === 'Delhivery/Standard-Air' ||
                        courier_partner === 'Delhivery/standard-air') {
                        apiEndpoint = '/api/cancel-delhivery-standard';
                      } else if (courier_partner === 'Delhivery/LTL-surface') {
                        apiEndpoint = '/api/cancel-delhivery-ltl';
                      } else if (courier_partner === 'DTDC/Standard-Surface' || courier_partner === 'DTDC/Standard-Air') {
                        apiEndpoint = '/api/cancel-dtdc-standard';
                      } else if (courier_partner === 'expressbees/Standard-Surface' ||
                        courier_partner === 'expressbees/Standard-Air') {
                        apiEndpoint = '/api/cancel-expressbees-standard';
                      } else {
                        console.error('Unsupported client type:', courier_partner);
                        return;
                      }

                      // Make the API call
                      response = await axios.post(apiEndpoint, { lrNumber, po_number, client_id });

                      // Handle success response
                      if ((response.data.status === true) || (response.data.success)) {
                        Swal.fire({
                          title: 'Success!',
                          text: `LR ${lrNumber} cancelled successfully for ${courier_partner}.`,
                          icon: 'success',
                          confirmButtonText: 'OK'
                        }).then(() => {
                          window.location.reload();
                        });
                      } else {
                        Swal.fire({
                          title: 'Failure!',
                          text: `Failed to cancel LR ${lrNumber} for ${courier_partner}.`,
                          icon: 'error',
                          confirmButtonText: 'Try Again'
                        });
                      }
                    } catch (error) {
                      console.error('Error cancelling LR:', error);
                      Swal.fire({
                        title: 'Error!',
                        text: 'An error occurred while cancelling the LR. Please try again.',
                        icon: 'error',
                        confirmButtonText: 'Close'
                      });
                    }
                  }
                });
              });
            });
          </script>

          <script>
            /* =========================================================
             * Google Maps — Tracking Route Renderer (Refined)
             * =======================================================*/

            let map;
            let directionsService;
            let directionsRenderer;
            let markers = [];
            let geocoder;

            // Small in-memory cache to avoid repeated geocoding
            const geocodeCache = new Map();

            // Graceful DOM setter
            function setTextById(id, value) {
              const el = document.getElementById(id);
              if (el) el.textContent = value;
            }

            // Safe numeric parse
            const toInt = (v, fallback = 0) => {
              const n = parseInt(v, 10);
              return Number.isFinite(n) ? n : fallback;
            };

            // Normalize a location string (for deduping and comparisons)
            const normLoc = (s) => String(s || '')
              .trim()
              .replace(/\s+/g, ' ')
              .replace(/[_(),]/g, ' ')
              .toLowerCase();

            // Promise-based geocode with caching and a tiny backoff
            function geocodeAddress(address, regionSuffix = 'India', backoffMs = 120) {
              const raw = String(address || '').trim();
              const q = raw ? `${raw}, ${regionSuffix}` : '';

              if (!q) return Promise.reject(new Error('Empty address'));

              const key = normLoc(q);
              if (geocodeCache.has(key)) {
                return Promise.resolve(geocodeCache.get(key));
              }

              return new Promise((resolve, reject) => {
                geocoder.geocode({ address: q }, (results, status) => {
                  if (status === 'OK' && results && results[0]) {
                    geocodeCache.set(key, results);
                    resolve(results);
                  } else if (status === 'OVER_QUERY_LIMIT') {
                    // Simple backoff
                    setTimeout(() => {
                      geocoder.geocode({ address: q }, (results2, status2) => {
                        if (status2 === 'OK' && results2 && results2[0]) {
                          geocodeCache.set(key, results2);
                          resolve(results2);
                        } else {
                          reject(new Error(`Geocode failed: ${status2}`));
                        }
                      });
                    }, backoffMs);
                  } else {
                    reject(new Error(`Geocode failed: ${status}`));
                  }
                });
              });
            }

            // Clear all markers from map
            function clearMarkers() {
              markers.forEach(m => m.setMap && m.setMap(null));
              markers = [];
            }

            // Create a marker with a simple info window
            function createMarker(position, type, title, statusHtml) {
              if (!map || !position) return null;

              let iconUrl;
              switch (type) {
                case 'origin':
                  iconUrl = 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png';
                  break;
                case 'intermediate':
                  iconUrl = 'https://maps.google.com/mapfiles/ms/icons/yellow-dot.png';
                  break;
                case 'current':
                  iconUrl = 'https://maps.google.com/mapfiles/ms/icons/green-dot.png';
                  break;
                case 'destination':
                  iconUrl = 'https://maps.google.com/mapfiles/ms/icons/red-dot.png';
                  break;
                default:
                  iconUrl = 'https://maps.google.com/mapfiles/ms/icons/grey-dot.png';
              }

              const marker = new google.maps.Marker({
                position,
                map,
                icon: {
                  url: iconUrl,
                  scaledSize: new google.maps.Size(40, 40),
                },
                title: title || '',
                animation: google.maps.Animation.DROP,
              });

              const infoWindow = new google.maps.InfoWindow({
                content: `
      <div style="padding:10px; max-width:220px">
        <strong>${title || ''}</strong>
        ${statusHtml ? `<br><small>${statusHtml}</small>` : ''}
      </div>
    `,
              });

              marker.addListener('click', () => infoWindow.open(map, marker));
              markers.push(marker);
              return marker;
            }

            // Initialize map (call this once your Maps script is loaded)
            function initMap() {
              if (!window.google || !google.maps) {
                console.error('Google Maps JS API not loaded.');
                return;
              }

              geocoder = new google.maps.Geocoder();
              directionsService = new google.maps.DirectionsService();
              directionsRenderer = new google.maps.DirectionsRenderer({
                suppressMarkers: true,
                polylineOptions: {
                  strokeColor: '#0000FF',
                  strokeWeight: 4,
                },
              });

              const styles = [{ stylers: [{ saturation: -80 }, { lightness: 20 }] }];

              map = new google.maps.Map(document.getElementById('map'), {
                zoom: 5, // sensible default for India-wide routing
                center: { lat: 20.5937, lng: 78.9629 },
                mapTypeControl: false,
                fullscreenControl: true,
                streetViewControl: false,
                styles,
              });

              directionsRenderer.setMap(map);
            }

            /**
             * Calculate & display a multi-stop route.
             * @param {Array<{location:string,status?:string,date?:string}>} deliveryStatus
             * @param {string} finalDestination
             * @param {number|string|null} eta - total promised duration (days)
             */
            async function calculateAndDisplayRoute(deliveryStatus, finalDestination, eta) {
              try {
                if (!Array.isArray(deliveryStatus) || deliveryStatus.length === 0) {
                  console.warn('No deliveryStatus provided; skipping map route.');
                  return;
                }
                if (!map || !directionsService || !directionsRenderer) {
                  console.warn('Map/Directions not initialized. Call initMap() first.');
                  return;
                }

                clearMarkers();

                const bounds = new google.maps.LatLngBounds();
                const totalDurationInDays = Math.max(1, toInt(eta, 5)); // fallback 5 days

                // 1) Normalize & de-duplicate locations while preserving order
                const seen = new Set();
                const unique = [];
                for (const s of deliveryStatus) {
                  const loc = (s && s.location) ? String(s.location).split('(')[0] : '';
                  const key = normLoc(loc);
                  if (loc && !seen.has(key)) {
                    seen.add(key);
                    unique.push({
                      location: loc,
                      status: s?.status || '',
                      date: s?.date || '',
                    });
                  }
                }
                if (unique.length === 0) {
                  console.warn('No valid locations in deliveryStatus.');
                  return;
                }

                // 2) Compute elapsed days from first entry
                const firstDate = unique[0]?.date ? new Date(unique[0].date) : null;
                const now = new Date();
                const elapsedDays = firstDate && !isNaN(firstDate) ? Math.max(0,
                  Math.floor((now - firstDate) / (1000 * 60 * 60 * 24))
                ) : 0;

                // 3) Geocode all intermediate points
                const geocodedLocations = [];
                for (let i = 0; i < unique.length; i++) {
                  const u = unique[i];
                  try {
                    const results = await geocodeAddress(u.location, 'India');
                    const latLng = results[0].geometry.location;

                    const type =
                      i === 0 ? 'origin' :
                        i === unique.length - 1 ? 'current' :
                          'intermediate';

                    createMarker(
                      latLng,
                      type,
                      u.location,
                      `Status: ${u.status || '—'}<br>Date: ${u.date ? new Date(u.date).toLocaleString() : '—'}`
                    );

                    bounds.extend(latLng);
                    geocodedLocations.push(latLng);
                  } catch (e) {
                    console.error(`Geocode failed for "${u.location}":`, e);
                  }
                }

                // 4) Destination handling (only if different)
                const lastLocStr = unique[unique.length - 1]?.location || '';
                if (finalDestination && normLoc(finalDestination) !== normLoc(lastLocStr)) {
                  try {
                    const results = await geocodeAddress(finalDestination, 'India');
                    const latLng = results[0].geometry.location;

                    createMarker(latLng, 'destination', finalDestination, 'Final Destination');
                    bounds.extend(latLng);
                    geocodedLocations.push(latLng);
                  } catch (e) {
                    console.error(`Geocode failed for destination "${finalDestination}":`, e);
                  }
                }

                // 5) Draw directions if we have at least two points
                if (geocodedLocations.length >= 2) {
                  const waypoints = geocodedLocations
                    .slice(1, -1)
                    .map(loc => ({ location: loc, stopover: true }));

                  const req = {
                    origin: geocodedLocations[0],
                    destination: geocodedLocations[geocodedLocations.length - 1],
                    waypoints,
                    optimizeWaypoints: false, // keep historical order
                    travelMode: google.maps.TravelMode.DRIVING,
                  };

                  const routeResult = await new Promise((resolve, reject) => {
                    directionsService.route(req, (result, status) => {
                      if (status === 'OK') resolve(result);
                      else reject(new Error(`Directions failed: ${status}`));
                    });
                  });

                  directionsRenderer.setDirections(routeResult);

                  // 6) Compute distances
                  const legs = routeResult.routes?.[0]?.legs || [];
                  const totalDistanceM = legs.reduce((acc, leg) => acc + (leg.distance?.value || 0), 0);
                  const remainingDistanceM = legs.length ? (legs[legs.length - 1].distance?.value || 0) : 0;
                  const completedDistanceM = Math.max(0, totalDistanceM - remainingDistanceM);
                  const progressPct = totalDistanceM ? ((completedDistanceM / totalDistanceM) * 100) : 0;

                  // 7) Compute remaining time from ETA vs elapsed
                  const remainingDays = Math.max(0, totalDurationInDays - elapsedDays);
                  const durationText = remainingDays === 0
                    ? 'Delivery overdue'
                    : remainingDays === 1
                      ? '1 day remaining'
                      : `${remainingDays} days remaining`;

                  // 8) Fit map
                  if (!bounds.isEmpty()) map.fitBounds(bounds);

                  // 9) Update UI
                  setTextById('total_distance', `${(totalDistanceM / 1000).toFixed(1)} km`);
                  setTextById('distance', `${(remainingDistanceM / 1000).toFixed(1)} km`);
                  setTextById('duration', durationText);
                  setTextById(
                    'map_info',
                    `Total: ${(totalDistanceM / 1000).toFixed(1)}km | ` +
                    `Remaining: ${(remainingDistanceM / 1000).toFixed(1)}km | ` +
                    `Progress: ${progressPct.toFixed(1)}% | ` +
                    `ETA: ${durationText}`
                  );
                } else {
                  // No route lines possible (only one valid point)
                  if (!bounds.isEmpty()) map.fitBounds(bounds);
                  setTextById('map_info', 'Insufficient points to draw a route.');
                }
              } catch (err) {
                console.error('Error in calculateAndDisplayRoute:', err);
              }
            }

            // Expose init & renderer to global (if needed elsewhere)
            window.initMap = initMap;
            window.calculateAndDisplayRoute = calculateAndDisplayRoute;
          </script>

          <script>
            // =========================
            // Orders Display System
            // =========================

            let allOrders = [];
            let filteredOrders = [];
            let currentPage = 1;
            let itemsPerPage = 25;
            let activeFilters = {
              clientId: null,
              payment: null,
              date: { min: null, max: null },
              destinationZone: null,
              taggedApi: null
            };



            // Helper to get element by id
            const byId = (id) => document.getElementById(id);

            // Enhanced Select All Functionality
            function updateSelectAllState() {
              if (!ordersTable) return;

              const visibleRows = ordersTable.rows({ page: 'current' }).nodes();
              const visibleCheckboxes = Array.from(visibleRows).map(row =>
                row.querySelector('.rowCheckbox')
              ).filter(Boolean);

              const selectAll = byId('selectAll');
              if (!selectAll) return;

              if (visibleCheckboxes.length === 0) {
                selectAll.checked = false;
                selectAll.indeterminate = false;
                return;
              }

              const allChecked = visibleCheckboxes.every(cb => cb.checked);
              const someChecked = visibleCheckboxes.some(cb => cb.checked);

              selectAll.checked = allChecked;
              selectAll.indeterminate = someChecked && !allChecked;

              // Update visual indicator
              updateSelectAllVisualIndicator(allChecked, someChecked);
            }

            // Toggle all checkboxes on current page with enhanced feedback
            function toggleAllTable(checkbox) {
              if (!ordersTable) return;

              const visibleRows = ordersTable.rows({ page: 'current' }).nodes();
              const visibleCheckboxes = Array.from(visibleRows).map(row =>
                row.querySelector('.rowCheckbox')
              ).filter(Boolean);

              const isChecked = checkbox.checked;

              // Show loading state for bulk operation
              if (visibleCheckboxes.length > 10) {
                showBulkOperationFeedback('Updating selections...', visibleCheckboxes.length);
              }

              visibleCheckboxes.forEach(cb => {
                cb.checked = isChecked;
                const orderId = cb.getAttribute('data-id');
                if (isChecked) {
                  selectedOrderIds.add(orderId);
                } else {
                  selectedOrderIds.delete(orderId);
                }
              });

              // Update count after toggling
              updateSelectedCount();

              updateBulkActionsButton();
              updateBulkActionsButtonState();
              updateSelectAllState();
              updatePaginationDisplay();

              // Hide loading feedback
              if (visibleCheckboxes.length > 10) {
                hideBulkOperationFeedback();
              }

              // Show success feedback
              if (visibleCheckboxes.length > 0) {
                const action = isChecked ? 'selected' : 'deselected';
                showSelectionFeedback(`${visibleCheckboxes.length} orders ${action}`);
              }
            }

            // Select all orders across all pages (not just current page)
            function selectAllOrdersAcrossPages() {
              if (!ordersTable || !allOrders) return;

              showBulkOperationFeedback('Selecting all orders...', allOrders.length);

              // Clear current selection
              selectedOrderIds.clear();

              // Select all orders
              allOrders.forEach(order => {
                selectedOrderIds.add(order.lr_no);
              });

              // Update all checkboxes in current view
              document.querySelectorAll('.rowCheckbox').forEach(cb => {
                cb.checked = true;
              });

              updateBulkActionsButton();
              updateBulkActionsButtonState();
              updateSelectAllState();
              updatePaginationDisplay();

              hideBulkOperationFeedback();
              showSelectionFeedback(`All ${allOrders.length} orders selected`);
            }

            // Deselect all orders
            function deselectAllOrders() {
              selectedOrderIds.clear();
              document.querySelectorAll('.rowCheckbox').forEach(cb => {
                cb.checked = false;
              });

              updateBulkActionsButton();
              updateBulkActionsButtonState();
              updateSelectAllState();
              updatePaginationDisplay();

              showSelectionFeedback('All orders deselected');
            }

            // Visual indicator for select all state
            function updateSelectAllVisualIndicator(allChecked, someChecked) {
              const selectAll = byId('selectAll');
              if (!selectAll) return;

              const label = selectAll.closest('th')?.querySelector('.select-all-label');
              if (!label) return;

              if (allChecked) {
                label.textContent = 'Deselect All';
                label.style.color = '#dc3545';
              } else if (someChecked) {
                label.textContent = 'Select All (Some Selected)';
                label.style.color = '#ffc107';
              } else {
                label.textContent = 'Select All';
                label.style.color = '#007bff';
              }
            }

            // Bulk operation feedback
            function showBulkOperationFeedback(message, count) {
              const feedback = document.createElement('div');
              feedback.id = 'bulk-feedback';
              feedback.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #007bff;
                color: white;
                padding: 10px 20px;
                border-radius: 6px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                z-index: 9999;
                font-weight: 500;
              `;
              feedback.innerHTML = `
                <div style="display: flex; align-items: center; gap: 10px;">
                  <div class="spinner-border spinner-border-sm" role="status"></div>
                  <span>${message}</span>
                </div>
              `;
              document.body.appendChild(feedback);
            }

            function hideBulkOperationFeedback() {
              const feedback = byId('bulk-feedback');
              if (feedback) {
                feedback.remove();
              }
            }

            // Selection feedback
            function showSelectionFeedback(message) {
              const feedback = document.createElement('div');
              feedback.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #28a745;
                color: white;
                padding: 10px 20px;
                border-radius: 6px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                z-index: 9999;
                font-weight: 500;
                animation: fadeInOut 3s ease-in-out;
              `;
              feedback.innerHTML = `<i class="fas fa-check-circle me-2"></i>${message}`;
              document.body.appendChild(feedback);

              setTimeout(() => {
                if (feedback.parentNode) {
                  feedback.remove();
                }
              }, 3000);
            }

            // Enhanced checkbox change handler
            function handleRowCheckboxChange(checkbox) {
              const orderId = checkbox.getAttribute('data-id');
              const isChecked = checkbox.checked;

              if (isChecked) {
                selectedOrderIds.add(orderId);
              } else {
                selectedOrderIds.delete(orderId);
              }

              updateBulkActionsButton();
              updateBulkActionsButtonState();
              updateSelectAllState();
              updatePaginationDisplay();

              // Show individual selection feedback for large selections
              if (selectedOrderIds.size > 0 && selectedOrderIds.size % 10 === 0) {
                showSelectionFeedback(`${selectedOrderIds.size} orders selected`);
              }
            }

            // Update bulk actions button state and badge
            function updateBulkActionsButtonState() {
              const bulkActionsButton = byId('bulkActionsDropdown');
              const selectedCountBadge = byId('selectedCountBadge');

              if (!bulkActionsButton || !selectedCountBadge) return;

              const selectedCount = selectedOrderIds.size;

              if (selectedCount > 0) {
                bulkActionsButton.disabled = false;
                bulkActionsButton.style.background = '';
                selectedCountBadge.style.display = 'inline-block';
                selectedCountBadge.textContent = selectedCount;
              } else {
                bulkActionsButton.disabled = true;
                bulkActionsButton.style.background = '';
                selectedCountBadge.style.display = 'none';
              }
            }






            // --- Selection Tracking ---
            let selectedOrderIds = new Set();

            function updateSelectedOrderIds() {
              // Update the set of selected order IDs
              selectedOrderIds.clear();
              document.querySelectorAll('.rowCheckbox:checked').forEach(checkbox => {
                const orderId = checkbox.getAttribute('data-id');
                if (orderId) {
                  selectedOrderIds.add(orderId);
                }
              });
            }

            function restoreCheckboxStates() {
              // Restore checkbox states when page changes
              document.querySelectorAll('.rowCheckbox').forEach(checkbox => {
                const orderId = checkbox.getAttribute('data-id');
                checkbox.checked = selectedOrderIds.has(orderId);
              });
              updateSelectAllState();
            }

            function getSelectedCountText() {
              const count = selectedOrderIds.size;
              return count > 0 ? ` (${count} selected)` : '';
            }

            // --- Dynamic Pagination Functions ---
            function updatePaginationDisplay() {
              if (!ordersTable) return;

              const info = ordersTable.page.info();
              const start = info.start + 1;
              const end = Math.min(info.end, info.recordsDisplay);
              const total = info.recordsDisplay;
              const currentPage = info.page + 1;

              // Update pagination info text
              const paginationInfo = byId('paginationInfo');
              if (paginationInfo) {
                if (total === 0) {
                  paginationInfo.textContent = 'No entries';
                } else {
                  paginationInfo.textContent = `Showing ${start} to ${end} of ${total} entries${getSelectedCountText()}`;
                }
              }

              // Update page number indicator
              const pageNumberIndicator = byId('pageNumberIndicator');
              if (pageNumberIndicator) {
                pageNumberIndicator.textContent = currentPage.toString();
              }

              // Update page size button text
              const pageSizeBtn = byId('pageSizeBtn');
              if (pageSizeBtn) {
                pageSizeBtn.textContent = info.length.toString();
              }

              // Update dropdown active state
              const dropdownItems = document.querySelectorAll('#pageCountDatatable .dropdown-item');
              dropdownItems.forEach(item => {
                item.classList.remove('active');
                if (parseInt(item.getAttribute('data-value')) === info.length) {
                  item.classList.add('active');
                }
              });
            }

            // Handle page size change
            function handlePageSizeChange(newSize) {
              if (!ordersTable) return;

              ordersTable.page.len(newSize).draw();
            }

            // --- Initialize DataTable ---
            let ordersTable;

            function initializeDataTable() {
              // Check if DataTable is already initialized
              if ($.fn.DataTable && $('#ordersTable').hasClass('dataTable')) {
                console.log('DataTable already initialized, skipping...');
                return ordersTable;
              }

              // Destroy existing DataTable instance if it exists
              if (ordersTable && $.fn.DataTable.isDataTable('#ordersTable')) {
                console.log('Destroying existing DataTable instance...');
                ordersTable.destroy();
              }

              if ($.fn.DataTable && $('#ordersTable tbody tr').length > 0) {
                console.log('Initializing DataTable...');
                ordersTable = $('#ordersTable').DataTable({
                  pageLength: 10,
                  lengthMenu: [[5, 10, 25, 50, -1], [5, 10, 25, 50, "All"]],
                  order: false,
             
                  columnDefs: [
                   // Disable sorting on checkbox and actions columns
                    { width: '40px', targets: 0 },
                    { width: '200px', targets: 1 },
                    { width: '250px', targets: 2 },
                    { width: '150px', targets: 3 },
                    { width: '200px', targets: 4 },
                    { width: '120px', targets: 5 }
                  ],
                  language: {
                    emptyTable: `
            <div class="text-center py-5">
              <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
              <h5 class="text-muted">No orders found</h5>
              <p class="text-muted">Try adjusting your filters or search criteria</p>
            </div>
          `
                  },
                  initComplete: function () {
                    console.log('DataTable initialized successfully');
                    // Make sure action buttons are visible after initialization
                    $('.btn').css('display', 'inline-block');
                    $('.dropdown').css('display', 'inline-block');
                  },
                  drawCallback: function () {
                    console.log('DataTable draw callback triggered');
                    // Update select all checkbox state after each draw
                    updateSelectAllState();

                    // Restore checkbox states from persistent selection
                    restoreCheckboxStates();

                    // Update pagination display dynamically
                    updatePaginationDisplay();

                    // Ensure action buttons remain visible after draw
                    $('.btn').css('display', 'inline-block');
                    $('.dropdown').css('display', 'inline-block');
                  }
                });
                console.log('DataTable initialized:', ordersTable);
              } else {
                console.log('DataTable not initialized - no rows found or jQuery DataTable not available');
                console.log('jQuery DataTable available:', typeof $.fn.DataTable);
                console.log('Rows found:', $('#ordersTable tbody tr').length);

                // Fallback: Ensure buttons are visible even without DataTable
                $('.btn').css({
                  'display': 'inline-block',
                  'visibility': 'visible',
                  'opacity': '1'
                });
                $('.dropdown').css({
                  'display': 'inline-block',
                  'visibility': 'visible'
                });

                // Add basic table styling
                $('#ordersTable').css({
                  'width': '100%',
                  'border-collapse': 'collapse'
                });
                $('#ordersTable th, #ordersTable td').css({
                  'border': '1px solid #ddd',
                  'padding': '8px',
                  'text-align': 'left'
                });
              }
            }

            // --- Filter & Search ---
            function applyFilters() {
              console.log('applyFilters called with activeFilters:', activeFilters);

              if (!ordersTable) return;

              // Clear existing search
              ordersTable.search('').draw();

              // Apply custom filters using DataTables column filtering
              $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
                const row = ordersTable.row(dataIndex).node();
                const order = allOrders.find(o => o.lr_no === $(row).find('.lrNo').text().trim());

                if (!order) return true;

                // Client filter
                if (activeFilters.clientId && order.client_id != activeFilters.clientId) return false;

                // Payment mode filter
                if (activeFilters.payment && String(order.payment_mode).toLowerCase() !== String(activeFilters.payment).toLowerCase()) {
                  return false;
                }

                // Date range filter
                if (activeFilters.date.min || activeFilters.date.max) {
                  const orderDate = parseDisplayDate(order.created_at);
                  if (!orderDate) return false;
                  if (activeFilters.date.min && orderDate < activeFilters.date.min) return false;
                  if (activeFilters.date.max && orderDate > activeFilters.date.max) return false;
                }

                // Destination zone filter
                if (activeFilters.destinationZone && order.destination_zone !== activeFilters.destinationZone) return false;

                // Tagged API filter
                if (activeFilters.taggedApi && String(order.tagged_api).toUpperCase() !== String(activeFilters.taggedApi).toUpperCase()) {
                  return false;
                }

                return true;
              });

              ordersTable.draw();

              // Remove the custom filter after drawing
              $.fn.dataTable.ext.search.pop();
            }

            function performSearch(searchTerm) {
              if (!ordersTable) return;

              if (!searchTerm.trim()) {
                ordersTable.search('').draw();
              } else {
                // Custom search function that searches across multiple columns
                $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
                  const row = ordersTable.row(dataIndex).node();
                  const order = allOrders.find(o => o.lr_no === $(row).find('.lrNo').text().trim());

                  if (!order) return false;

                  const term = searchTerm.toLowerCase();
                  return (
                    (order.lr_no || '').toLowerCase().includes(term) ||
                    (order.order_id || '').toLowerCase().includes(term) ||
                    (order.company_name || '').toLowerCase().includes(term) ||
                    (order.consignee_first_name || '').toLowerCase().includes(term) ||
                    (order.consignee_last_name || '').toLowerCase().includes(term) ||
                    (order.consignee_city || '').toLowerCase().includes(term)
                  );
                });

                ordersTable.draw();
                $.fn.dataTable.ext.search.pop();
              }
            }

            // --- Date Parsing Helper ---
            function parseDisplayDate(str) {
              if (!str) return null;
              const d = new Date(str);
              if (!isNaN(d)) return d;
              // fallback: try to parse "dd MMM, yyyy" etc.
              const m = str.match(/(\d{1,2})\s+([A-Za-z]{3,})[,\s]+(\d{4})/);
              if (m) {
                const day = parseInt(m[1], 10);
                const month = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"].indexOf(m[2]);
                const year = parseInt(m[3], 10);
                if (month >= 0) return new Date(year, month, day);
              }
              return null;
            }

            // --- Filter Indicator UI ---
            function ensureIndicatorsContainer() {
              if ($('.filter-indicators').length === 0) {
                const html = `<div class="filter-indicators d-flex flex-wrap mx-4 mb-3"></div>`;
                const $filterRow = $('.filter, .row.filter, .filter-bar').first();
                if ($filterRow.length) {
                  $filterRow.after(html);
                } else {
                  $('body').prepend(html);
                }
              }
            }
            function showActiveFilter(type, valueText) {
              ensureIndicatorsContainer();
              let label;
              switch (type) {
                case 'client': label = 'Client'; break;
                case 'payment': label = 'Payment'; break;
                case 'date': label = 'Date'; break;
                case 'destinationZone': label = 'Destination Zone'; break;
                case 'taggedApi': label = 'Courier'; break;

                default: label = type.charAt(0).toUpperCase() + type.slice(1);
              }
              const id = `active-filter-${type}`;
              const existing = $(`#${id}`);
              const content = `
      ${label}: ${valueText}
    `;
              if (existing.length) {
                existing.html(content);
              } else {
                $('.filter-indicators').append(
                  `<span id="${id}" class="badge bg-primary me-2 mb-2">${content}</span>`
                );
              }
            }
            function removeIndicator(type) {
              $(`#active-filter-${type}`).remove();
            }

            // --- Populate Dropdowns ---
            function populateClientFilter() {
              const $select = $('#clientSelect');
              $select.empty().append('<option value="">All Clients</option>');
              const clientMap = new Map();
              allOrders.forEach(order => {
                if (order.client_id && order.company_name && !clientMap.has(order.client_id)) {
                  clientMap.set(order.client_id, order.company_name);
                  $select.append(`<option value="${order.client_id}">${order.company_name}</option>`);
                }
              });
            }
            function populatePaymentFilter() {
              const $select = $('#paymentModeSelect');
              $select.empty().append('<option value="">All Payment Modes</option>');
              const modes = new Set();
              allOrders.forEach(order => {
                if (order.payment_mode && !modes.has(order.payment_mode)) {
                  modes.add(order.payment_mode);
                  $select.append(`<option value="${order.payment_mode}">${order.payment_mode}</option>`);
                }
              });
            }

            // --- Utilities ---
            function formatDateForInput(date) {
              const y = date.getFullYear();
              const m = String(date.getMonth() + 1).padStart(2, '0');
              const d = String(date.getDate()).padStart(2, '0');
              return `${y}-${m}-${d}`;
            }

            // --- Clear Filter ---
            function clearFilter(type) {
              if (type === 'client') {
                activeFilters.clientId = null;
                $('#clientSelect').val('');
              } else if (type === 'payment') {
                activeFilters.payment = null;
                $('#paymentModeSelect').val('');
              } else if (type === 'date') {
                activeFilters.date.min = null;
                activeFilters.date.max = null;
                $('#min-date').val('');
                $('#max-date').val('');
              } else if (type === 'destinationZone') {
                activeFilters.destinationZone = null;
                $('#filterDestinationZone').val('');
              } else if (type === 'taggedApi') {
                activeFilters.taggedApi = null;
                $('#filterTaggedApi').val('');
              }
              removeIndicator(type);
              applyFilters();
            }

            // --- Enhanced Export Functions ---
            async function exportToCSV() {
              try {
                // Show loading indicator
                const loadingToast = showLoadingToast('Preparing CSV export...');

                // Get filtered data from server with current filters
                const exportData = await getFilteredDataForExport('csv');

                if (!exportData || exportData.length === 0) {
                  hideLoadingToast(loadingToast);
                  showErrorNotification('No data available for export');
                  return;
                }

                // Create CSV content
                const headers = ['LR No', 'Order ID', 'Company Name', 'Consignee Name', 'Consignee Mobile', 'Consignee Email', 'City', 'Pin Code', 'Payment Mode', 'Invoice Amount', 'Invoice No', 'Created Date', 'Status', 'Courier Partner'];

                const csvContent = [
                  headers.join(','),
                  ...exportData.map(order => [
                    order.lr_no || '',
                    order.order_id_db || '',
                    order.company_name || '',
                    `${order.consignee_first_name || ''} ${order.consignee_last_name || ''}`.trim(),
                    order.consignee_phone || '',
                    order.consignee_email || '',
                    order.consignee_city || '',
                    order.consignee_pincode || '',
                    order.payment_mode || '',
                    order.invoice_amount || '',
                    order.invoice_no || '',
                    order.created_at ? new Date(order.created_at).toLocaleDateString() : '',
                    getStatusText(order.status),
                    order.tagged_api || ''
                  ].map(v => `"${String(v).replace(/"/g, '""')}"`).join(','))
                ].join('\n');

                // Download CSV
                downloadFile(csvContent, 'text/csv;charset=utf-8;', `ready_to_dispatch_orders_${new Date().toISOString().split('T')[0]}.csv`);

                hideLoadingToast(loadingToast);
                showSuccessNotification('CSV export completed successfully');

              } catch (error) {
                console.error('CSV export failed:', error);
                showErrorNotification('Failed to export CSV. Please try again.');
              }
            }

            async function exportToExcel() {
              try {
                // Show loading indicator
                const loadingToast = showLoadingToast('Preparing Excel export...');

                // Get filtered data from server
                const exportData = await getFilteredDataForExport('excel');

                if (!exportData || exportData.length === 0) {
                  hideLoadingToast(loadingToast);
                  showErrorNotification('No data available for export');
                  return;
                }

                // Create Excel-compatible CSV (with proper escaping)
                const headers = ['LR No', 'Order ID', 'Company Name', 'Consignee Name', 'Consignee Mobile', 'Consignee Email', 'City', 'Pin Code', 'Payment Mode', 'Invoice Amount (₹)', 'Invoice No', 'Created Date', 'Status', 'Courier Partner', 'Weight (kg)', 'Service Type'];

                const csvContent = [
                  headers.join('\t'),
                  ...exportData.map(order => [
                    order.lr_no || '',
                    order.order_id_db || '',
                    order.company_name || '',
                    `${order.consignee_first_name || ''} ${order.consignee_last_name || ''}`.trim(),
                    order.consignee_phone || '',
                    order.consignee_email || '',
                    order.consignee_city || '',
                    order.consignee_pincode || '',
                    order.payment_mode || '',
                    order.invoice_amount || '',
                    order.invoice_no || '',
                    order.created_at ? new Date(order.created_at).toLocaleDateString() : '',
                    getStatusText(order.status),
                    order.tagged_api || '',
                    order.chargeable_weight || order.total_weight || '',
                    order.forwarder_product_type || ''
                  ].map(v => String(v).replace(/\t/g, ' ').replace(/\n/g, ' ')).join('\t'))
                ].join('\n');

                // Download as Excel
                downloadFile(csvContent, 'application/vnd.ms-excel;charset=utf-8;', `ready_to_dispatch_orders_${new Date().toISOString().split('T')[0]}.xls`);

                hideLoadingToast(loadingToast);
                showSuccessNotification('Excel export completed successfully');

              } catch (error) {
                console.error('Excel export failed:', error);
                showErrorNotification('Failed to export Excel. Please try again.');
              }
            }

            async function exportToPDF() {
              try {
                // Show loading indicator
                const loadingToast = showLoadingToast('Preparing PDF export...');

                // Get filtered data from server
                const exportData = await getFilteredDataForExport('pdf');

                if (!exportData || exportData.length === 0) {
                  hideLoadingToast(loadingToast);
                  showErrorNotification('No data available for export');
                  return;
                }

                // Make API call to generate PDF
                const response = await fetch('/api/ecom/orders/export-pdf', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                    orders: exportData,
                    filters: activeFilters
                  })
                });

                if (!response.ok) {
                  throw new Error('Failed to generate PDF');
                }

                const blob = await response.blob();
                downloadBlob(blob, `ready_to_dispatch_orders_${new Date().toISOString().split('T')[0]}.pdf`);

                hideLoadingToast(loadingToast);
                showSuccessNotification('PDF export completed successfully');

              } catch (error) {
                console.error('PDF export failed:', error);
                showErrorNotification('Failed to export PDF. Please try again.');
              }
            }

            // Helper function to get filtered data for export
            async function getFilteredDataForExport(format) {
              try {
                const response = await fetch('/api/ecom/orders/export-data', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                    filters: activeFilters,
                    format: format,
                    selectedIds: Array.from(selectedOrderIds)
                  })
                });

                if (!response.ok) {
                  throw new Error('Failed to fetch export data');
                }

                const result = await response.json();
                return result.success ? result.data : [];

              } catch (error) {
                console.error('Failed to get export data:', error);
                // Fallback to client-side filtered data
                return getClientSideFilteredData();
              }
            }

            // Fallback function for client-side filtering
            function getClientSideFilteredData() {
              if (!ordersTable) return [];

              const filteredRows = ordersTable.rows({ search: 'applied' }).data();
              return filteredRows.map(rowData => {
                const lrNo = rowData[1];
                return allOrders.find(o => o.lr_no === lrNo);
              }).filter(order => order);
            }

            // Helper function to get status text
            function getStatusText(status) {
              const statusMap = {
                1: 'Ready to Dispatch',
                2: 'Ready to Dispatch',
                3: 'In Transit',
                4: 'Delivered',
                5: 'RTO - Returned',
                0: 'Cancelled',
                7: 'RTO - In Transit',
                8: 'Out for Delivery'
              };
              return statusMap[status] || 'Unknown';
            }

            // Helper function to download file
            function downloadFile(content, mimeType, filename) {
              const blob = new Blob([content], { type: mimeType });
              const link = document.createElement('a');
              link.href = URL.createObjectURL(blob);
              link.download = filename;
              document.body.appendChild(link);
              link.click();
              document.body.removeChild(link);
              URL.revokeObjectURL(link.href);
            }

            // Helper function to download blob
            function downloadBlob(blob, filename) {
              const link = document.createElement('a');
              link.href = URL.createObjectURL(blob);
              link.download = filename;
              document.body.appendChild(link);
              link.click();
              document.body.removeChild(link);
              URL.revokeObjectURL(link.href);
            }

            // Loading toast functions
            function showLoadingToast(message) {
              if (window.Swal) {
                return Swal.fire({
                  title: message,
                  allowOutsideClick: false,
                  showConfirmButton: false,
                  didOpen: () => {
                    Swal.showLoading();
                  }
                });
              }
              return null;
            }

            function hideLoadingToast(toast) {
              if (toast && toast.close) {
                toast.close();
              }
            }


            // --- Utility Functions ---
            function initializeItemsPerPageSelector() {
              const selector = $('#itemsPerPageSelect');
              if (selector.length) {
                selector.val(itemsPerPage.toString());
                console.log('✅ Items per page initialized:', itemsPerPage);
              }
            }

            // --- Initialization ---
            // Wait for jQuery to be available
            function initializeWhenJQueryReady() {
              if (typeof $ === 'undefined') {
                console.log('jQuery not ready yet, waiting...');
                setTimeout(initializeWhenJQueryReady, 100);
                return;
              }

              console.log('jQuery ready, initializing...');

              $(document).ready(function () {
                console.log('Document ready - initializing orders table...');

                // Wait a bit for all scripts to load and DOM to be fully ready
                setTimeout(function () {
                // Map table rows to allOrders array
                const orderRows = document.querySelectorAll('#ordersTable tbody tr');
                console.log("Found order rows:", orderRows.length);

                if (orderRows.length === 0) {
                  console.warn('No order rows found - table might be empty');
                  return;
                }

                allOrders = Array.from(orderRows).map((row, index) => {
                  // Get the order ID directly from the data attribute (same source as EJS template)
                  const orderIdSafe = row.dataset.orderId || '';

                  console.log(`Row ${index}: orderIdSafe from dataset:`, orderIdSafe);

                  const order = {
                    lr_no: row.querySelector('.lrNo')?.textContent?.trim(),
                    order_id: orderIdSafe, // This is the numeric order_id for API calls
                    orderIdSafe: orderIdSafe, // Keep for backward compatibility
                    order_id_db: row.dataset.orderIdDb || '', // This is the numeric order_id for API calls
                    client_id: row.dataset.client,
                    company_name: row.dataset.companyName,
                    payment_mode: row.dataset.payment,
                    created_at: row.dataset.created,
                    consignee_first_name: row.dataset.consigneeFirstName || '',
                    consignee_last_name: row.dataset.consigneeLastName || '',
                    consignee_city: row.querySelector('td:nth-child(3) .text-muted')?.textContent?.match(/\(([^)]+)\)/)?.[1] || '',
                    invoice_no: row.dataset.invoiceNo || '',
                    invoice_amount: row.dataset.invoiceAmount || '',
                    consignee_phone: row.dataset.consigneePhoneNo || '',
                    consignee_email: row.dataset.consigneeEmailId || '',
                    // Add missing properties that openTrackingModal needs
                    warehouse_pincode: row.dataset.warehousePincode || 'N/A',
                    consignee_pincode: row.dataset.consigneePincode || 'N/A',
                    chargable_weight: row.dataset.weight || 'N/A',
                    package_weight: row.dataset.packageWeight || 'N/A',
                    chargeable_weight: row.dataset.chargeableWeight || 'N/A',
                    volumetric_weight: row.dataset.volumetricWeight || 'N/A',
                    total_weight: row.dataset.totalWeight || 'N/A',
                    weight_unit: row.dataset.weightUnit || 'kg',
                    tagged_api: row.dataset.taggedApi || 'N/A',
                    forwarder_product_type: row.dataset.serviceType || 'N/A',
                    total_lr_charges: row.dataset.charges || 'N/A',
                    lr_date: row.dataset.lrDate || row.dataset.created,
                    eta: row.dataset.eta || '3',
                    pickup_zone: row.dataset.pickupZone || 'NA',
                    destination_zone: row.dataset.destinationZone || 'NA',
                    warehouse_address: row.dataset.warehouseAddress || 'NA',
                    consignee_address1: row.dataset.consigneeAddress || 'NA',
                    grand_total: row.dataset.grandTotal || 'N/A',
                    collectable_amount: row.dataset.collectableAmount || 'N/A',
                    status: row.dataset.status || 'N/A',
                    _row: row // keep reference to DOM element
                  };
                  return order;
                });

                console.log("Final allOrders array:", allOrders);
                filteredOrders = allOrders.slice();

                // Initialize DataTable after a short delay to ensure everything is loaded
                setTimeout(function () {
                  initializeDataTable();

                  // Add event listeners for page size dropdown
                  setTimeout(function () {
                    $('#pageCountDatatable .dropdown-item').on('click', function (e) {
                      e.preventDefault();
                      const newSize = parseInt($(this).data('value'));
                      handlePageSizeChange(newSize);
                    });

                    // Update pagination display initially
                    updatePaginationDisplay();

                    // Add event listeners for individual checkboxes
                    $(document).on('change', '.rowCheckbox', function () {
                      handleRowCheckboxChange(this);
                    });

                    // Add event listener for select all checkbox
                    $('#selectAll').on('change', function() {
                      toggleAllTable(this);
                    });

                    // Initialize bulk actions button state
                    updateBulkActionsButtonState();

                  }, 100);

                }, 500);

              }, 100);

              // Filter option triggers
              $('.filter-option').on('click', function (e) {
                e.preventDefault();
                const type = $(this).data('filter-type');
                if (type === 'client') {
                  populateClientFilter();
                  $('#clientFilterModal').modal('show');
                } else if (type === 'payment') {
                  populatePaymentFilter();
                  $('#paymentFilterModal').modal('show');
                }
              });

              // Apply client filter
              $('#applyClientFilter').on('click', function () {
                const selectedClientId = $('#clientSelect').val() || null;
                activeFilters.clientId = selectedClientId;
                applyFilters();
                if (selectedClientId) {
                  const text = $('#clientSelect option:selected').text();
                  showActiveFilter('client', text);
                } else {
                  removeIndicator('client');
                }
                $('#clientFilterModal').modal('hide');
              });

              // Apply payment filter
              $('#applyPaymentFilter').on('click', function () {
                const selectedPaymentMode = $('#paymentModeSelect').val() || null;
                activeFilters.payment = selectedPaymentMode;
                applyFilters();
                if (selectedPaymentMode) {
                  showActiveFilter('payment', selectedPaymentMode);
                } else {
                  removeIndicator('payment');
                }
                $('#paymentFilterModal').modal('hide');
              });

              // Apply date range filter
              $('#apply-date-filter').on('click', function () {
                const min = $('#min-date').val() ? new Date($('#min-date').val()) : null;
                const max = $('#max-date').val() ? new Date($('#max-date').val()) : null;
                if (min) min.setHours(0, 0, 0, 0);
                if (max) max.setHours(23, 59, 59, 999);
                activeFilters.date.min = min;
                activeFilters.date.max = max;
                applyFilters();
                if (min || max) {
                  const text = (min && max)
                    ? `${min.toLocaleDateString()} - ${max.toLocaleDateString()}`
                    : (min ? `From: ${min.toLocaleDateString()}` : `To: ${max.toLocaleDateString()}`);
                  showActiveFilter('date', text);
                } else {
                  removeIndicator('date');
                }
              });

              // Clear date filter
              $('#clear-date-filter').on('click', function () {
                $('#min-date').val('');
                $('#max-date').val('');
                activeFilters.date.min = null;
                activeFilters.date.max = null;
                applyFilters();
                removeIndicator('date');
              });

              // Quick date ranges
              $('.date-range-option').on('click', function (e) {
                e.preventDefault();
                const range = $(this).data('range');
                const today = new Date();
                let start = new Date(today);
                let end = new Date(today);
                switch (range) {
                  case 'today': break;
                  case 'yesterday':
                    start.setDate(today.getDate() - 1);
                    end.setDate(today.getDate() - 1);
                    break;
                  case 'last7days':
                    start.setDate(today.getDate() - 6);
                    break;
                  case 'last30days':
                    start.setDate(today.getDate() - 29);
                    break;
                  case 'thisMonth':
                    start = new Date(today.getFullYear(), today.getMonth(), 1);
                    end = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                    break;
                  case 'lastMonth':
                    start = new Date(today.getFullYear(), today.getMonth() - 1, 1);
                    end = new Date(today.getFullYear(), today.getMonth(), 0);
                    break;
                }
                $('#min-date').val(formatDateForInput(start));
                $('#max-date').val(formatDateForInput(end));
                $('#apply-date-filter').click();
              });

              // Search bar - Custom search for our pagination system
              function customPerformSearch(searchTerm) {
                const searchTermTrimmed = searchTerm.trim();
                console.log('🔍 Performing search for:', searchTermTrimmed);

                if (!searchTermTrimmed) {
                  filteredOrders = allOrders.slice();
                  hideSearchResultsInfo();
                } else {
                  const term = searchTermTrimmed.toLowerCase();
                  filteredOrders = allOrders.filter(order => {
                    return (
                      (order.lr_no || '').toLowerCase().includes(term) ||
                      (order.order_id || '').toLowerCase().includes(term) ||
                      (order.orderid || '').toLowerCase().includes(term) ||
                      (order.company_name || '').toLowerCase().includes(term) ||
                      (order.consignee_first_name || '').toLowerCase().includes(term) ||
                      (order.consignee_last_name || '').toLowerCase().includes(term) ||
                      (order.consignee_city || '').toLowerCase().includes(term) ||
                      (order.consignee_phone || '').toLowerCase().includes(term) ||
                      (order.consignee_email || '').toLowerCase().includes(term) ||
                      (order.tagged_api || '').toLowerCase().includes(term)
                    );
                  });
                  showSearchResultsInfo(filteredOrders.length, searchTermTrimmed);
                }

                currentPage = 1;
                displayOrders();
                renderPagination(filteredOrders.length);
              }

              // Search results info functions
              function showSearchResultsInfo(count, searchTerm) {
                const infoDiv = $('#search-results-info');
                const countSpan = $('#search-results-count');

                countSpan.text(count);
                infoDiv.show();

                // Add visual feedback based on results
                if (count === 0) {
                  infoDiv.removeClass('text-muted text-success').addClass('text-warning');
                } else {
                  infoDiv.removeClass('text-muted text-warning').addClass('text-success');
                }
              }

              function hideSearchResultsInfo() {
                $('#search-results-info').hide();
              }

              // Handle search input with debouncing
              let searchTimeout;
              $('#search-input').on('input', function () {
                clearTimeout(searchTimeout);
                const value = $(this).val();
                const hasValue = value.trim().length > 0;
                $('#clear-search').toggle(hasValue);

                searchTimeout = setTimeout(() => {
                  customPerformSearch(value);
                }, 300); // 300ms debounce
              });

              // Handle items per page change
              $('#itemsPerPage').on('change', function () {
                const newPageLength = parseInt($(this).val());
                if (ordersTable) {
                  ordersTable.page.len(newPageLength).draw();
                  updatePaginationDisplay();
                }
              });

              // Handle clear search button
              $('#clear-search').on('click', function () {
                $('#search-input').val('');
                $('#clear-search').hide();
                customPerformSearch('');
                $('#search-input').focus();
              });


           

            
              // Initialize search section visibility
              function initializeSearchSection() {
                const searchSection = $('.view-filter');
                if (searchSection.length) {
                  console.log('✅ Search section found and should be visible');
                  searchSection.show();
                } else {
                  console.warn('❌ Search section not found');
                }
              }


              // Filter Sidebar Functionality
              // Quick date ranges for filter sidebar
              $('.filter-date-range-option').on('click', function (e) {
                e.preventDefault();
                const range = $(this).data('range');
                const today = new Date();
                let start = new Date(today);
                let end = new Date(today);

                switch (range) {
                  case 'today': break;
                  case 'yesterday':
                    start.setDate(today.getDate() - 1);
                    end.setDate(today.getDate() - 1);
                    break;
                  case 'last7days':
                    start.setDate(today.getDate() - 6);
                    break;
                  case 'last30days':
                    start.setDate(today.getDate() - 29);
                    break;
                  case 'thisMonth':
                    start = new Date(today.getFullYear(), today.getMonth(), 1);
                    end = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                    break;
                  case 'lastMonth':
                    start = new Date(today.getFullYear(), today.getMonth() - 1, 1);
                    end = new Date(today.getFullYear(), today.getMonth(), 0);
                    break;
                }

                $('#filter-min-date').val(formatDateForInput(start));
                $('#filter-max-date').val(formatDateForInput(end));

                // Update the drawer range text
                $('#drawerRangeText').text($(this).text().trim());
                $('#selectedRangeText').text($(this).text().trim());
              });

              // Manual-only filter sidebar control with debugging
              const filterSidebar = document.getElementById('filterSidebar');
              if (filterSidebar) {
                console.log('✅ Filter sidebar found, setting up MANUAL-ONLY event listeners');

                // Track offcanvas state for debugging and prevent conflicts
                let isOperating = false; // Prevent multiple simultaneous operations
                let currentState = 'closed'; // closed, opening, open, closing

                // Bootstrap offcanvas event listeners with conflict prevention
                filterSidebar.addEventListener('show.bs.offcanvas', function (event) {
                  const now = Date.now();
                  console.log('🔄 Offcanvas SHOW event triggered, current state:', currentState);

                  // Prevent multiple simultaneous operations
                  if (isOperating || currentState === 'opening' || currentState === 'open') {
                    console.log('🚫 Blocking SHOW - already operating or open');
                    event.preventDefault();
                    event.stopPropagation();
                    return;
                  }

                  isOperating = true;
                  currentState = 'opening';
                  console.log('✅ SHOW event accepted, state changed to opening');

                  // Set timeout to reset if stuck in opening state
                  if (window.openingTimeout) {
                    clearTimeout(window.openingTimeout);
                  }

                  window.openingTimeout = setTimeout(() => {
                    if (currentState === 'opening') {
                      console.log('⚠️ Opening timeout - resetting stuck state');
                      currentState = 'closed';
                      isOperating = false;
                    }
                  }, 2000);
                });

                filterSidebar.addEventListener('shown.bs.offcanvas', function () {
                  console.log('✅ Offcanvas SHOWN event - fully opened and STABLE');

                  // Clear the opening timeout since we successfully opened
                  if (window.openingTimeout) {
                    clearTimeout(window.openingTimeout);
                  }

                  currentState = 'open';
                  isOperating = false;

                  // Wait for complete stability before adding backdrop
                  setTimeout(() => {
                    if (currentState === 'open') {
                      addCustomBackdrop();
                    }
                  }, 150);
                });

                filterSidebar.addEventListener('hide.bs.offcanvas', function (event) {
                  console.log('🔄 Offcanvas HIDE event triggered, current state:', currentState);

                  // Prevent multiple simultaneous operations
                  if (isOperating || currentState === 'closing' || currentState === 'closed') {
                    console.log('🚫 Blocking HIDE - already operating or closed');
                    event.preventDefault();
                    event.stopPropagation();
                    return;
                  }

                  isOperating = true;
                  currentState = 'closing';
                  removeCustomBackdrop();
                });

                filterSidebar.addEventListener('hidden.bs.offcanvas', function () {
                  console.log('✅ Offcanvas HIDDEN event - fully closed');
                  currentState = 'closed';
                  isOperating = false;
                  removeCustomBackdrop();
                });

                // Custom backdrop that only responds to manual clicks
                function addCustomBackdrop() {
                  console.log('🎭 Adding custom backdrop for manual control');

                  // Debug current filter state
                  console.log('📊 Filter visual state check:', {
                    hasShowClass: filterSidebar.classList.contains('show'),
                    visibility: filterSidebar.style.visibility,
                    display: getComputedStyle(filterSidebar).display,
                    transform: getComputedStyle(filterSidebar).transform
                  });

                  removeCustomBackdrop(); // Remove any existing

                  const backdrop = document.createElement('div');
                  backdrop.className = 'custom-offcanvas-backdrop';
                  backdrop.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          z-index: 1040;
          width: 100vw;
          height: 100vh;
          background-color: rgba(0, 0, 0, 0.5);
        `;

                  // Only close on direct backdrop click (not inside filter)
                  backdrop.addEventListener('click', function (event) {
                    if (event.target === backdrop && currentState === 'open') {
                      console.log('🎯 Custom backdrop clicked - closing manually');
                      closeFilterManually();
                    }
                  });

                  document.body.appendChild(backdrop);
                }

                function removeCustomBackdrop() {
                  const customBackdrop = document.querySelector('.custom-offcanvas-backdrop');
                  if (customBackdrop) {
                    customBackdrop.remove();
                    console.log('🗑️ Custom backdrop removed');
                  }
                }

                // Manual close function with complete state reset
                function closeFilterManually() {
                  console.log('🔒 Closing filter manually, current state:', currentState);

                  // Don't proceed if already closing or closed
                  if (currentState === 'closing' || currentState === 'closed') {
                    console.log('🚫 Already closing/closed, ignoring close request');
                    return;
                  }

                  // Set state to closing to prevent conflicts
                  currentState = 'closing';
                  isOperating = true;

                  // Remove custom backdrop immediately
                  removeCustomBackdrop();

                  if (filterSidebar) {
                    // Destroy existing Bootstrap instance to prevent conflicts
                    try {
                      const existingInstance = bootstrap.Offcanvas.getInstance(filterSidebar);
                      if (existingInstance) {
                        existingInstance.dispose();
                        console.log('🗑️ Destroyed existing Bootstrap instance');
                      }
                    } catch (error) {
                      console.error('Error destroying offcanvas instance:', error);
                    }

                    // Force close manually with complete cleanup
                    filterSidebar.classList.remove('show', 'showing');
                    filterSidebar.setAttribute('aria-hidden', 'true');
                    filterSidebar.style.visibility = 'hidden';

                    console.log('🔍 After manual close - filter state:', {
                      hasShowClass: filterSidebar.classList.contains('show'),
                      visibility: filterSidebar.style.visibility,
                      ariaHidden: filterSidebar.getAttribute('aria-hidden')
                    });

                    // Clean up body and document
                    document.body.classList.remove('offcanvas-open', 'modal-open');
                    document.body.style.overflow = '';
                    document.body.style.paddingRight = '';

                    // Remove any remaining backdrops
                    const allBackdrops = document.querySelectorAll('.offcanvas-backdrop, .custom-offcanvas-backdrop');
                    allBackdrops.forEach(backdrop => backdrop.remove());

                    console.log('🧹 Manual cleanup completed');

                    // Reset state after cleanup
                    currentState = 'closed';
                    isOperating = false;

                    // Recreate Bootstrap instance after cleanup for next use
                    setTimeout(() => {
                      try {
                        // Reset visibility for next use
                        filterSidebar.style.visibility = '';
                        filterSidebar.setAttribute('aria-hidden', 'true');

                        const newInstance = new bootstrap.Offcanvas(filterSidebar, {
                          backdrop: false,
                          keyboard: false
                        });
                        console.log('✅ Bootstrap instance recreated for future use');
                        console.log('🔄 Filter reset state:', {
                          hasShowClass: filterSidebar.classList.contains('show'),
                          visibility: filterSidebar.style.visibility,
                          ariaHidden: filterSidebar.getAttribute('aria-hidden')
                        });
                      } catch (error) {
                        console.error('Error recreating Bootstrap instance:', error);
                      }
                    }, 300);
                  }
                }

                // Emergency reset function for completely stuck states
                function emergencyResetFilter() {
                  console.log('🚨 Emergency filter reset triggered');

                  // Remove ALL offcanvas and backdrop elements
                  const allOffcanvas = document.querySelectorAll('.offcanvas');
                  const allBackdrops = document.querySelectorAll('.offcanvas-backdrop, .custom-offcanvas-backdrop, .modal-backdrop');

                  allOffcanvas.forEach(offcanvas => {
                    try {
                      const instance = bootstrap.Offcanvas.getInstance(offcanvas);
                      if (instance) instance.dispose();
                    } catch (e) { }

                    offcanvas.classList.remove('show', 'showing');
                    offcanvas.setAttribute('aria-hidden', 'true');
                    offcanvas.style.visibility = 'hidden';
                  });

                  allBackdrops.forEach(backdrop => backdrop.remove());

                  // Reset body
                  document.body.classList.remove('offcanvas-open', 'modal-open');
                  document.body.style.overflow = '';
                  document.body.style.paddingRight = '';
                  document.body.style.marginRight = '';

                  // Recreate filter instance
                  setTimeout(() => {
                    if (filterSidebar) {
                      new bootstrap.Offcanvas(filterSidebar, {
                        backdrop: false,
                        keyboard: false
                      });
                      console.log('🔄 Filter completely reset and ready');
                    }
                  }, 500);
                }

                // Expose functions globally
                window.closeFilterManually = closeFilterManually;
                window.emergencyResetFilter = emergencyResetFilter;

                // Add keyboard shortcut for emergency reset (Ctrl+Shift+R)
                document.addEventListener('keydown', function (event) {
                  if (event.ctrlKey && event.shiftKey && event.key === 'R') {
                    event.preventDefault();
                    console.log('🔑 Emergency reset triggered by keyboard shortcut');
                    emergencyResetFilter();
                  }
                });
              }

              // Intelligent periodic cleanup to prevent stuck screens with debugging
              setInterval(() => {
                const openOffcanvas = document.querySelector('.offcanvas.show');
                const backdrops = document.querySelectorAll('.offcanvas-backdrop');

                if (!openOffcanvas && backdrops.length > 0) {
                  console.log('🔍 Periodic cleanup: Found orphaned backdrops, cleaning up');
                  // No offcanvas is open but backdrops exist - clean them up
                  backdrops.forEach(backdrop => backdrop.remove());
                  // Also clean up body classes
                  document.body.classList.remove('offcanvas-open', 'modal-open');
                  document.body.style.overflow = '';
                  document.body.style.paddingRight = '';
                } else if (openOffcanvas && backdrops.length > 1) {
                  console.log('🔍 Periodic cleanup: Found multiple backdrops, removing extras');
                  // Remove extra backdrops if multiple exist
                  for (let i = 0; i < backdrops.length - 1; i++) {
                    backdrops[i].remove();
                  }
                }

                // Debug log current state only when there are issues
                const filterSidebar = document.getElementById('filterSidebar');
                if (filterSidebar && filterSidebar.classList.contains('show')) {
                  // Only log if there's an issue (backdrop mismatch or body class problem)
                  const backdropCount = backdrops.length;
                  const bodyHasOffcanvasOpen = document.body.classList.contains('offcanvas-open');

                  if (backdropCount !== 1 || !bodyHasOffcanvasOpen) {
                    console.log('⚠️ Filter sidebar issue detected:', {
                      isShown: true,
                      backdropCount: backdropCount,
                      bodyHasOffcanvasOpen: bodyHasOffcanvasOpen,
                      expectedBackdrops: 1,
                      expectedBodyClass: true
                    });
                  }
                }
              }, 5000); // Reduced frequency to every 5 seconds

              // Apply filter button
              $('#filterApplyBtn').on('click', function () {
                const minDate = $('#filter-min-date').val() ? new Date($('#filter-min-date').val()) : null;
                const maxDate = $('#filter-max-date').val() ? new Date($('#filter-max-date').val()) : null;
                const paymentMode = $('#filterPaymentMode').val();
                const destinationZone = $('#filterDestinationZone').val();
                const taggedApi = $('#filterTaggedApi').val();


                if (minDate) minDate.setHours(0, 0, 0, 0);
                if (maxDate) maxDate.setHours(23, 59, 59, 999);

                // Apply filters to the existing filter system
                activeFilters.date.min = minDate;
                activeFilters.date.max = maxDate;

                // Add new filters
                if (paymentMode) {
                  console.log('Payment mode filter selected:', {
                    paymentMode: paymentMode,
                    paymentModeType: typeof paymentMode,
                    paymentModeValue: paymentMode
                  });
                  // Store the original value for filtering
                  activeFilters.payment = paymentMode;
                }
                if (destinationZone) {
                  activeFilters.destinationZone = destinationZone;
                }
                if (taggedApi) {
                  console.log('Tagged API filter selected:', {
                    taggedApi: taggedApi,
                    taggedApiType: typeof taggedApi,
                    taggedApiValue: taggedApi
                  });
                  activeFilters.taggedApi = taggedApi;
                } else {
                  console.log('No tagged API filter selected, clearing activeFilters.taggedApi');
                  activeFilters.taggedApi = null;
                }


                // Apply the filters
                applyFilters();

                // Close filter manually after applying
                if (window.closeFilterManually) {
                  console.log('🎯 Apply button clicked - closing filter manually');
                  window.closeFilterManually();
                }

                // Show filter indicators
                if (minDate || maxDate) {
                  const text = (minDate && maxDate)
                    ? `${minDate.toLocaleDateString()} - ${maxDate.toLocaleDateString()}`
                    : (minDate ? `From: ${minDate.toLocaleDateString()}` : `To: ${maxDate.toLocaleDateString()}`);
                  showActiveFilter('date', text);
                }
                if (paymentMode) {
                  const paymentValue = paymentMode === 'cod' ? 'COD' : paymentMode === 'prepaid' ? 'Prepaid' : paymentMode;
                  showActiveFilter('payment', paymentValue);
                }
                if (destinationZone) {
                  showActiveFilter('destinationZone', destinationZone);
                }
                if (taggedApi) {
                  showActiveFilter('taggedApi', taggedApi);
                }

              });

              // Reset filter button
              $('#filterResetBtn').on('click', function () {
                $('#filter-min-date').val('');
                $('#filter-max-date').val('');
                $('#filterPaymentMode').val('');
                $('#filterDestinationZone').val('');
                $('#filterTaggedApi').val('');


                // Clear all filters
                activeFilters.date.min = null;
                activeFilters.date.max = null;
                activeFilters.payment = null;
                activeFilters.destinationZone = null;
                activeFilters.taggedApi = null;


                // Remove all indicators
                $('.filter-indicators .badge').remove();

                // Apply filters
                applyFilters();
              });

              // Add proper offcanvas closing behavior
              // Handle ESC key press
              document.addEventListener('keydown', function (event) {
                if (event.key === 'Escape') {
                  const filterSidebar = document.getElementById('filterSidebar');
                  if (filterSidebar && filterSidebar.classList.contains('show')) {
                    if (window.closeFilterManually) {
                      window.closeFilterManually();
                    }
                  }
                }
              });

              // Handle backdrop clicks (outside clicks)
              document.addEventListener('click', function (event) {
                const filterSidebar = document.getElementById('filterSidebar');
                if (filterSidebar && filterSidebar.classList.contains('show') &&
                  !filterSidebar.contains(event.target) &&
                  !event.target.closest('[data-bs-toggle="offcanvas"]')) {
                  if (window.closeFilterManually) {
                    window.closeFilterManually();
                  }
                }
              });

              // Initialize offcanvas properly
              if (typeof bootstrap !== 'undefined') {
                // Ensure the offcanvas is properly initialized
                const filterSidebarElement = document.getElementById('filterSidebar');
                if (filterSidebarElement) {
                  // Force re-initialization if needed
                  try {
                    const existingInstance = bootstrap.Offcanvas.getInstance(filterSidebarElement);
                    if (existingInstance) {
                      existingInstance.dispose();
                    }

                    // Create new instance with proper event handling
                    const newOffcanvas = new bootstrap.Offcanvas(filterSidebarElement);

                    // Add custom event listeners for proper cleanup
                    filterSidebarElement.addEventListener('hidden.bs.offcanvas', function () {
                      // Ensure proper cleanup when offcanvas is hidden
                      this.setAttribute('aria-hidden', 'true'); // Ensure aria-hidden is set to true when hidden
                      document.body.classList.remove('offcanvas-open');
                      const backdrop = document.querySelector('.offcanvas-backdrop');
                      if (backdrop) backdrop.remove();
                    });

                    filterSidebarElement.addEventListener('shown.bs.offcanvas', function () {
                      this.setAttribute('aria-hidden', 'false'); // Ensure aria-hidden is set to false when shown
                    });

                  } catch (error) {
                    console.log('Offcanvas initialization:', error);
                  }
                }
              }

              // Use a MutationObserver to ensure offcanvas is properly configured when added to DOM
              const observer = new MutationObserver(function (mutations) {
                mutations.forEach(function (mutation) {
                  if (mutation.addedNodes.length) {
                    mutation.addedNodes.forEach(function (node) {
                      if (node.id === 'filterSidebar' && typeof bootstrap !== 'undefined') {
                        const filterSidebarElement = document.getElementById('filterSidebar');
                        if (filterSidebarElement) {
                          try {
                            const existingInstance = bootstrap.Offcanvas.getInstance(filterSidebarElement);
                            if (existingInstance) {
                              existingInstance.dispose();
                            }
                            const newOffcanvas = new bootstrap.Offcanvas(filterSidebarElement);
                            filterSidebarElement.addEventListener('hidden.bs.offcanvas', function () {
                              this.setAttribute('aria-hidden', 'true');
                              document.body.classList.remove('offcanvas-open');
                              const backdrop = document.querySelector('.offcanvas-backdrop');
                              if (backdrop) backdrop.remove();
                            });
                            filterSidebarElement.addEventListener('shown.bs.offcanvas', function () {
                              this.setAttribute('aria-hidden', 'false');
                            });
                          } catch (error) {
                            console.log('Offcanvas re-initialization via observer:', error);
                          }
                        }
                      }
                    });
                  }
                });
              });

              // Initialize items per page selector
              initializeItemsPerPageSelector();

              observer.observe(document.body, { childList: true, subtree: true });
              }); // Close document ready
            } // Close initializeWhenJQueryReady

            // Start the initialization process
            initializeWhenJQueryReady();

            // Expose for onclick handlers
            window.exportToCSV = exportToCSV;
            window.exportToExcel = exportToExcel;

            // Additional utility functions
            window.handlePageSizeChange = function(newSize) {
              if (ordersTable) {
                ordersTable.page.len(newSize).draw();
                updatePaginationDisplay();
              }
            };

            window.updateSelectAllState = function() {
              const selectAllCheckbox = document.getElementById('selectAll');
              if (!selectAllCheckbox) return;

              const visibleCheckboxes = document.querySelectorAll('.rowCheckbox');
              const checkedBoxes = document.querySelectorAll('.rowCheckbox:checked');

              selectAllCheckbox.checked = visibleCheckboxes.length > 0 && visibleCheckboxes.length === checkedBoxes.length;
              selectAllCheckbox.indeterminate = checkedBoxes.length > 0 && checkedBoxes.length < visibleCheckboxes.length;
            };

            window.updatePaginationDisplay = function() {
              if (!ordersTable) return;

              const info = ordersTable.page.info();
              const start = info.start + 1;
              const end = Math.min(info.end, info.recordsTotal);
              const total = info.recordsTotal;

              document.getElementById('showingStart').textContent = start;
              document.getElementById('showingEnd').textContent = end;
              document.getElementById('totalEntries').textContent = total;
            };

            window.updateBulkActionsButton = function() {
              const selectedCount = document.querySelectorAll('.rowCheckbox:checked').length;
              const bulkActionsButton = document.getElementById('bulkActionsDropdown');

              if (bulkActionsButton) {
                bulkActionsButton.disabled = selectedCount === 0;
                bulkActionsButton.innerHTML = selectedCount > 0
                  ? `Bulk Actions (${selectedCount})`
                  : 'Bulk Actions';
              }
            };

            window.syncSelectAllState = function() {
              const selectAllCheckbox = document.getElementById('selectAll');
              if (!selectAllCheckbox) return;

              const visibleCheckboxes = document.querySelectorAll('.rowCheckbox');
              const checkedBoxes = document.querySelectorAll('.rowCheckbox:checked');

              selectAllCheckbox.checked = visibleCheckboxes.length > 0 && visibleCheckboxes.length === checkedBoxes.length;
              selectAllCheckbox.indeterminate = checkedBoxes.length > 0 && checkedBoxes.length < visibleCheckboxes.length;
            };

            window.handleRowCheckboxChange = function(checkbox) {
              updateBulkActionsButton();
              syncSelectAllState();
              updateSelectedCount();
            };

            window.updateSelectedCount = function() {
              const selectedCount = document.querySelectorAll('.rowCheckbox:checked').length;
              const badge = document.getElementById('selectedCountBadge');

              if (badge) {
                if (selectedCount > 0) {
                  badge.textContent = selectedCount;
                  badge.style.display = 'inline-block';
                } else {
                  badge.style.display = 'none';
                }
              }
            };
          </script>

          <script>
            (function () {
              // -----------------------------
              // Utilities
              // -----------------------------
              function getVisibleRowNodes() {
                // Get visible table rows from DataTable
                if (!ordersTable) return [];
                return ordersTable.rows({ page: 'current' }).nodes();
              }

              function qsaIn(node, sel) {
                return Array.from(node.querySelectorAll(sel));
              }

              function qsIn(node, sel) {
                return node.querySelector(sel);
              }

              function isTruthy(v) {
                return !(v === null || v === undefined || v === '' || Number.isNaN(v));
              }

              // -----------------------------
              // Checkbox selection + bulk button
              // -----------------------------
              let selectAll;
              let bulkActionsButton;

              function updateBulkActionsButton() {
                if (!bulkActionsButton) return;
                const anyChecked = document.querySelectorAll('.rowCheckbox:checked').length > 0;
                bulkActionsButton.disabled = !anyChecked;
              }

              function syncSelectAllState() {
                // This function is kept for backward compatibility
                // but now uses DataTables functionality
                updateSelectAllState();
              }

              function toggleVisibleCheckboxes(checked) {
                // This function is kept for backward compatibility with existing code
                // but now uses DataTables functionality
                toggleAllTable({ checked });
              }

              // -----------------------------
              // Bulk Label Printing
              // -----------------------------
              async function mergeAndDownloadPDF(arrayBuffers, fileNameBase) {
                if (!Array.isArray(arrayBuffers) || arrayBuffers.length === 0) {
                  throw new Error('No PDF data provided for merging.');
                }
                const mergedPdf = await PDFLib.PDFDocument.create();

                for (let i = 0; i < arrayBuffers.length; i++) {
                  try {
                    const srcPdf = await PDFLib.PDFDocument.load(arrayBuffers[i]);
                    const pages = await mergedPdf.copyPages(srcPdf, srcPdf.getPageIndices());
                    pages.forEach(p => mergedPdf.addPage(p));
                  } catch (err) {
                    console.error('Error processing PDF index', i, err);
                    throw new Error(`Failed to merge PDF ${i + 1}`);
                  }
                }

                const finalBytes = await mergedPdf.save();
                const blob = new Blob([finalBytes], { type: 'application/pdf' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = `${fileNameBase}_${Date.now()}.pdf`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
              }

              function buildLoadingOverlay() {
                const el = document.createElement('div');
                el.id = 'loading-overlay';
                el.style.cssText = 'position:fixed;inset:0;background:rgba(255,255,255,0.85);display:flex;justify-content:center;align-items:center;z-index:9999;';
                el.innerHTML = '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>';
                return el;
              }

              function extractRowPayload(row) {
                // Try to get a dedicated .lrNo node (as in your markup)
                const lrEl = qsIn(row, '.lrNo');

                // Pull from lrNo element attributes if present
                const fromLr = lrEl ? {
                  lrNo: lrEl.getAttribute('data-lrno') || null,
                  courier: lrEl.getAttribute('data-vendor-type') || null,
                  poId: lrEl.getAttribute('data-pono') || null,
                  orderId: lrEl.getAttribute('data-orderid') || null,
                  clientIdAttr: lrEl.getAttribute('client-id') || lrEl.getAttribute('data-client-id') || null,
                  aggrigatorIdAttr: lrEl.getAttribute('aggrigator-id') || lrEl.getAttribute('data-aggrigator-id') || null,
                } : {};

                // Also try row dataset (recommended to add these to <tr data-client-id="" data-aggrigator-id="">)
                const rowData = {
                  clientIdRow: row.getAttribute('data-client-id') || null,
                  aggrigatorIdRow: row.getAttribute('data-aggrigator-id') || null,
                };

                // Build final payload with fallbacks
                return {
                  lrNo: fromLr.lrNo || row.getAttribute('data-lrno') || null,
                  courier: fromLr.courier || row.getAttribute('data-courier') || null,
                  poId: fromLr.poId || row.getAttribute('data-pono') || null,
                  orderId: fromLr.orderId || row.getAttribute('data-orderid') || null,
                  clientId: fromLr.clientIdAttr || rowData.clientIdRow || row.getAttribute('data-client') || null,
                  aggrigatorId: fromLr.aggrigatorIdAttr || rowData.aggrigatorIdRow || row.getAttribute('data-aggrigator') || null,
                };
              }

              async function printBulkLabels(selectedRows, labelSize) {
                // Overlay
                const overlay = buildLoadingOverlay();
                document.body.appendChild(overlay);

                try {
                  // Split by courier for special handling
                  const isDelLtl = (r) => String(r.courier || '').toLowerCase() === 'delhivery/ltl-surface';
                  const delhiveryLTLRows = selectedRows.filter(isDelLtl);
                  const otherRows = selectedRows.filter(r => !isDelLtl(r));

                  const pdfBuffers = [];

                  // 1) Regular labels (one combined request for others)
                  if (otherRows.length > 0) {
                    const resp = await axios.post(
                      '/api/print-bulk-labels',
                      { selectedRows: otherRows, labelSize },
                      { responseType: 'arraybuffer', headers: { 'Accept': 'application/pdf' } }
                    );
                    if (resp && resp.data) {
                      pdfBuffers.push(resp.data); // already ArrayBuffer
                    }
                  }

                  // 2) Delhivery LTL — one call per row (their API)
                  if (delhiveryLTLRows.length > 0) {
                    const requests = delhiveryLTLRows.map(r => axios.get(
                      '/api/shipping-label/delhivery-ltl',
                      {
                        params: {
                          awbNumber: r.lrNo,
                          poId: r.poId,
                          labelSize,
                          clientId: r.clientId,
                          aggrigatorId: r.aggrigatorId
                        },
                        responseType: 'arraybuffer',
                        headers: { 'Accept': 'application/pdf' }
                      }
                    ));
                    const results = await Promise.all(requests);
                    results.forEach(res => {
                      if (res && res.data) pdfBuffers.push(res.data);
                    });
                  }

                  if (pdfBuffers.length === 0) {
                    throw new Error('No PDF data received from the server.');
                  }

                  await mergeAndDownloadPDF(pdfBuffers, 'batch_labels');
                } catch (err) {
                  console.error('Bulk label generation failed:', err);
                  alert(err?.message || 'An error occurred while generating labels.');
                } finally {
                  overlay.remove();
                }
              }

              // Helper function to generate and download individual shipping labels
              async function generateAndDownloadLabel(orderId, labelSize, lrNo, orderData = null) {
                try {
                  // Show loading state for individual label
                  const loadingToast = showLoadingToast(`Generating ${labelSize} label for LR ${lrNo}...`);

                  // Prepare enhanced parameters
                  const params = {
                    orderId: orderId,
                    labelSize: labelSize,
                    orderType: 'ecom',
                    lrNo: lrNo
                  };

                  // Add additional data if available
                  if (orderData) {
                    if (orderData.client_id) params.clientId = orderData.client_id;
                    if (orderData.aggrigator_id) params.aggrigatorId = orderData.aggrigator_id;
                    if (orderData.tagged_api) params.courier = orderData.tagged_api;
                  }

                  console.log('🎯 Generating label with params:', params);

                  const response = await axios.get('/api/shipping-label/generate', {
                    params: params,
                    responseType: 'blob',
                    timeout: 30000 // 30 second timeout
                  });

                  if (!response.data || response.data.size === 0) {
                    throw new Error('No label data received from server');
                  }

                  // Create and download the PDF
                  const blob = new Blob([response.data], { type: 'application/pdf' });
                  const filename = `shipping-label-${lrNo}-${labelSize}-${new Date().toISOString().split('T')[0]}.pdf`;

                  downloadBlob(blob, filename);

                  hideLoadingToast(loadingToast);

                  // Show success message
                  Swal.fire({
                    icon: 'success',
                    title: 'Label Generated Successfully!',
                    html: `
                      <div style="text-align: left;">
                        <p><strong>LR Number:</strong> ${lrNo}</p>
                        <p><strong>Size:</strong> ${labelSize}</p>
                        <p><strong>Filename:</strong> ${filename}</p>
                      </div>
                    `,
                    timer: 3000,
                    showConfirmButton: false,
                    customClass: {
                      container: 'swal-high-zindex'
                    }
                  });

                } catch (error) {
                  console.error(`Error generating label for order ${orderId}:`, error);
                  hideLoadingToast(loadingToast);

                  // Enhanced error handling with SweetAlert
                  let errorTitle = 'Error Generating Label';
                  let errorMessage = 'An error occurred while generating the shipping label.';

                  if (error.response) {
                    // Server responded with error status
                    const status = error.response.status;

                    if (status === 400) {
                      errorTitle = 'Bad Request';
                      errorMessage = 'Invalid request parameters. Please check the order details.';
                    } else if (status === 404) {
                      errorTitle = 'Not Found';
                      errorMessage = 'Shipping label service not found. Please contact support.';
                    } else if (status === 403) {
                      errorTitle = 'Access Denied';
                      errorMessage = 'You do not have permission to generate labels for this order.';
                    } else if (status === 429) {
                      errorTitle = 'Too Many Requests';
                      errorMessage = 'Please wait a moment before generating another label.';
                    } else if (status === 500) {
                      errorTitle = 'Server Error';
                      errorMessage = 'Internal server error occurred. Please try again later.';
                    } else if (status === 503) {
                      errorTitle = 'Service Unavailable';
                      errorMessage = 'Label generation service is temporarily unavailable.';
                    } else {
                      errorTitle = `Error ${status}`;
                      errorMessage = `Server error with status ${status}. Please try again.`;
                    }
                  } else if (error.code === 'ECONNABORTED') {
                    // Timeout error
                    errorTitle = 'Request Timeout';
                    errorMessage = 'The request timed out. Please try again.';
                  } else if (error.request) {
                    // Request was made but no response received
                    errorTitle = 'Network Error';
                    errorMessage = 'Unable to connect to the server. Please check your internet connection.';
                  } else {
                    // Something else happened
                    errorMessage = error.message || 'An unexpected error occurred.';
                  }

                  // Show error SweetAlert
                  Swal.fire({
                    icon: 'error',
                    title: errorTitle,
                    text: errorMessage,
                    confirmButtonText: 'OK',
                    customClass: {
                      container: 'swal-high-zindex'
                    }
                  });

                  throw error;
                }
              }

              // -----------------------------
              // Event Wiring (DOM Ready)
              // -----------------------------
              document.addEventListener('DOMContentLoaded', function () {
                selectAll = document.getElementById('selectAll');
                bulkActionsButton = document.getElementById('bulkActionsDropdown');

                // Select All — only visible page rows (for both checkboxes)
                if (selectAll) {
                  selectAll.addEventListener('change', function () {
                    toggleVisibleCheckboxes(this.checked);
                  });
                }

                // Table select all checkbox
                const selectAllCheckbox = byId('selectAll');
                if (selectAllCheckbox) {
                  selectAllCheckbox.addEventListener('change', function () {
                    toggleAllTable(this);
                  });
                }

                // Individual row checkbox change
                document.addEventListener('change', function (e) {
                  const target = e.target;
                  if (!target.classList.contains('rowCheckbox')) return;
                  updateBulkActionsButton();
                  updateSelectAllState();
                });

                // Enhanced Bulk Print Menu Items
                document.querySelectorAll('.bulk-print-label').forEach(link => {
                  link.addEventListener('click', async function (e) {
                    e.preventDefault();
                    const labelSize = this.getAttribute('data-size') || '4X6';

                    // Check if any orders are selected using the global selectedOrderIds
                    if (selectedOrderIds.size === 0) {
                      Swal.fire({
                        icon: 'warning',
                        title: 'No Orders Selected',
                        text: 'Please select at least one order to generate labels.',
                        confirmButtonText: 'OK',
                        customClass: {
                          container: 'swal-high-zindex'
                        }
                      });
                      return;
                    }

                    // Get selected order data from allOrders array
                    const selectedOrders = Array.from(selectedOrderIds).map(lrNo => {
                      return allOrders.find(order => order.lr_no === lrNo);
                    }).filter(order => order);

                    if (selectedOrders.length === 0) {
                      Swal.fire({
                        icon: 'error',
                        title: 'Invalid Selection',
                        text: 'Selected orders could not be found. Please refresh and try again.',
                        confirmButtonText: 'OK'
                      });
                      return;
                    }

                    // Show enhanced loading indicator
                    const loadingToast = showLoadingToast(`Generating ${selectedOrders.length} ${labelSize} labels...`);

                    try {
                      // Prepare order data for bulk processing
                      const bulkOrderData = selectedOrders.map(order => ({
                        orderId: order.order_id,
                        lrNo: order.lr_no,
                        courier: order.tagged_api,
                        clientId: order.client_id,
                        aggrigatorId: order.aggrigator_id
                      }));

                      console.log('🚀 Processing bulk labels for:', bulkOrderData.length, 'orders');

                      // Make bulk API call
                      const response = await axios.post('/api/shipping-label/bulk-generate', {
                        orders: bulkOrderData,
                        labelSize: labelSize,
                        orderType: 'ecom'
                      }, {
                        responseType: 'blob',
                        timeout: 120000 // 2 minute timeout for bulk operations
                      });

                      if (!response.data || response.data.size === 0) {
                        throw new Error('No label data received from server');
                      }

                      // Create and download the merged PDF
                      const blob = new Blob([response.data], { type: 'application/pdf' });
                      const filename = `bulk-labels-${labelSize}-${selectedOrders.length}-orders-${new Date().toISOString().split('T')[0]}.pdf`;

                      downloadBlob(blob, filename);

                      hideLoadingToast(loadingToast);

                      // Show success message with details
                      Swal.fire({
                        icon: 'success',
                        title: 'Bulk Labels Generated!',
                        html: `
                          <div style="text-align: left;">
                            <p><strong>Generated:</strong> ${selectedOrders.length} labels</p>
                            <p><strong>Size:</strong> ${labelSize}</p>
                            <p><strong>Filename:</strong> ${filename}</p>
                          </div>
                        `,
                        confirmButtonText: 'Great!',
                        customClass: {
                          container: 'swal-high-zindex'
                        }
                      });

                    } catch (error) {
                      console.error('Bulk label generation failed:', error);
                      hideLoadingToast(loadingToast);

                      // Enhanced error handling
                      let errorMessage = 'Failed to generate bulk labels. Please try again.';
                      if (error.response) {
                        if (error.response.status === 413) {
                          errorMessage = 'Too many orders selected. Please select fewer orders or try individual generation.';
                        } else if (error.response.status === 504) {
                          errorMessage = 'Request timed out. Please try with fewer orders.';
                        }
                      }

                      Swal.fire({
                        icon: 'error',
                        title: 'Bulk Label Generation Failed',
                        text: errorMessage,
                        confirmButtonText: 'OK',
                        customClass: {
                          container: 'swal-high-zindex'
                        }
                      });
                    }
                  });
                });

                // Enhanced Individual Print Label Menu Items
                document.querySelectorAll('.print-label').forEach(link => {
                  link.addEventListener('click', async function (e) {
                    e.preventDefault();
                    const orderId = this.getAttribute('data-orderid');
                    const labelSize = this.getAttribute('data-size');
                    const tableRow = this.closest('tr');

                    if (!tableRow) {
                      console.error('Order row not found');
                      return;
                    }

                    // Get order data from the row attributes or allOrders array
                    const lrNo = tableRow.querySelector('.lrNo')?.textContent?.trim();
                    const clientId = this.getAttribute('client-id') || tableRow.getAttribute('data-client-id');
                    const aggrigatorId = this.getAttribute('aggrigator-id') || tableRow.getAttribute('data-aggrigator-id');
                    const courier = this.getAttribute('data-courier') || tableRow.getAttribute('data-tagged-api');

                    // Find order in allOrders array for more complete data
                    const orderData = allOrders.find(order => order.lr_no === lrNo || order.order_id == orderId);

                    try {
                      await generateAndDownloadLabel(orderId, labelSize, lrNo, orderData);
                    } catch (error) {
                      console.error(`Error generating label for order ${orderId}:`, error);
                    }
                  });
                });

                // ------------- Courier Compact Toggle + Active styles -------------
                window.toggleCourierOptions = function (headerElement) {
                  const courierCompact = headerElement.closest('.courier-compact');
                  if (!courierCompact) return;
                  const optionsContainer = courierCompact.querySelector('.courier-options-compact');

                  const computed = getComputedStyle(optionsContainer);
                  const isExpanded = computed.maxHeight !== '0px';
                  if (isExpanded) {
                    optionsContainer.style.maxHeight = '0px';
                  } else {
                    optionsContainer.style.maxHeight = '200px';
                  }
                };

                // Option selection styling (within courier options)
                document.querySelectorAll('.courier-options-compact > div > div').forEach(option => {
                  option.addEventListener('click', function (e) {
                    e.stopPropagation();
                    const wrap = this.closest('.courier-compact');
                    if (!wrap) return;
                    wrap.querySelectorAll('.courier-options-compact > div > div').forEach(opt => {
                      opt.style.border = 'none';
                      opt.style.backgroundColor = '';
                    });
                    this.style.border = '2px solid #007bff';
                    this.style.backgroundColor = '#f8f9fa';
                    // Place for on-select logic…
                  });
                });
              });
            })();
          </script>


          <script>
            (function () {
              // -----------------------------
              // Helpers
              // -----------------------------
              // Global variable to store tracking data
              let globalTrackingData = {};

              const INRCurrency = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR', maximumFractionDigits: 0 });

              const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
              const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

              const safe = (v, fallback = 'N/A') => (v === null || v === undefined || v === '' ? fallback : v);

              function $(id) { return document.getElementById(id); }

              function setText(id, val) {
                const el = $(id);
                if (!el) return;
                el.textContent = val ?? '';
              }

              function setHTML(id, html) {
                const el = $(id);
                if (!el) return;
                el.innerHTML = html ?? '';
              }

              function setSrc(id, url, fallback) {
                const el = $(id);
                if (!el) return;
                el.src = url || fallback || '/logos/logo-dark.png';
                if (fallback) {
                  el.onerror = () => { el.onerror = null; el.src = fallback; };
                }
              }

              function toDate(value) {
                const d = new Date(value);
                return isNaN(d.getTime()) ? null : d;
              }

              function formatINDate(d) {
                if (!d) return 'N/A';
                // Show as "28 Apr, 2025" style
                return d.toLocaleDateString('en-IN', { day: '2-digit', month: 'short', year: 'numeric', timeZone: 'Asia/Kolkata' });
              }

              function formatINDateTime(d) {
                if (!d) return 'N/A';
                return d.toLocaleString('en-IN', { day: '2-digit', month: 'short', year: 'numeric', hour: '2-digit', minute: '2-digit', hour12: true, timeZone: 'Asia/Kolkata' });
              }

              function toINR(n) {
                const num = Number(n);
                return isFinite(num) ? INRCurrency.format(num) : INRCurrency.format(0);
              }

              function titleCase(str) {
                if (!str) return 'N/A';
                return String(str).replace(/\w\S*/g, t => t.charAt(0).toUpperCase() + t.slice(1).toLowerCase());
              }

              function courierLogo(taggedApi) {
                const v = (taggedApi || '').toLowerCase();
                if (v.includes('delhivery')) return '/assets/images/logos/delhivery.png';
                if (v.includes('xpress') || v.includes('expressbees') || v.includes('express')) return '/assets/images/logos/expressbees.png';
                if (v.includes('dtdc')) return '/assets/images/logos/dtdc.png';
                if (v.includes('bluedart')) return '/assets/images/BlueDart.png';
                if (v.includes('fedex')) return '/assets/images/FedEx.png';
                return '/logos/logo-dark.png';
              }

              // -----------------------------
              // Main
              // -----------------------------

              // Function to update tracking status text based on status value
              function updateTrackingStatusText(status) {
                let trackingStatusText = '';
                let currentStatusText = '';
                console.log("status", status)

                switch (parseInt(status)) {
                  case 1:
                  case 2:
                    trackingStatusText = 'Ready to Dispatch';
                    currentStatusText = 'Ready to Dispatch';
                    break;

                  case 3:
                    trackingStatusText = 'In Transit';
                    currentStatusText = 'In Transit';
                    break;
                  case 8:
                    trackingStatusText = 'Out for Delivery';
                    currentStatusText = 'Out for Delivery';
                    break;
                  case 4:
                    trackingStatusText = 'Delivered';
                    currentStatusText = 'Delivered';
                    break;
                  case 0:
                    trackingStatusText = 'Cancelled';
                    currentStatusText = 'Cancelled';
                    break;
                  case 5:
                    trackingStatusText = 'Order in Return';
                    currentStatusText = 'Order in Return';
                    break;
                  default:
                    trackingStatusText = 'Unknown Status';
                    currentStatusText = 'Unknown Status';
                }

                // Update the tracking status elements
                const trackingStatusEl = document.getElementById('trackingStatus');
                const currentStatusEl = document.getElementById('currentStatus');

                if (trackingStatusEl) {
                  trackingStatusEl.textContent = trackingStatusText;
                }
                if (currentStatusEl) {
                  currentStatusEl.textContent = currentStatusText;
                }
              }

             

              // Helper functions for tracking
              async function updateTimelineWithRealData(lrNo, taggedApi, orderDate, lrDate, chargeableWeight = null, packageWeight = null, orderIdForDisplay = null) {
                try {
                  // Call your API
                  const apiUrl = `${window.location.protocol}//${window.location.hostname}:8001/api/ecom/shipments/tracking/${lrNo}`;
                  const response = await axios.get(apiUrl);
                  const result = await response.data;

                  if (result.success && result.data) {
                    // Store data globally for later use
                    globalTrackingData[lrNo] = result.data;

                    // Update the timeline with real data
                    const timelineContainer = document.getElementById('deliveryTimeline');
                    if (timelineContainer) {
                      timelineContainer.innerHTML = ''; // Clear existing

                      // Scroll to top when new data loads
                      timelineContainer.parentElement.scrollTop = 0;

                      // Create timeline based on status value
                      const timelineItems = createTimelineFromStatus(result.data.status, result.data.courier, lrNo, result.data.trackingData, orderDate, lrDate, chargeableWeight, packageWeight, orderIdForDisplay);
                      timelineContainer.innerHTML = timelineItems;

                      // No need to add More info button separately as it's now part of the timeline design
                    }
                  } else {
                    console.log('No tracking data available for LR:', lrNo);
                    // Show a message when no tracking data
                    const timelineContainer = document.getElementById('deliveryTimeline');
                    if (timelineContainer) {
                      timelineContainer.innerHTML = `
              <div class="card-body p-4">
                <div class="text-center text-muted py-4">
                  <i class="fas fa-info-circle fa-3x mb-3 text-muted"></i>
                  <h5 class="text-dark mb-2">No tracking information available yet for LR: ${lrNo}</h5>
                  <p class="text-muted mb-0">Tracking data will appear here once the shipment is processed</p>
                </div>
              </div>
            `;

                      // No "More info" button when there's no data
                    }
                  }
                } catch (error) {
                  console.error('Error fetching tracking data:', error);
                  // Show error message
                  const timelineContainer = document.getElementById('deliveryTimeline');
                  if (timelineContainer) {
                    timelineContainer.innerHTML = `
              <div class="card-body p-4">
                <div class="text-center text-danger py-4">
                  <i class="fas fa-exclamation-triangle fa-3x mb-3 text-danger"></i>
                  <h5 class="text-danger mb-2">Error loading tracking data</h5>
                  <p class="text-danger mb-0">Please try again later</p>
                </div>
              </div>
            `;

                    // No "More info" button when there's an error
                  }
                }
              }

              // Create timeline based on status value
              function createTimelineFromStatus(status, courier, lrNo, trackingData = [], orderDate, lrDate, chargeableWeight = null, packageWeight = null, orderIdForDisplay = null) {
                const currentDate = new Date();
                const formattedDate = currentDate.toLocaleDateString('en-IN');
                const formattedTime = currentDate.toLocaleTimeString('en-IN', {
                  hour: '2-digit',
                  minute: '2-digit',
                  hour12: true
                });

                // Define timeline steps based on status
                const timelineSteps = getTimelineSteps(status, courier, trackingData, orderDate, lrDate);

                let timelineHTML = `
        <div class="tracker-container" style="max-width: 320px; width: 100%; border: 1px solid #d1d5db; border-radius: 0.5rem; padding: 1rem; color: #4b5563; background: #fff;">
          <div class="header" style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 1rem; font-weight: 600; color: #4b5563; font-size: 14px;">
            
            <span>Order ID #${safe(orderIdForDisplay, '-')}</span>
          </div>

          <div class="info-row" style="display: flex; justify-content: space-between; margin-bottom: 0.25rem; font-size: 11px; color: #4b5563; font-weight: 600;">
            <div>AWB No</div>
            <div class="value" style="font-weight: 400; display: flex; align-items: center; gap: 0.25rem; color: #4b5563;">
              <span>${lrNo}</span>
              <i class="fas fa-copy" style="color: #3b82f6; cursor: pointer; font-size: 12px;" onclick="copyToClipboard('${lrNo}')" title="Copy AWB Number"></i>
            </div>
          </div>
          <div class="info-row package-details" style="display: flex; justify-content: space-between; margin-bottom: 0.25rem; font-size: 11px; color: #4b5563; font-weight: 600;">
            <div>Package Details</div>
            <div class="value" style="font-weight: 400; display: flex; align-items: center; gap: 0.25rem; color: #4b5563;">
              <i class="fas fa-box" style="font-size: 14px; color: #4b5563;"></i>
              <span>Standard Package</span>
            </div>
          </div>
          <div class="info-row" style="display: flex; justify-content: space-between; margin-bottom: 0.25rem; font-size: 11px; color: #4b5563; font-weight: 600;">
            <div>Weight</div>
                           <div id="timelineWeight">${packageWeight ? (packageWeight + ' kg') : 'N/A'}</div>
          </div>

          <div  style="display: flex; gap: 1rem; margin-top: 1rem;">
            <div class="timeline-icons" style="position: relative;display: flex;flex-direction: column;align-items: end;gap: 1.5rem;width: 2rem;">
              <div style="content: ''; position: absolute; top: 1.75rem; left: 50%; transform: translateX(-50%); width: 2px; height: calc(100% - 3.5rem); background-color: #60a5fa; z-index: 0;"></div>
      `;

                // Add timeline icons
                timelineSteps.forEach((step, index) => {
                  const isCompleted = step.completed;
                  const iconClass = getTimelineIcon(step.title);

                  timelineHTML += `
          <div class="timeline-icon" title="${step.title}" style="width: 2rem; height: 2rem; background-color: ${isCompleted ? '#60a5fa' : '#d1d5db'}; color: white; border-radius: 50%; display: flex; justify-content: center; align-items: center; z-index: 1; font-size: 14px;">
            <i class="${iconClass}"></i>
          </div>
        `;
                });

                timelineHTML += `
            </div>
            <div class="timeline-texts" style="flex: 1; font-size: 11px; color: #4b5563; font-weight: 400; line-height: 1.2;">
      `;

                // Add timeline texts
                timelineSteps.forEach((step, index) => {
                  const isLastStep = index === timelineSteps.length - 1;

                  timelineHTML += `
          <div style="margin-bottom: 1.5rem;">
            <div class="title" style="font-weight: 600; font-size: 12px; color: #374151; margin-bottom: 0.15rem;">${step.title}</div>
            ${step.date ? `<div class="date" style="margin-bottom: 0.15rem;">${step.date}, ${step.time || formattedTime}</div>` : ''}
            ${step.description ? `<div class="subtext" style="color: #93c5fd; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 160px;" title="${step.description}">${step.description}</div>` : ''}
            ${isLastStep ? `
              <div class="links" style="display: flex; flex-direction: column; gap: 0.25rem; font-weight: 600; color: #3b82f6;">
                <a href="#" onclick="showMoreInfo('${lrNo}', '${courier}', '${status}', '${lrNo}')" style="text-decoration: none;">More info</a>
              </div>
            ` : ''}
          </div>
        `;
                });

                timelineHTML += `
            </div>
          </div>

          <div class="footer" style="margin-top: 1rem; border-top: 1px solid #d1d5db; padding-top: 0.5rem; font-size: 11px; color: #4b5563; display: flex; justify-content: space-between; align-items: center; font-weight: 400;">
            <div class="label" style="font-weight: 600; display: flex; align-items: center; gap: 0.25rem;">
              Chargeable Weight <i class="fas fa-info-circle" style="font-size: 12px;"></i>
            </div>
            <div id="timelineChargeableWeight">${chargeableWeight ? (chargeableWeight + ' kg') : 'N/A'}</div>
          </div>
        </div>
      `;

                return timelineHTML;
              }

              // Helper function to get appropriate icon for each timeline step
              function getTimelineIcon(title) {
                const iconMap = {
                  'Order Received': 'fas fa-shopping-bag',
                  'Ready To Ship': 'fas fa-box',
                  'Scheduled for Pickup': 'fas fa-truck-loading',
                  'In-transit': 'fas fa-truck',
                  'Out for delivery': 'fas fa-motorcycle',
                  'Delivered': 'fas fa-clipboard-check',
                  'RTO - In Transit': 'fas fa-undo',
                  'RTO - Returned': 'fas fa-undo-alt'
                };
                return iconMap[title] || 'fas fa-circle';
              }

              // Get timeline steps based on status value
              function getTimelineSteps(status, courier, trackingData = [], orderDate, lrDate) {
                const currentDate = new Date();
                const currentDateStr = currentDate.toLocaleDateString('en-IN', { day: '2-digit', month: 'short', year: 'numeric' });
                const currentTimeStr = currentDate.toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit', hour12: true });

                // Helper function to format dates
                function formatINDate(date) {
                  return date.toLocaleDateString('en-IN', { day: '2-digit', month: 'short', year: 'numeric' });
                }

                function formatINDateTime(date) {
                  return date.toLocaleDateString('en-IN', { day: '2-digit', month: 'short', year: 'numeric' }) + ', ' +
                    date.toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit', hour12: true });
                }

                // Determine Order Received date and time
                let orderReceivedDate = currentDateStr;
                let orderReceivedTime = currentTimeStr;
                if (orderDate) {
                  try {
                    const orderDateObj = new Date(orderDate);
                    orderReceivedDate = formatINDate(orderDateObj);
                    orderReceivedTime = orderDateObj.toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit', hour12: true });
                  } catch (e) {
                    console.warn('Invalid order date:', orderDate);
                  }
                }

                // Determine Ready To Ship date and time
                let readyToShipDate = currentDateStr;
                let readyToShipTime = currentTimeStr;

                if (trackingData && trackingData.length > 0) {
                  // Look for the earliest 'Data Received', 'MANIFESTED', or 'Booked' scan
                  const readyToShipScans = trackingData.filter(scan => {
                    const scanDesc = (scan.scan_description || scan.scan || '').toLowerCase();
                    return scanDesc.includes('data received') ||
                      scanDesc.includes('manifested') ||
                      scanDesc.includes('booked') ||
                      scanDesc.includes('pickup') ||
                      scanDesc.includes('out for pickup');
                  });

                  if (readyToShipScans.length > 0) {
                    // Sort by date to get the earliest
                    readyToShipScans.sort((a, b) => {
                      const dateA = new Date(a.scan_datetime || a.scan_date || a.strActionDate);
                      const dateB = new Date(b.scan_datetime || b.scan_date || b.strActionDate);
                      return dateA - dateB;
                    });

                    const earliestScan = readyToShipScans[0];
                    try {
                      const scanDate = new Date(earliestScan.scan_datetime || earliestScan.scan_date || earliestScan.strActionDate);
                      readyToShipDate = formatINDate(scanDate);
                      readyToShipTime = scanDate.toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit', hour12: true });
                    } catch (e) {
                      console.warn('Invalid scan date:', earliestScan);
                    }
                  } else if (lrDate) {
                    // Fallback to LR date if no scan found
                    try {
                      const lrDateObj = new Date(lrDate);
                      readyToShipDate = formatINDate(lrDateObj);
                      readyToShipTime = lrDateObj.toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit', hour12: true });
                    } catch (e) {
                      console.warn('Invalid LR date:', lrDate);
                    }
                  }
                } else if (lrDate) {
                  // Fallback to LR date if no tracking data
                  try {
                    const lrDateObj = new Date(lrDate);
                    readyToShipDate = formatINDate(lrDateObj);
                    readyToShipTime = lrDateObj.toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit', hour12: true });
                  } catch (e) {
                    console.warn('Invalid LR date:', lrDate);
                  }
                }

                const steps = [
                  {
                    title: 'Order Received',
                    statusText: 'Order Created',
                    statusClass: 'order-received',
                    completed: true,
                    date: orderReceivedDate,
                    time: orderReceivedTime
                  },
                  {
                    title: 'Ready To Ship',
                    statusText: 'Processing',
                    statusClass: 'ready-to-ship',
                    completed: true,
                    date: readyToShipDate,
                    time: readyToShipTime
                  },
                  {
                    title: 'Scheduled for Pickup',
                    statusText: 'Pickup Scheduled',
                    statusClass: 'scheduled-pickup',
                    completed: status >= 1,
                    date: status >= 1 ? currentDateStr : null,
                    time: status >= 1 ? currentTimeStr : null
                  },
                  {
                    title: 'In-transit',
                    statusText: 'In Transit',
                    statusClass: 'in-transit',
                    completed: status >= 3,
                    date: status >= 3 ? currentDateStr : null,
                    time: status >= 3 ? currentTimeStr : null,
                    description: null
                  },
                  {
                    title: 'Out for delivery',
                    statusText: 'Out For Delivery',
                    statusClass: 'out-delivery',
                    completed: status >= 8,
                    date: status >= 8 ? currentDateStr : null,
                    time: status >= 8 ? currentTimeStr : null
                  },
                  {
                    title: 'RTO - In Transit',
                    statusText: 'RTO Processing',
                    statusClass: 'rto',
                    completed: status >= 7,
                    date: status >= 7 ? currentDateStr : null,
                    time: status >= 7 ? currentTimeStr : null
                  },
                  {
                    title: 'RTO - Returned',
                    statusText: 'RTO Completed',
                    statusClass: 'rto',
                    completed: status >= 5,
                    date: status >= 5 ? currentDateStr : null,
                    time: status >= 5 ? currentTimeStr : null
                  }
                ];

                // Filter steps based on courier and status
                if (courier === 'XPRESSBEES') {
                  if (status === 1) {
                    return steps.slice(0, 3); // Order Received, Ready To Ship, Scheduled for Pickup
                  } else if (status === 3) {
                    return steps.slice(0, 4); // Add In-transit
                  } else if (status === 8) {
                    return steps.slice(0, 5); // Add Out for delivery
                  } else if (status === 4) {
                    return steps.slice(0, 6); // Add RTO - In Transit
                  } else if (status === 5) {
                    return steps.slice(0, 7); // Add RTO - Returned
                  }
                } else if (courier === 'DELHIVERY') {
                  if (status === 1) {
                    return steps.slice(0, 3);
                  } else if (status === 3) {
                    return steps.slice(0, 4);
                  } else if (status === 8) {
                    return steps.slice(0, 5);
                  } else if (status === 4) {
                    return steps.slice(0, 6);
                  }
                }

                return steps.slice(0, 3); // Default to first 3 steps
              }

              function getStatusClass(code, courier) {
                const statusMap = {
                  'XPRESSBEES': {
                    'PP': 'status-pickup',
                    'MANIFESTED': 'status-manifested',
                    'IN_TRANSIT': 'status-in-transit',
                    'DELIVERED': 'status-delivered',
                    'OUT_FOR_PICKUP': 'status-pickup',
                    'DATA_RECEIVED': 'status-manifested'
                  },
                  'DELHIVERY': {
                    'PP': 'status-pickup',
                    'OFD': 'status-out-for-delivery',
                    'DL': 'status-delivered',
                    'UND': 'status-undelivered'
                  },
                  'DTDC': {
                    'PCUP': 'status-pickup',
                    'IN_TRANSIT': 'status-in-transit',
                    'DL': 'status-delivered',
                    'RTO': 'status-rto'
                  }
                };

                return statusMap[courier]?.[code] || 'status-default';
              }

              function getStatusText(code, courier) {
                const statusTextMap = {
                  'PP': 'Pickup',
                  'MANIFESTED': 'Manifested',
                  'IN_TRANSIT': 'In Transit',
                  'DELIVERED': 'Delivered',
                  'OFD': 'Out For Delivery',
                  'UND': 'Undelivered',
                  'PCUP': 'Picked Up',
                  'RTO': 'RTO',
                  'OUT_FOR_PICKUP': 'Out For Pickup',
                  'DATA_RECEIVED': 'Data Received'
                };

                return statusTextMap[code] || code;
              }

              function formatDate(dateString) {
                if (!dateString) return 'N/A';
                try {
                  return new Date(dateString).toLocaleDateString('en-IN');
                } catch {
                  return dateString;
                }
              }

              function formatDateTime(dateTimeString) {
                if (!dateTimeString) return 'N/A';
                try {
                  const date = new Date(dateTimeString);
                  return date.toLocaleTimeString('en-IN', {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: true
                  });
                } catch {
                  return dateTimeString;
                }
              }

              // Show more info modal
              function showMoreInfo(lrNo, courier, status, dataKey) {
                // Get the data from global storage
                const apiData = globalTrackingData[dataKey];

                // Find the order data to get weight information
                const orderData = allOrders.find(order => order.lr_no === lrNo);
                const chargeableWeightDisplay = orderData ? safe(orderData.chargeable_weight, orderData.weight, 'N/A') : 'N/A';

                const statusText = getStatusTextForStatus(status, courier);

                Swal.fire({
                  title: 'Transit History',
                  html: `
          <div class="text-start">
            <div class="mb-3">
              <h6 class="fw-bold text-primary">All tracking history details</h6>
              <div class="mt-2">
                <strong>Chargeable Weight:</strong> ${/^\d+(\.\d+)?$/.test(String(chargeableWeightDisplay)) ? `${chargeableWeightDisplay} kg` : chargeableWeightDisplay}
              </div>
            </div>
            
            ${apiData && apiData.trackingData && apiData.trackingData.length > 0 ? `
              <div class="transit-timeline" style="max-height: 400px; overflow-y: auto; position: relative;">
                <div class="timeline-line" style="height: 48%; top: 14px; left: 14px; transform: translateX(-50%); opacity: 1; border: 1px dashed var(--clr-primary); position: absolute;"></div>
                
                ${apiData.trackingData.map((track, index) => `
                  <div class="transit-event ${index === apiData.trackingData.length - 1 ? 'last-event' : ''}">
                    <div class="transit-circle"></div>
                    <div class="transit-content">
                      <div class="transit-date">${new Date(track.scan_datetime).toLocaleDateString('en-IN')}, ${new Date(track.scan_datetime).toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit' })}</div>
                      <div class="transit-description">${track.scan_description} at ${track.location}</div>
                    </div>
                  </div>
                `).join('')}
              </div>
            ` : `
              <div class="transit-timeline" style="max-height: 400px; overflow-y: auto; position: relative;">
                <div class="timeline-line" style=" height: 48%;  top: 14px;left: 14px;transform: translateX(-50%);opacity: 1;border: 1px dashed var(--clr-primary);position: absolute;"></div>
               
                
                
                <div class="transit-event">
                  <div class="transit-circle"></div>
                  <div class="transit-content">
                    <div class="transit-date">Current</div>
                    <div class="transit-description">Order will updated soon</div>
                  </div>
                </div>
              </div>
            `}
          </div>
        `,
                  showCloseButton: true,
                  showConfirmButton: false,
                  width: '600px',
                  customClass: {
                    container: 'custom-swal-container'
                  }
                });
              }

              // Get status text for status value
              function getStatusTextForStatus(status, courier) {
                const statusMap = {
                  1: 'Pickup/Manifested',
                  2: 'Manifested',
                  3: 'In Transit',
                  4: 'Delivered',
                  5: 'RTO Delivered',
                  6: 'Exception/NDR',
                  7: 'RTO In Transit',
                  8: 'Out For Delivery',
                  9: 'Not Delivered',
                  10: 'RTO Booked'
                };

                return statusMap[status] || `Status ${status}`;
              }



              // Copy to clipboard function
              function copyToClipboard(text) {
                if (navigator.clipboard && window.isSecureContext) {
                  navigator.clipboard.writeText(text).then(() => {
                    // Show success feedback
                    const copyIcon = event.target;
                    const originalClass = copyIcon.className;
                    copyIcon.className = 'fas fa-check';
                    copyIcon.style.color = '#10b981';
                    setTimeout(() => {
                      copyIcon.className = originalClass;
                      copyIcon.style.color = '#3b82f6';
                    }, 1000);
                  }).catch(err => {
                    console.error('Failed to copy: ', err);
                  });
                } else {
                  // Fallback for older browsers
                  const textArea = document.createElement('textarea');
                  textArea.value = text;
                  textArea.style.position = 'fixed';
                  textArea.style.left = '-999999px';
                  textArea.style.top = '-999999px';
                  document.body.appendChild(textArea);
                  textArea.focus();
                  textArea.select();
                  try {
                    document.execCommand('copy');
                    // Show success feedback
                    const copyIcon = event.target;
                    const originalClass = copyIcon.className;
                    copyIcon.className = 'fas fa-check';
                    copyIcon.style.color = '#10b981';
                    setTimeout(() => {
                      copyIcon.className = originalClass;
                      copyIcon.style.color = '#3b82f6';
                    }, 1000);
                  } catch (err) {
                    console.error('Failed to copy: ', err);
                  }
                  document.body.removeChild(textArea);
                }
              }

              // Make all functions globally accessible
              window.updateTimelineWithRealData = updateTimelineWithRealData;
              window.getStatusClass = getStatusClass;
              window.getStatusText = getStatusText;
              window.formatDate = formatDate;
              window.formatDateTime = formatDateTime;
              window.showMoreInfo = showMoreInfo;
              window.createTimelineFromStatus = createTimelineFromStatus;
              window.getTimelineSteps = getTimelineSteps;

              window.copyToClipboard = copyToClipboard;
            })();
          </script>

          <!-- jQuery (required for Bootstrap and other functionality) -->
          <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

          <!-- Bootstrap JS (if not already included) -->
          <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

          <!-- Additional Functions for Complete Functionality -->
          <script>
            // =========================
            // Additional Helper Functions
            // =========================

            // Ensure all functions are globally available
            window.toggleAll = function (checkbox) {
              const isChecked = checkbox.checked;
              const visibleRows = getVisibleRowNodes();
              const visibleCheckboxes = visibleRows
                .map(row => row.querySelector('.rowCheckbox'))
                .filter(Boolean);

              visibleCheckboxes.forEach(cb => { cb.checked = isChecked; });
              updateBulkActionsButton();
              syncSelectAllState();
            };

            // Get visible row nodes for current page
            function getVisibleRowNodes() {
              const startIndex = (currentPage - 1) * itemsPerPage;
              const endIndex = Math.min(startIndex + itemsPerPage, filteredOrders.length);

              const visibleCards = [];
              for (let i = startIndex; i < endIndex; i++) {
                const order = filteredOrders[i];
                if (order && order._card) {
                  visibleCards.push(order._card);
                }
              }
              return visibleCards;
            }

            // Update bulk actions button state
            function updateBulkActionsButton() {
              const bulkActionsButton = document.getElementById('bulkActionsDropdown');
              if (!bulkActionsButton) return;

              const anyChecked = document.querySelectorAll('.rowCheckbox:checked').length > 0;
              bulkActionsButton.disabled = !anyChecked;

              // Update button appearance
              if (anyChecked) {
                bulkActionsButton.classList.remove('disabled');
                bulkActionsButton.style.opacity = '1';
              } else {
                bulkActionsButton.classList.add('disabled');
                bulkActionsButton.style.opacity = '0.6';
              }
            }

            // Sync select all checkbox state
            function syncSelectAllState() {
              const selectAll = document.getElementById('selectAll');
              if (!selectAll) return;

              const visibleRows = getVisibleRowNodes();
              const visibleCheckboxes = visibleRows
                .map(row => row.querySelector('.rowCheckbox'))
                .filter(Boolean);

              const allChecked = visibleCheckboxes.length > 0 && visibleCheckboxes.every(cb => cb.checked);
              const someChecked = visibleCheckboxes.some(cb => cb.checked);

              selectAll.checked = allChecked;
              selectAll.indeterminate = someChecked && !allChecked;
            }

            // Export functions
            window.exportToCSV = function () {
              console.log("Exporting", filteredOrders, "orders to CSV");
              const headers = ['LR No', 'Order ID', 'Company Name', 'Consignee Name', 'Consignee Mo.no', 'Consignee email', 'City', 'Pin Code', 'Payment Mode', 'invoice(Rs)', 'invoice no.', 'Created Date'];
              const csvContent = [
                headers.join(','),
                ...filteredOrders.map(order => [
                  order.lr_no || '',
                  order.order_id_db || '',
                  order.company_name || '',
                  `${order.consignee_first_name || ''} ${order.consignee_last_name || ''}`.trim(),
                  order.consignee_phone || '',
                  order.consignee_email || '',
                  order.consignee_city || '',
                  order.consignee_pincode || '',
                  order.payment_mode || '',
                  order.invoice_amount || '',
                  order.invoice_no || '',
                  order.created_at || ''
                ].map(v => `"${String(v).replace(/"/g, '""')}"`).join(','))
              ].join('\n');
              const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
              const link = document.createElement('a');
              link.href = URL.createObjectURL(blob);
              link.download = `ready_to_dispatch_orders_${new Date().toISOString().split('T')[0]}.csv`;
              link.click();
            };

            window.exportToExcel = function () {
              exportToCSV();
            };

            // Additional event listeners
            document.addEventListener('DOMContentLoaded', function () {
              // Initialize select all functionality
              const selectAll = document.getElementById('selectAll');
              if (selectAll) {
                selectAll.addEventListener('change', function () {
                  toggleAll(this);
                });
              }

              // Individual checkbox change listener
              document.addEventListener('change', function (e) {
                if (e.target.classList.contains('rowCheckbox')) {
                  updateBulkActionsButton();
                  syncSelectAllState();
                  updateSelectedCount();
                }
              });

          

              // Bulk actions button state update on page load
              updateBulkActionsButton();

              // Courier toggle functionality
              window.toggleCourierOptions = function (headerElement) {
                const courierCompact = headerElement.closest('.courier-compact');
                if (!courierCompact) return;

                const optionsContainer = courierCompact.querySelector('.courier-options-compact');
                const expandIcon = headerElement.querySelector('.fa-chevron-down');

                if (!optionsContainer) return;

                const computed = getComputedStyle(optionsContainer);
                const isExpanded = computed.maxHeight !== '0px';

                if (isExpanded) {
                  optionsContainer.style.maxHeight = '0px';
                  if (expandIcon) expandIcon.style.transform = 'rotate(0deg)';
                } else {
                  optionsContainer.style.maxHeight = '200px';
                  if (expandIcon) expandIcon.style.transform = 'rotate(180deg)';
                }
              };

              // Initialize tooltips if needed
              const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
              const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
              });
            });

            // Page change handler
            window.changePage = function (page) {
              const totalPages = Math.ceil(filteredOrders.length / itemsPerPage) || 1;
              if (page < 1 || page > totalPages) return;

              currentPage = page;
              displayOrders();
              renderPagination(filteredOrders.length);

              // Reset select all state
              const selectAll = document.getElementById('selectAll');
              if (selectAll) {
                selectAll.checked = false;
                selectAll.indeterminate = false;
              }

              // Scroll to orders container
              const ordersContainer = document.getElementById('ordersContainer');
              if (ordersContainer) {
                ordersContainer.scrollIntoView({ behavior: 'smooth' });
              }

              // Update bulk actions button
              updateBulkActionsButton();
            };

            // Items per page change handler
            window.changeItemsPerPage = function (value) {
              itemsPerPage = parseInt(value);
              currentPage = 1;

              // Update the select element
              const selectElement = document.getElementById('itemsPerPageSelect');
              if (selectElement) {
                selectElement.value = value;
              }

              displayOrders();
              renderPagination(filteredOrders.length);

              // Update bulk actions button
              updateBulkActionsButton();
            };

            // Clear filter handler
            window.clearFilter = function (type) {
              if (type === 'client') {
                activeFilters.clientId = null;
                const clientSelect = document.getElementById('clientSelect');
                if (clientSelect) clientSelect.value = '';
              } else if (type === 'payment') {
                activeFilters.payment = null;
                const paymentSelect = document.getElementById('paymentModeSelect');
                if (paymentSelect) paymentSelect.value = '';
              } else if (type === 'date') {
                activeFilters.date.min = null;
                activeFilters.date.max = null;
                const minDateInput = document.getElementById('min-date');
                const maxDateInput = document.getElementById('max-date');
                if (minDateInput) minDateInput.value = '';
                if (maxDateInput) maxDateInput.value = '';
              } else if (type === 'destinationZone') {
                activeFilters.destinationZone = null;
                const zoneSelect = document.getElementById('filterDestinationZone');
                if (zoneSelect) zoneSelect.value = '';
              } else if (type === 'taggedApi') {
                activeFilters.taggedApi = null;
                const apiSelect = document.getElementById('filterTaggedApi');
                if (apiSelect) apiSelect.value = '';
              }

              // Remove indicator
              const indicator = document.getElementById(`active-filter-${type}`);
              if (indicator) indicator.remove();

              // Apply filters
              applyFilters();
            };

            // Enhanced pickup request function
            window.requestPickup = function (orderId, clientId, courier) {
              if (!orderId || !clientId || !courier) {
                Swal.fire({
                  icon: 'error',
                  title: 'Missing Information',
                  text: 'Order ID, Client ID, or Courier information is missing.'
                });
                return;
              }

              Swal.fire({
                title: 'Request Pickup',
                text: `Are you sure you want to request pickup for Order ${orderId}?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, Request Pickup'
              }).then((result) => {
                if (result.isConfirmed) {
                  // Show loading
                  Swal.fire({
                    title: 'Processing...',
                    text: 'Requesting pickup from courier',
                    allowOutsideClick: false,
                    didOpen: () => {
                      Swal.showLoading();
                    }
                  });

                  // Make API call to request pickup
                  axios.post('/api/request-pickup', {
                    orderId: orderId,
                    clientId: clientId,
                    courier: courier
                  })
                    .then(response => {
                      if (response.data.success) {
                        Swal.fire({
                          icon: 'success',
                          title: 'Pickup Requested',
                          text: 'Pickup request has been sent successfully.',
                          timer: 2000
                        });
                      } else {
                        throw new Error(response.data.message || 'Failed to request pickup');
                      }
                    })
                    .catch(error => {
                      console.error('Pickup request error:', error);
                      Swal.fire({
                        icon: 'error',
                        title: 'Pickup Request Failed',
                        text: error.response?.data?.message || 'Failed to request pickup. Please try again.'
                      });
                    });
                }
              });
            };

            // Enhanced cancel LR function
            window.cancelLR = function (orderId, courier, lrNo, clientId) {
              if (!courier || !lrNo) {
                Swal.fire({
                  icon: 'error',
                  title: 'Missing Information',
                  text: 'Courier or LR number is missing.'
                });
                return;
              }

              // Check for DTDC LTL services
              if (courier === 'DTDC/LTL-surface' || courier === 'DTDC/ltl') {
                Swal.fire({
                  title: 'Cannot Cancel',
                  text: 'DTDC LTL LR cannot be cancelled',
                  icon: 'error',
                  confirmButtonText: 'OK'
                });
                return;
              }

              Swal.fire({
                title: 'Confirm Cancellation',
                text: `Do you really want to cancel LR ${lrNo}?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, Cancel LR',
                cancelButtonText: 'No, Keep it'
              }).then((result) => {
                if (result.isConfirmed) {
                  // Show loading
                  Swal.fire({
                    title: 'Processing...',
                    text: 'Cancelling LR...',
                    allowOutsideClick: false,
                    didOpen: () => {
                      Swal.showLoading();
                    }
                  });

                  // Determine API endpoint
                  let apiEndpoint = '';
                  if (courier === 'Delhivery/Standard-Surface' ||
                    courier === 'Delhivery/standard-surface' ||
                    courier === 'Delhivery/Standard-Air' ||
                    courier === 'Delhivery/standard-air') {
                    apiEndpoint = '/api/cancel-delhivery-standard';
                  } else if (courier === 'Delhivery/LTL-surface') {
                    apiEndpoint = '/api/cancel-delhivery-ltl';
                  } else if (courier === 'DTDC/Standard-Surface' || courier === 'DTDC/Standard-Air') {
                    apiEndpoint = '/api/cancel-dtdc-standard';
                  } else if (courier === 'expressbees/Standard-Surface' ||
                    courier === 'expressbees/Standard-Air') {
                    apiEndpoint = '/api/cancel-expressbees-standard';
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Unsupported Courier',
                      text: `Cancellation not supported for ${courier}`
                    });
                    return;
                  }

                  // Make API call
                  axios.post(apiEndpoint, {
                    lrNumber: lrNo,
                    po_number: orderId,
                    client_id: clientId
                  })
                    .then(response => {
                      if (response.data.status === true || response.data.success) {
                        Swal.fire({
                          icon: 'success',
                          title: 'LR Cancelled',
                          text: `LR ${lrNo} cancelled successfully for ${courier}.`,
                          timer: 2000
                        }).then(() => {
                          window.location.reload();
                        });
                      } else {
                        throw new Error(response.data.message || 'Failed to cancel LR');
                      }
                    })
                    .catch(error => {
                      console.error('Cancel LR error:', error);
                      Swal.fire({
                        icon: 'error',
                        title: 'Cancellation Failed',
                        text: error.response?.data?.message || 'An error occurred while cancelling the LR. Please try again.'
                      });
                    });
                }
              });
            };

            // Enhanced shipping label generation
            window.generateShippingLabel = function (orderId, labelSize, courier, lrNo, clientId, aggrigatorId) {
              if (!orderId || !labelSize) {
                Swal.fire({
                  icon: 'error',
                  title: 'Missing Information',
                  text: 'Order ID or label size is missing.'
                });
                return;
              }

              // Show loading
              Swal.fire({
                title: 'Generating Label...',
                text: `Please wait while we generate the ${labelSize} shipping label`,
                allowOutsideClick: false,
                didOpen: () => {
                  Swal.showLoading();
                }
              });

              let apiEndpoint = '/api/shipping-label/generate';

              // Use dedicated endpoint for Delhivery LTL
              if (courier === 'Delhivery/LTL-surface') {
                apiEndpoint = '/api/shipping-label/delhivery-ltl';
              }

              // Prepare params
              const params = {
                orderId: orderId,
                labelSize: labelSize,
                orderType: 'ecom',
                lrNo: lrNo,
                clientId: clientId,
                aggrigatorId: aggrigatorId
              };

              if (courier === 'Delhivery/LTL-surface') {
                // Different params for Delhivery LTL
                Object.assign(params, {
                  courier: courier,
                  awbNumber: lrNo,
                  poId: orderId
                });
              }

              // Make API call
              axios.get(apiEndpoint, { params })
                .then(response => {
                  // Create blob and download
                  const blob = new Blob([response.data], { type: 'application/pdf' });
                  const url = window.URL.createObjectURL(blob);
                  const link = document.createElement('a');
                  link.href = url;
                  link.download = `shipping-label-${lrNo}-${labelSize}.pdf`;
                  link.style.display = 'none';
                  document.body.appendChild(link);
                  link.click();

                  setTimeout(() => {
                    document.body.removeChild(link);
                    window.URL.revokeObjectURL(url);
                  }, 100);

                  // Close loading and show success
                  Swal.close();
                  Swal.fire({
                    icon: 'success',
                    title: 'Label Generated Successfully!',
                    text: `Shipping label for LR ${lrNo} has been downloaded.`,
                    timer: 2000,
                    showConfirmButton: false
                  });
                })
                .catch(error => {
                  console.error('Label generation error:', error);
                  Swal.close();

                  let errorTitle = 'Error Generating Label';
                  let errorMessage = 'An error occurred while generating the shipping label.';

                  if (error.response) {
                    const status = error.response.status;
                    if (status === 400) {
                      errorTitle = 'Bad Request';
                      errorMessage = 'Invalid request parameters.';
                    } else if (status === 404) {
                      errorTitle = 'Not Found';
                      errorMessage = 'Shipping label service not found for this user';
                    } else if (status === 500) {
                      errorTitle = 'Server Error';
                      errorMessage = 'Internal server error occurred.';
                    } else {
                      errorTitle = `Error ${status}`;
                      errorMessage = `Server error with status ${status}.`;
                    }
                  } else if (error.request) {
                    errorTitle = 'Network Error';
                    errorMessage = 'Unable to connect to the server. Please check your internet connection.';
                  }

                  Swal.fire({
                    icon: 'error',
                    title: errorTitle,
                    text: errorMessage,
                    confirmButtonText: 'OK'
                  });
                });
            };

            // Bulk shipping label generation
            window.generateBulkLabels = function (selectedRows, labelSize) {
              if (!selectedRows || selectedRows.length === 0) {
                Swal.fire({
                  icon: 'warning',
                  title: 'No Orders Selected',
                  text: 'Please select at least one order.'
                });
                return;
              }

              // Show loading
              Swal.fire({
                title: 'Generating Bulk Labels...',
                text: `Processing ${selectedRows.length} labels into a single PDF. Please wait.`,
                allowOutsideClick: false,
                didOpen: () => {
                  Swal.showLoading();
                }
              });

              // Prepare order IDs
              const orderIds = selectedRows.map(row => row.orderId).filter(id => id);
              if (orderIds.length === 0) {
                Swal.close();
                Swal.fire({
                  icon: 'warning',
                  title: 'No Valid Orders',
                  text: 'No valid order IDs found in selection.'
                });
                return;
              }

              // Make bulk API call
              axios.get('/api/shipping-label/generate', {
                params: {
                  bulkOrderIds: orderIds.join(','),
                  labelSize: labelSize,
                  orderType: 'ecom'
                },
                responseType: 'blob'
              })
                .then(response => {
                  if (response.data && response.data.size > 0) {
                    // Create and download the merged PDF
                    const blob = new Blob([response.data], { type: 'application/pdf' });
                    const url = window.URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.href = url;
                    link.download = `bulk-labels-${labelSize}-${Date.now()}.pdf`;
                    link.style.display = 'none';
                    document.body.appendChild(link);
                    link.click();

                    setTimeout(() => {
                      document.body.removeChild(link);
                      window.URL.revokeObjectURL(url);
                    }, 100);

                    // Close loading and show success
                    Swal.close();
                    Swal.fire({
                      icon: 'success',
                      title: 'Bulk Labels Generated Successfully!',
                      text: `${selectedRows.length} shipping labels have been merged into a single PDF and downloaded.`,
                      confirmButtonText: 'Great!'
                    });
                  } else {
                    throw new Error('No PDF data received from server');
                  }
                })
                .catch(error => {
                  console.error('Bulk label generation error:', error);
                  Swal.close();

                  Swal.fire({
                    icon: 'error',
                    title: 'Bulk Label Generation Failed',
                    text: `Failed to generate bulk labels: ${error.message || 'Unknown error'}`,
                    confirmButtonText: 'OK'
                  });
                });
            };

            // Enhanced tracking modal with better error handling
            window.openTrackingModal = function (lrNo, orderIdSafe, orderIdForDisplay, status) {
              // Check if allOrders is populated
              if (!allOrders || allOrders.length === 0) {
                console.error('allOrders array is not populated yet. Please wait for page to load completely.');
                Swal.fire({
                  icon: 'error',
                  title: 'Loading Data',
                  text: 'Please wait for the page to load completely.'
                });
                return;
              }

              // Find the order
              let order = allOrders.find(o => o.orderIdSafe === orderIdSafe);
              if (!order) {
                order = allOrders.find(o => String(o.orderIdSafe) === String(orderIdSafe));
              }
              if (!order) {
                order = allOrders.find(o => Number(o.orderIdSafe) === Number(orderIdSafe));
              }

              if (!order) {
                console.error('Order not found for ID:', orderIdSafe);
                Swal.fire({
                  icon: 'error',
                  title: 'Order Not Found',
                  text: `Could not find order with ID: ${orderIdSafe}`
                });
                return;
              }

              // Extract order data (same as before)
              const {
                company_name: companyName,
                consignee_first_name: consigneeName,
                consignee_city: consigneeCity,
                warehouse_pincode: warehousePincode,
                consignee_pincode: consigneePincode,
                chargable_weight: weight,
                package_weight: packageWeight,
                chargeable_weight: chargeableWeight,
                volumetric_weight: volumetricWeight,
                total_weight: totalWeight,
                weight_unit: weightUnit,
                tagged_api: taggedApi,
                forwarder_product_type: serviceType,
                total_lr_charges: charges,
                lr_date: lrDate,
                eta,
                created_at: orderDate,
                pickup_zone,
                destination_zone,
                warehouse_address,
                consignee_address1,
                payment_mode,
                grand_total,
                collectable_amount,
              } = order;

              // Continue with existing tracking modal logic...
              // (rest of the function remains the same)
              const lrDateObj = toDate(lrDate);
              const orderDateObj = toDate(orderDate);

              const etaDays = Number.isFinite(parseInt(eta, 10)) ? parseInt(eta, 10) : 3;
              const estimatedDelivery = lrDateObj ? new Date(lrDateObj) : new Date();
              estimatedDelivery.setDate(estimatedDelivery.getDate() + etaDays);

              // Update UI elements
              setText('orderDateDisplay', `Order Date: ${orderDateObj ? formatINDateTime(orderDateObj) : safe(orderDate)}`);
              setText('deliveryDay', dayNames[estimatedDelivery.getDay()]);
              setText('deliveryMonth', monthNames[estimatedDelivery.getMonth()]);
              setText('deliveryDate', String(estimatedDelivery.getDate()));
              setText('lrNumberData', safe(lrNo, 'N/A'));

              // Set logos
              const logoSrc = courierLogo(taggedApi);
              setSrc('courierLogo', logoSrc, '/logos/logo-dark.png');
              setSrc('roundlogo', logoSrc, '/logos/logo-dark.png');

              // Route information
              const routeFrom = safe(pickup_zone, 'Origin');
              const routeTo = safe(destination_zone, 'Destination');
              setText('shipmentRoute', `${routeFrom} → ${routeTo}`);
              setText('orderIdDisplay', `Order ID #${safe(orderIdForDisplay, '-')}`);

              // Current shipment card
              const fromLoc = [safe(companyName, 'Sender'), '→'].join(' ');
              setText('fromLocation', fromLoc);
              setText('toLocation', safe(consigneeName, 'Consignee'));
              updateTrackingStatusText(status);
              setText('lrNumber', `LR #${safe(lrNo, '-')}`);

              // Shipment details grid
              setText('senderName', safe(companyName));
              setText('departureDate', lrDateObj ? formatINDateTime(lrDateObj) : safe(lrDate));
              setText('serviceType', safe(serviceType, 'Express'));

              const packageWeightStr = safe(packageWeight, weight, 'N/A');
              setText('packageWeight', /^\d+(\.\d+)?$/.test(String(packageWeightStr)) ? `${packageWeightStr} kg` : packageWeightStr);

              // Update timeline weights
              const timelineWeightEl = document.getElementById('timelineWeight');
              if (timelineWeightEl) {
                const weightValue = safe(packageWeight, weight, 'N/A');
                timelineWeightEl.textContent = /^\d+(\.\d+)?$/.test(String(weightValue)) ? `${weightValue} kg` : weightValue;
              }

              setText('courierPartner', safe(taggedApi));

              // Tracking summary
              setText('trackingOrderId', `Order ID #${safe(orderIdForDisplay, '-')}`);
              updateTrackingStatusText(status);

              // Tracking grid
              setText('trackingFromCity', safe(companyName));
              setText('trackingFromwarehouse', titleCase(warehouse_address));
              setText('trackingToCity', safe(consigneeName));
              setText('trackingToAddress', safe(consignee_address1));
              setText('trackingConsignee', safe(consigneeName));
              setText('trackingConsigneeCity', safe(consigneeCity));
              setText('trackingCharges', toINR(charges));
              setText('trackingLrNumber', safe(lrNo));
              setText('trackingpincode', safe(consigneePincode));
              setText('paymentType', safe(payment_mode));
              setText('grandTotal', toINR(grand_total));

              // Update timeline
              updateTimelineWithRealData(lrNo, taggedApi, orderDate, lrDate, chargeableWeight, packageWeight, orderIdForDisplay);

              // COD/Collectable visibility
              const collectableEl = document.getElementById('collectableAmount');
              const codTitleEl = document.getElementById('codtitle');
              const isPrepaid = typeof payment_mode === 'string' && payment_mode.toLowerCase().includes('pre');

              if (isPrepaid) {
                if (collectableEl) collectableEl.style.display = 'none';
                if (codTitleEl) codTitleEl.style.display = 'none';
              } else {
                if (collectableEl) {
                  collectableEl.style.display = '';
                  setText('collectableAmount', toINR(collectable_amount));
                }
                if (codTitleEl) codTitleEl.style.display = '';
              }

              // Open offcanvas
              const offcanvasElement = document.getElementById('orderDetailsCanvasSecond');
              if (!offcanvasElement) {
                console.warn('Offcanvas element not found');
                return;
              }

              if (typeof bootstrap === 'undefined' || !bootstrap.Offcanvas) {
                console.warn('Bootstrap Offcanvas not available');
                return;
              }

              const offcanvas = bootstrap.Offcanvas.getOrCreateInstance(offcanvasElement);
              offcanvas.show();
            };

            // Helper functions for date/time formatting
            const formatINDate = (d) => {
              if (!d) return 'N/A';
              return d.toLocaleDateString('en-IN', {
                day: '2-digit',
                month: 'short',
                year: 'numeric',
                timeZone: 'Asia/Kolkata'
              });
            };

            const formatINDateTime = (d) => {
              if (!d) return 'N/A';
              return d.toLocaleString('en-IN', {
                day: '2-digit',
                month: 'short',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                hour12: true,
                timeZone: 'Asia/Kolkata'
              });
            };

            const toINR = (n) => {
              const num = Number(n);
              return isNaN(num) ? '₹0' : '₹' + num.toLocaleString('en-IN');
            };

            const titleCase = (str) => {
              if (!str) return 'N/A';
              return String(str).replace(/\w\S*/g, t => t.charAt(0).toUpperCase() + t.slice(1).toLowerCase());
            };

            // Update tracking status text based on status value
            const updateTrackingStatusText = (status) => {
              let trackingStatusText = '';
              let currentStatusText = '';

              switch (parseInt(status)) {
                case 1:
                case 2:
                  trackingStatusText = 'Ready to Dispatch';
                  currentStatusText = 'Ready to Dispatch';
                  break;
                case 3:
                  trackingStatusText = 'In Transit';
                  currentStatusText = 'In Transit';
                  break;
                case 8:
                  trackingStatusText = 'Out for Delivery';
                  currentStatusText = 'Out for Delivery';
                  break;
                case 4:
                  trackingStatusText = 'Delivered';
                  currentStatusText = 'Delivered';
                  break;
                case 0:
                  trackingStatusText = 'Cancelled';
                  currentStatusText = 'Cancelled';
                  break;
                case 5:
                  trackingStatusText = 'Order in Return';
                  currentStatusText = 'Order in Return';
                  break;
                default:
                  trackingStatusText = 'Unknown Status';
                  currentStatusText = 'Unknown Status';
              }

              setText('trackingStatus', trackingStatusText);
              setText('currentStatus', currentStatusText);
            };

            // Day and month names for date display
            const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
            const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

            // Helper function to get selected rows for bulk operations
            window.getSelectedRows = function () {
              const selectedCheckboxes = document.querySelectorAll('.rowCheckbox:checked');
              return Array.from(selectedCheckboxes).map(cb => {
                const orderCard = cb.closest('.order-card');
                if (!orderCard) return null;

                return {
                  orderId: orderCard.getAttribute('data-order-id'),
                  lrNo: orderCard.querySelector('.lrNo')?.textContent?.trim(),
                  courier: orderCard.getAttribute('data-tagged-api'),
                  clientId: orderCard.getAttribute('data-client'),
                  aggrigatorId: orderCard.getAttribute('data-aggrigator-id')
                };
              }).filter(row => row && row.orderId);
            };

            // Select all orders across all pages
            window.selectAllOrdersAcrossPages = function () {
              // This would typically select all orders from the server-side
              // For now, we'll just select all visible orders and show a message
              const visibleCheckboxes = document.querySelectorAll('.rowCheckbox');
              visibleCheckboxes.forEach(cb => cb.checked = true);
              updateBulkActionsButton();
              syncSelectAllState();

              Swal.fire({
                icon: 'info',
                title: 'Select All Orders',
                text: 'All visible orders have been selected. For selecting orders across all pages, please use the server-side selection feature.',
                confirmButtonText: 'OK'
              });
            };

            // Deselect all orders
            window.deselectAllOrders = function () {
              const allCheckboxes = document.querySelectorAll('.rowCheckbox');
              allCheckboxes.forEach(cb => cb.checked = false);
              updateBulkActionsButton();
              syncSelectAllState();
            };

            // Update bulk actions button with selected count
            function updateSelectedCount() {
              const selectedCount = document.querySelectorAll('.rowCheckbox:checked').length;
              const badge = document.getElementById('selectedCountBadge');
              if (badge) {
                if (selectedCount > 0) {
                  badge.textContent = selectedCount;
                  badge.style.display = 'inline-block';
                } else {
                  badge.style.display = 'none';
                }
              }
            }

            // Update the bulk actions button state and selected count
            document.addEventListener('change', function (e) {
              if (e.target.classList.contains('rowCheckbox')) {
                updateBulkActionsButton();
                syncSelectAllState();
                updateSelectedCount();
              }
            });

          </script>

    </main>

    <%- include('../../partials/footer') %>