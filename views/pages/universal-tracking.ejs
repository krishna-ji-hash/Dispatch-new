<!DOCTYPE html>
<html lang="hi">

<head>

        <style>
            /* Reset and base styles */
            * {
                box-sizing: border-box;
            }

            body {
                font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                line-height: 35px;
                color: #1f2937;
                background: #f9fafb;
            }

            /* Professional container */
            .tracking-container {
               
                margin: 0 auto;
                padding: 0 24px;
            }

            /* Header section */
            .tracking-header {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 48px 0;
                margin-bottom: 40px;
                border-radius: 0 0 24px 24px;
                text-align: center;
            }

            .tracking-header h1 {
                font-size: 2.5rem;
                font-weight: 700;
                margin: 0 0 16px 0;
                letter-spacing: -0.025em;
            }

            .tracking-header p {
                font-size: 1.125rem;
                opacity: 0.9;
                margin: 0;
                font-weight: 400;
            }

            /* Service selection */
            .service-selection {
                background: white;
                border-radius: 20px;
                padding: 40px 32px;
                text-align: center;
                margin-bottom: 48px;
                box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            }

            .service-options {
                display: flex;
                justify-content: center;
                gap: 32px;
                margin: 32px 0;
            }

            .radio-option {
                display: flex;
                align-items: center;
                gap: 12px;
                padding: 5px 12px;
                border: 2px solid #e5e7eb;
                border-radius: 12px;
                cursor: pointer;
                transition: all 0.3s ease;
                background: white;
            }

            .radio-option:hover {
                border-color: #667eea;
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(102, 126, 234, 0.15);
            }

            .radio-option.selected {
                border-color: #667eea;
                background: #f0f4ff;
                box-shadow: 0 4px 12px rgba(102, 126, 234, 0.2);
            }

            .radio-option input[type="radio"] {
                width: 20px;
                height: 20px;
                accent-color: #667eea;
            }

            .radio-option label {
                font-size: 14px;
                font-weight: 600;
                color: #1f2937;
                cursor: pointer;
            }

            .continue-btn {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border: none;
                padding: 16px 32px;
                border-radius: 12px;
                font-size: 1.125rem;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
                margin-top: 24px;
            }

            .continue-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
            }

            .continue-btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
                transform: none;
            }

            /* Tracking interface */
            .tracking-interface {
                background: white;
                border-radius: 24px;
                box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
                overflow: hidden;
                margin-bottom: 40px;
            }

            .interface-header {
                background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
                padding: 5px;
                border-bottom: 1px solid #e2e8f0;
                position: relative;
            }

            .back-button {
                position: absolute;
                top: 24px;
                left: 24px;
                background: white;
                border: 1px solid #d1d5db;
                border-radius: 12px;
                padding: 12px 20px;
                font-weight: 500;
                color: #374151;
                cursor: pointer;
                transition: all 0.2s ease;
                display: flex;
                align-items: center;
                gap: 8px;
            }

            .back-button:hover {
                background: #f9fafb;
                border-color: #9ca3af;
                transform: translateY(-1px);
            }

            .interface-title {
                text-align: center;
                margin: 0;
            }

            .interface-title h2 {
                font-size: 1.875rem;
                font-weight: 700;
                margin: 0 0 8px 0;
                color: #1f2937;
            }

            .interface-title p {
                color: #6b7280;
                margin: 0;
                font-size: 1.125rem;
            }

            /* Main tracking layout */
            .tracking-layout {
                display: grid;
                grid-template-columns: 400px 1fr;
                gap: 0;
                min-height: 600px;
            }

            @media (max-width: 1024px) {
                .tracking-layout {
                    grid-template-columns: 1fr;
                }
            }

            /* Input panel */
            .input-panel {
                background: #f8fafc;
                padding: 32px;
                border-right: 1px solid #e2e8f0;
            }

            .input-panel h3 {
                font-size: 16px;
                font-weight: 600;
                margin: 0 0 24px 0;
                color: #1f2937;
            }

            .form-group {
                margin-bottom: 24px;
            }

            .form-label {
                display: block;
                font-weight: 600;
                margin-bottom: 8px;
                color: #374151;
                font-size: 0.875rem;
                text-transform: uppercase;
                letter-spacing: 0.05em;
            }

            .input-wrapper {
                position: relative;
                margin-bottom: 16px;
            }

            .tracking-input {
                width: 100%;
                padding: 16px 20px;
                border: 2px solid #d1d5db;
                border-radius: 12px;
                font-size: 12px;
                transition: all 0.2s ease;
                background: white;
            }

            .tracking-input:focus {
                outline: none;
                border-color: #667eea;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }

            .track-button {
                width: 100%;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border: none;
                padding: 16px 24px;
                border-radius: 12px;
                font-size: 20px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.2s ease;
            }

            .track-button:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
            }

            .track-button:active {
                transform: translateY(0);
            }

            .help-text {
                font-size: 0.875rem;
                color: #6b7280;
                margin-top: 8px;
                line-height: 1.4;
            }

            /* Results panel */
            .results-panel {
                padding: 32px;
                background: white;
            }

            .results-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 32px;
                padding-bottom: 16px;
                border-bottom: 1px solid #e5e7eb;
            }

            .results-header h3 {
                font-size: 1.25rem;
                font-weight: 600;
                margin: 0;
                color: #1f2937;
            }

            .results-count {
                background: #f3f4f6;
                color: #6b7280;
                padding: 6px 12px;
                border-radius: 20px;
                font-size: 0.875rem;
                font-weight: 500;
            }

            /* Empty state */
            .empty-state {
                text-align: center;
                padding: 80px 20px;
                color: #6b7280;
            }

            .empty-state img {
                width: 80px;
                height: 80px;
                margin-bottom: 24px;
                opacity: 0.5;
            }

            .empty-state h4 {
                font-size: 1.25rem;
                font-weight: 600;
                margin: 0 0 12px 0;
                color: #374151;
            }

            .empty-state p {
                margin: 0;
                font-size: 1rem;
            }

            /* Loading state */
            .loading-state {
                padding: 40px 20px;
            }

            .skeleton {
                background: linear-gradient(90deg, #f3f4f6 25%, #e5e7eb 50%, #f3f4f6 75%);
                background-size: 200% 100%;
                animation: loading 1.5s infinite;
                border-radius: 8px;
                margin-bottom: 16px;
            }

            @keyframes loading {
                0% {
                    background-position: 200% 0;
                }

                100% {
                    background-position: -200% 0;
                }
            }

            .skeleton-header {
                height: 24px;
                width: 60%;
            }

            .skeleton-text {
                height: 16px;
                width: 100%;
            }

            .skeleton-text.short {
                width: 80%;
            }

            .skeleton-card {
                height: 120px;
                width: 100%;
            }

            /* Error state */
            .error-state {
                background: #fef2f2;
                border: 1px solid #fecaca;
                border-radius: 12px;
                padding: 24px;
                margin: 20px 0;
                color: #dc2626;
            }

            .error-state i {
                margin-right: 12px;
            }

            /* Results content */
            .results-content {
                display: none;
            }

            .results-summary {
                display: grid;
                grid-template-columns: 2fr 1fr;
                gap: 24px;
                margin-bottom: 32px;
            }

            @media (max-width: 768px) {
                .results-summary {
                    grid-template-columns: 1fr;
                }
            }

            .summary-card {
                background: #f8fafc;
                border: 1px solid #e2e8f0;
                border-radius: 16px;
                padding: 24px;
            }

            .summary-header {
                display: flex;
                justify-content: space-between;
                align-items: flex-start;
                margin-bottom: 20px;
            }

            .summary-item {
                margin-bottom: 16px;
            }

            .summary-label {
                font-size: 0.75rem;
                font-weight: 600;
                color: #6b7280;
                text-transform: uppercase;
                letter-spacing: 0.05em;
                margin-bottom: 4px;
            }

            .summary-value {
                font-size: 16px;
                font-weight: 600;
                color: #1f2937;
            }

            .summary-value.large {
                font-size: 16px;
            }

            .status-badge {
                display: inline-block;
                padding: 5px 25px;
                border-radius: 20px;
                font-size: 0.875rem;
                font-weight: 600;
                text-transform: uppercase;
                letter-spacing: 0.05em;
            }

            .status-badge.booked {
                background: #dbeafe;
                color: #1e40af;
            }

            .status-badge.picked {
                background: #dbeafe;
                color: #1e40af;
            }

            .status-badge.in-transit {
                background: #dbeafe;
                color: #1e40af;
            }

            .status-badge.ofd {
                background: #fef3c7;
                color: #92400e;
            }

            .status-badge.delivered {
                background: #d1fae5;
                color: #065f46;
            }

            .status-badge.rto {
                background: #f3e8ff;
                color: #581c87;
            }

            .status-badge.cancelled {
                background: #fee2e2;
                color: #991b1b;
            }

            /* Progress bar */
            .progress-section {
                margin-top: 24px;
            }

            .progress-bar {
                width: 100%;
                height: 8px;
                background: #e5e7eb;
                border-radius: 4px;
                overflow: hidden;
                margin-bottom: 12px;
            }

            .progress-fill {
                height: 100%;
                background: linear-gradient(90deg, #667eea, #764ba2);
                border-radius: 4px;
                transition: width 0.6s ease;
            }

            .progress-labels {
                display: flex;
                justify-content: space-between;
                font-size: 0.75rem;
                color: #6b7280;
                font-weight: 500;
            }

            /* Timeline */
            .timeline-section {
                background: #f8fafc;
                border: 1px solid #e2e8f0;
                border-radius: 16px;
                padding: 24px;
            }

            .timeline-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 24px;
            }

            .timeline-header h4 {
                font-size: 1.125rem;
                font-weight: 600;
                margin: 0;
                color: #1f2937;
            }

            .timeline {
                position: relative;
                padding-left: 24px;
                min-height: 200px;
            }

            /* Timeline wrapper for proper line positioning */
            .timeline-wrapper {
                position: relative;
                overflow: hidden;
            }

            /* Custom scrollbar for timeline */
            .timeline::-webkit-scrollbar {
                width: 8px;
            }

            .timeline::-webkit-scrollbar-track {
                background: #f1f5f9;
                border-radius: 4px;
            }

            .timeline::-webkit-scrollbar-thumb {
                background: #cbd5e1;
                border-radius: 4px;
                transition: background 0.3s ease;
            }

            .timeline::-webkit-scrollbar-thumb:hover {
                background: #94a3b8;
            }

            /* Firefox scrollbar */
            .timeline {
                scrollbar-width: thin;
                scrollbar-color: #cbd5e1 #f1f5f9;
            }

            .timeline::before {
                content: '';
                position: absolute;
                left: 37px;
                top: 24px;
                width: 2px;
                background: #d1d5db;
                z-index: 1;
                height: 100%;
            }

            .timeline-item {
                position: relative;
                padding: 20px 0 20px 32px;
                border-bottom: 1px solid #f3f4f6;
                min-height: 60px;
            }

            .timeline-item:last-child {
                border-bottom: none;
            }

            .timeline-item::before {
                content: '';
                position: absolute;
                left: 6px;
                top: 24px;
                width: 12px;
                height: 12px;
                border-radius: 50%;
                background: #667eea;
                border: 3px solid white;
                box-shadow: 0 0 0 2px #d1d5db;
                z-index: 2;
            }

            .timeline-title {
                font-weight: 600;
                color: #1f2937;
                margin-bottom: 8px;
            }

            .timeline-meta {
                font-size: 0.875rem;
                color: #6b7280;
            }

            /* Responsive adjustments */
            @media (max-width: 640px) {
                .tracking-container {
                    padding: 0 16px;
                }

                .tracking-header {
                    padding: 32px 0;
                    margin-bottom: 24px;
                }

                .tracking-header h1 {
                    font-size: 2rem;
                }

                .service-options {
                    flex-direction: column;
                    gap: 16px;
                }

                .tracking-layout {
                    min-height: auto;
                }

                .input-panel,
                .results-panel {
                    padding: 24px 20px;
                }
            }
        </style>
</head>

<body data-theme="light" class="font-nunito">
    <div id="wrapper" class="theme-cyan">


                    <!-- MAIN CONTENT -->
                    <div id="main-content">
                        <div class="container pt-4">
                      

                            <!-- MAIN BODY CONTENT -->
                            <div class="tracking-container">

                                <!-- Tracking Interface -->
                                <div id="trackingInterface">
                                    <div class="tracking-interface">
                                        <div class="interface-header">
                                            <div class="interface-title">
                                                <h2>Universal Tracking</h2>
                                                <p>Select service type and enter tracking number</p>
                                            </div>
                                        </div>

                                        <div class="tracking-layout">
                                            <!-- Input Panel -->
                                            <div class="input-panel">
                                                <h3>Select Service Type</h3>
                                                
                                                <div class="service-options">
                                                    <div class="radio-option" data-service="ecom">
                                                        <input type="radio" id="ecom" name="service" value="ecom">
                                                        <label for="ecom">E-commerce</label>
                                                    </div>
                                                    <div class="radio-option" data-service="express">
                                                        <input type="radio" id="express" name="service" value="express">
                                                        <label for="express">Express</label>
                                                    </div>
                                                </div>

                                                <div class="form-group" style="margin-top: 32px;">
                                                    <label class="form-label">Tracking Number/AWB Number</label>
                                                    <div class="input-wrapper">
                                                        <input type="text" class="tracking-input" id="trackingNumber"
                                                            placeholder="Enter LR Number or Order ID (e.g., LR123456789, 123456789)">
                                                    </div>
                                                    <button class="track-button" id="trackButton">
                                                        <i class="bi bi-search me-2"></i>Track Shipment
                                                    </button>
                                                    <p class="help-text">You can track by LR Number </p>
                                                </div>
                                            </div>

                                            <!-- Results Panel -->
                                            <div class="results-panel">
                                                <div class="results-header">
                                                    <h3>Tracking Results</h3>
                                                    <span class="results-count" id="resultCount"></span>
                                                </div>

                                                <!-- Empty State -->
                                                <div id="emptyState" class="empty-state">
                                                    <img src="https://cdn.jsdelivr.net/gh/twitter/twemoji@14.0.2/assets/svg/1f4e6.svg"
                                                        alt="Package">
                                                    <h4>Ready to Track</h4>
                                                    <p>Enter a tracking number to see live status and updates</p>
                                                </div>

                                                <!-- Loading State -->
                                                <div id="loadingState" class="loading-state" style="display: none;">
                                                    <div class="skeleton skeleton-header"></div>
                                                    <div class="skeleton skeleton-text"></div>
                                                    <div class="skeleton skeleton-text short"></div>
                                                    <div class="skeleton skeleton-card"></div>
                                                </div>

                                                <!-- Error State -->
                                                <div id="errorState" class="error-state" style="display: none;">
                                                    <i class="bi bi-exclamation-triangle"></i>
                                                    <span id="errorText">Something went wrong. Please try again.</span>
                                                </div>

                                                <!-- Results Content -->
                                                <div id="resultBody" class="results-content">
                                                    <div class="results-summary">
                                                        <div class="summary-card">
                                                            <div class="summary-header">
                                                                <div>
                                                                    <div class="summary-item">
                                                                        <div class="summary-label">AWB Number</div>
                                                                        <div class="summary-value large" id="rAwb">—
                                                                        </div>
                                                                    </div>
                                                                    <div class="summary-item">
                                                                        <div class="summary-label">Courier</div>
                                                                        <div class="summary-value" id="rCourier">—</div>
                                                                    </div>
                                                                </div>
                                                                <div>
                                                                    <div class="summary-item">
                                                                        <div class="summary-label">Current Status</div>
                                                                        <span id="rStatus" class="status-badge">—</span>
                                                                    </div>
                                                                </div>
                                                            </div>

                                                            <div class="summary-item">
                                                                <div class="summary-label">Last Update</div>
                                                                <div class="summary-value" id="rUpdated">—</div>
                                                            </div>

                                                            <div class="summary-item">
                                                                <div class="summary-label">Estimated Delivery</div>
                                                                <div class="summary-value" id="rEta">—</div>
                                                            </div>

                                                            <div class="progress-section">
                                                                <div class="summary-label">Delivery Progress</div>
                                                                <div class="progress-bar">
                                                                    <div class="progress-fill" id="rProgress"
                                                                        style="width: 0%"></div>
                                                                </div>
                                                                <div class="progress-labels" id="progressLabels">
                                                                    <!-- Dynamic progress labels will be filled here -->
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="summary-card">
                                                            <div class="summary-item">
                                                                <div class="summary-label">Package Details</div>
                                                                <div id="rPkg" class="summary-value">—</div>
                                                            </div>

                                                            <div class="summary-item">
                                                                <div class="summary-label">Route Information</div>
                                                                <div id="rRoute" class="summary-value">—</div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <!-- Timeline -->
                                                    <div class="timeline-section">
                                                        <div class="timeline-header">
                                                            <h4>Shipment Timeline</h4>
                                                            <span class="results-count" id="rCheckpointCount"></span>
                                                        </div>
                                                        <div class="timeline-wrapper" style="position: relative;">
                                                            <div id="rTimeline" class="timeline" style="max-height: 400px; overflow-y: auto;">
                                                                <!-- Filled by JavaScript -->
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Bootstrap Icons -->
                        <link rel="stylesheet"
                            href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
                        <!-- Font Awesome Icons -->
                        <link rel="stylesheet"
                            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

                        <script>
                                (function () {
                                    // DOM Elements
                                    const trackingInterface = document.getElementById('trackingInterface');
                                    const radioOptions = document.querySelectorAll('.radio-option');
                                    const trackingInput = document.getElementById('trackingNumber');
                                    const trackButton = document.getElementById('trackButton');
                                    const emptyState = document.getElementById('emptyState');
                                    const loadingState = document.getElementById('loadingState');
                                    const errorState = document.getElementById('errorState');
                                    const errorText = document.getElementById('errorText');
                                    const resultBody = document.getElementById('resultBody');
                                    const resultCount = document.getElementById('resultCount');
                                    const rAwb = document.getElementById('rAwb');
                                    const rCourier = document.getElementById('rCourier');
                                    const rStatus = document.getElementById('rStatus');
                                    const rUpdated = document.getElementById('rUpdated');
                                    const rEta = document.getElementById('rEta');
                                    const rProgress = document.getElementById('rProgress');
                                    const rPkg = document.getElementById('rPkg');
                                    const rRoute = document.getElementById('rRoute');
                                    const rTimeline = document.getElementById('rTimeline');
                                    const rCheckpointCount = document.getElementById('rCheckpointCount');
                                    const progressLabels = document.getElementById('progressLabels');

                                    let selectedService = '';

                                    // Service Selection Functions
                                    function updateServiceTitle() {
                                        if (selectedService === 'ecom') {
                                            document.querySelector('.interface-title h2').textContent = 'E-commerce Tracking';
                                        } else if (selectedService === 'express') {
                                            document.querySelector('.interface-title h2').textContent = 'Express Delivery Tracking';
                                        } else {
                                            document.querySelector('.interface-title h2').textContent = 'Universal Tracking';
                                        }
                                    }

                                    // View Management
                                    function showView(view) {
                                        // Hide all views first
                                        emptyState.style.display = 'none';
                                        loadingState.style.display = 'none';
                                        errorState.style.display = 'none';
                                        resultBody.style.display = 'none';

                                        // Show the requested view
                                        switch (view) {
                                            case 'empty':
                                                emptyState.style.display = 'block';
                                                break;
                                            case 'loading':
                                                loadingState.style.display = 'block';
                                                break;
                                            case 'error':
                                                errorState.style.display = 'block';
                                                break;
                                            case 'result':
                                                resultBody.style.display = 'block';
                                                break;
                                            default:
                                                emptyState.style.display = 'block';
                                        }
                                    }

                                    // Utility Functions
                                    function formatDateTime(iso) {
                                        try {
                                            return new Date(iso).toLocaleString('en-IN', {
                                                year: 'numeric',
                                                month: 'short',
                                                day: 'numeric',
                                                hour: '2-digit',
                                                minute: '2-digit'
                                            });
                                        } catch {
                                            return iso || '—';
                                        }
                                    }

                                    function formatDate(dateString) {
                                        if (!dateString) return '—';
                                        try {
                                            const date = new Date(dateString);
                                            if (isNaN(date.getTime())) return '—';
                                            return date.toLocaleDateString('en-IN', {
                                                day: '2-digit',
                                                month: 'short',
                                                year: 'numeric'
                                            });
                                        } catch (error) {
                                            return '—';
                                        }
                                    }

                                    function updateStatusBadge(status) {
                                        // Map status to appropriate CSS class
                                        let statusClass = 'booked';
                                        if (status.includes('Delivered')) statusClass = 'delivered';
                                        else if (status.includes('In Transit')) statusClass = 'in-transit';
                                        else if (status.includes('Out for Delivery')) statusClass = 'ofd';
                                        else if (status.includes('Picked')) statusClass = 'picked';
                                        else if (status.includes('Manifested')) statusClass = 'booked';
                                        else if (status.includes('RTO')) statusClass = 'rto';
                                        
                                        rStatus.className = `status-badge ${statusClass}`;
                                        rStatus.textContent = status;
                                        return status;
                                    }

                                    function getStatusInfo(status) {
                                        const statusLower = (status || '').toLowerCase();
                                        if (statusLower.includes('delivered') || statusLower.includes('completed')) {
                                            return { statusText: 'Delivered', statusClass: 'delivered' };
                                        } else if (statusLower.includes('transit') || statusLower.includes('moving')) {
                                            return { statusText: 'In Transit', statusClass: 'in-transit' };
                                        } else if (statusLower.includes('out for delivery')) {
                                            return { statusText: 'Out for Delivery', statusClass: 'ofd' };
                                        } else if (statusLower.includes('shipped') || statusLower.includes('picked')) {
                                            return { statusText: 'Shipped', statusClass: 'picked' };
                                        } else if (statusLower.includes('pending') || statusLower.includes('manifested')) {
                                            return { statusText: 'Pending', statusClass: 'booked' };
                                        } else {
                                            return { statusText: status || 'Unknown', statusClass: 'booked' };
                                        }
                                    }

                                    function estimateETA(status) {
                                        const now = new Date();
                                        const etaMap = {
                                            'BOOKED': new Date(now.getTime() + 5 * 24 * 60 * 60 * 1000),
                                            'PICKED': new Date(now.getTime() + 4 * 24 * 60 * 60 * 1000),
                                            'IN_TRANSIT': new Date(now.getTime() + 2 * 24 * 60 * 60 * 1000),
                                            'OFD': new Date(now.getTime() + 1 * 24 * 60 * 60 * 1000),
                                            'DELIVERED': 'Delivered',
                                            'RTO': 'Returned to Origin',
                                            'CANCELLED': 'Cancelled'
                                        };
                                        const eta = etaMap[status];
                                        if (typeof eta === 'string') return eta;
                                        return formatDateTime(eta);
                                    }

                                    // Function to create dynamic progress labels based on status
                                    function createProgressLabels(status) {
                                        const labels = [];
                                        const statusMap = {
                                            0: ["Order Received","Ready To Ship","Cancelled"],
                                            1: ["Order Received","Ready To Ship","Scheduled for Pickup"],
                                            2: ["Order Received","Ready To Ship","Scheduled for Pickup", "Picked"],
                                            3: ["Order Received","Ready To Ship","Scheduled for Pickup", "Picked", "In Transit"],
                                            
                                            4: ["Order Received","Ready To Ship","Scheduled for Pickup", "Picked", "In Transit", "Out for Delivery","Delivered"],
                                            5: ["Order Received","Ready To Ship","Scheduled for Pickup", "Picked", "In Transit", "RTO - In Transit",'RTO - Delivered'],
                                            
                                            7: ["Order Received","Ready To Ship","Scheduled for Pickup", "Picked", "In Transit", "Out for Delivery", "RTO","RTO - In Transit"],
                                            8: ["Order Received","Ready To Ship","Scheduled for Pickup", "Picked", "In Transit", "Out for Delivery"],
                                           
                                            
                                           
                                            9: ["Order Received","Ready To Ship","Scheduled for Pickup", "Picked", "In Transit", "Out for Delivery", "NDR"],
                                            10: ["Order Received","Ready To Ship","Scheduled for Pickup", "Picked", "In Transit", "Out for Delivery", "RTO"],
                                        };

                                        const currentLabels = statusMap[status] || ['Booked', 'In Transit', 'Out for Delivery', 'Delivered'];
                                        console.log("currentLabels",currentLabels,status)
                                        
                                        progressLabels.innerHTML = '';
                                        currentLabels.forEach(label => {
                                            const span = document.createElement('span');
                                            span.textContent = label;
                                            progressLabels.appendChild(span);
                                        });

                                        // Calculate progress percentage based on actual status position
                                        let progressPercentage = 100;
                                        
                                        // if (status === 0) progressPercentage = 100;        // cancelled - shows progress through 2/3 stages
                                        // else if (status === 1) progressPercentage = 33;   // Ready To Ship - 1/3 stages
                                        // else if (status === 2) progressPercentage = 50;   // Picked - 2/4 stages
                                        // else if (status === 3) progressPercentage = 60;   // In Transit - 3/5 stages
                                        // else if (status === 4) progressPercentage = 100;  // Delivered - 4/4 stages
                                        // else if (status === 5) progressPercentage = 100;  // RTO Delivered
                                        // else if (status === 7) progressPercentage = 87;   // RTO In Transit - 7/8 stages
                                        // else if (status === 8) progressPercentage = 90;   // Out for Delivery - 8/9 stages
                                        // else if (status === 9) progressPercentage = 85;   // NDR - 6/7 stages
                                        // else if (status === 10) progressPercentage = 100; // RTO
                                        // else progressPercentage = Math.min((status / 5) * 100, 100);
                                        
                                        rProgress.style.width = progressPercentage + '%';
                                    }

                                    // Function to get status text based on status code
                                    function getStatusText(status) {
                                        const statusMap = {
                                            0: 'Cancelled',
                                            1: 'Ready To Ship',
                                            2: 'Picked',
                                            3: 'In Transit',
                                            4: 'Delivered',
                                            5: 'RTO Delivered',
                                            7: 'RTO In Transit',
                                            8: 'Out for Delivery',
                                            9: 'NDR',
                                            10: 'RTO'
                                        };
                                        return statusMap[status] || 'Booked';
                                    }

                                    // Function to get courier logo path
                                    function getCourierLogo(courierName) {
                                        if (!courierName) return '';
                                        
                                        const courierLower = courierName.toLowerCase();
                                        let logoPath = '';
                                        
                                        if (courierLower.includes('delhivery')) {
                                            logoPath = '/assets/images/logos/delhivery.png';
                                        } else if (courierLower.includes('xpress') || courierLower.includes('expressbees')) {
                                            logoPath = '/assets/images/logos/expressbees.png';
                                        } else if (courierLower.includes('dtdc')) {
                                            logoPath = '/assets/images/logos/dtdc.png';
                                        } else if (courierLower.includes('bluedart')) {
                                            logoPath = '/assets/images/BlueDart.png';
                                        } else if (courierLower.includes('fedex')) {
                                            logoPath = '/assets/images/FedEx.png';
                                        }
                                        
                                        return logoPath;
                                    }

                                                                        function renderTimeline(trackingData = []) {
                                        rTimeline.innerHTML = '';
                                        if (trackingData.length === 0) {
                                            const item = document.createElement('div');
                                            item.className = 'timeline-item';
                                            item.innerHTML = `
                                                <div class="timeline-title">No tracking updates available</div>
                                                <div class="timeline-meta">Contact customer service for more information</div>
                                            `;
                                            rTimeline.appendChild(item);
                                            rCheckpointCount.textContent = '0 updates';
                                            return;
                                        }

                                        // Sort tracking data by scan_datetime (newest first)
                                        const sortedData = trackingData.sort((a, b) => 
                                            new Date(b.scan_datetime) - new Date(a.scan_datetime)
                                        );

                                        sortedData.forEach((event, index) => {
                                            const item = document.createElement('div');
                                            item.className = 'timeline-item';
                                            
                                            // Add current indicator for the latest event
                                            const currentIndicator = index === 0 ? '<span style="background: #10b981; color: white; padding: 2px 8px; border-radius: 12px; font-size: 12px; margin-left: 8px;"> <i class="fa-solid fa-location-dot"></i> CURRENT</span>' : '';
                                            
                                            const title = event.scan_description || 'Status Update';
                                            const datetime = event.scan_datetime || '—';
                                            const location = event.location || '—';
                                            const code = event.code || '—';

                                            item.innerHTML = `
                                                <div class="timeline-title">
                                                    ${title} ${currentIndicator}
                                            </div>
                                                <div class="timeline-meta">
                                                    <i class="fas fa-clock" style="margin-right: 5px; color: #6b7280;"></i>
                                                    ${formatDateTime(datetime)}
                                                    ${location && location !== '—' ? `<span style="margin: 0 8px;">·</span><i class="fas fa-map-marker-alt" style="color: #ef4444; margin-right: 5px;"></i><span style="color: #1e40af; font-weight: 600;">${location}</span>` : ''}
                                                    ${code && code !== '—' ? `<span style="margin: 0 8px;">·</span><span style="font-family: monospace; color: #6b7280;">${code}</span>` : ''}
                                                </div>
                                            `;
                                            rTimeline.appendChild(item);
                                        });
                                        rCheckpointCount.textContent = `${trackingData.length} updates`;
                                        
                                        // Extend timeline line to full content height
                                        setTimeout(() => {
                                            extendTimelineLine();
                                        }, 100);
                                    }

                                    // Function to extend timeline line to full content height
                                    function extendTimelineLine() {
                                        const timeline = document.getElementById('rTimeline');
                                        const timelineWrapper = timeline.parentElement;
                                        
                                        if (timeline && timelineWrapper) {
                                            // Get the full scroll height of the timeline content
                                            const fullHeight = timeline.scrollHeight;
                                            
                                            // Create or update the timeline line
                                            let timelineLine = timelineWrapper.querySelector('.timeline-line');
                                            if (!timelineLine) {
                                                timelineLine = document.createElement('div');
                                                timelineLine.className = 'timeline-line';
                                                timelineLine.style.cssText = `
                                                    position: absolute;
                                                   
                                                    width: 2px;
                                                    background: #d1d5db;
                                                    z-index: 1;
                                                    height: ${fullHeight}px;
                                                `;
                                                timelineWrapper.appendChild(timelineLine);
                                            } else {
                                                timelineLine.style.height = `${fullHeight}px`;
                                            }
                                        }
                                    }

                                    // API Function - Call appropriate endpoint based on service
                                    async function fetchTracking(awb) {
                                        try {
                                            console.log('Calling tracking API for:', awb, 'Service:', selectedService);
                                            
                                            // Call different API endpoints based on service type
                                            let apiUrl;
                                            if (selectedService === 'ecom') {
                                                apiUrl = `/api/ecom/shipments/tracking/${encodeURIComponent(awb)}`;
                                            } else if (selectedService === 'express') {
                                                apiUrl = `/api/express/shipments/tracking/${encodeURIComponent(awb)}`;
                                            } else {
                                                throw new Error('Invalid service type');
                                            }

                                            const response = await axios.get(apiUrl);
                                            console.log('Response status:', response.status);
                                            console.log('API Result:', response.data);

                                            const result = response.data;

                                            if (!result.success) {
                                                throw new Error(result.message || 'Failed to fetch tracking data');
                                            }

                                            return result;
                                        } catch (error) {
                                            console.error('API Error:', error);
                                            
                                            // Handle axios error responses
                                            if (error.response) {
                                                // Server responded with error status
                                                const errorData = error.response.data;
                                                if (errorData && errorData.message) {
                                                    throw new Error(errorData.message);
                                                } else {
                                                    throw new Error(`Server error: ${error.response.status}`);
                                                }
                                            } else if (error.request) {
                                                // Request was made but no response received
                                                throw new Error('No response from server. Please check your connection.');
                                            } else {
                                                // Something else happened
                                                throw new Error(error.message || 'Failed to connect to tracking service. Please try again.');
                                            }
                                        }
                                    }

                                    // Main Tracking Function (with blue content and red dynamic data)
                                    async function track() {
                                        if (!selectedService) {
                                            alert('Please select a service type first (E-commerce or Express)');
                                            return;
                                        }
                                        
                                        const raw = trackingInput.value.trim();
                                        if (!raw) {
                                            alert('Please enter a tracking number');
                                            return;
                                        }

                                        const trackingId = raw.split(',')[0].trim();
                                        console.log('Tracking ID:', trackingId, 'Service:', selectedService);

                                        showView('loading');
                                        errorText.textContent = '';

                                        try {
                                            const response = await fetchTracking(trackingId);
                                            console.log('API Response:', response);

                                            // Extract data from the new API response structure
                                            const trackingData = response.data?.trackingData || [];
                                            const courier = response.data?.courier || '—';
                                            const status = response.data?.status ?? 1;
                                            console.log("response status from teh api",response.data.status)
                                            console.log("status in variable",status)
                                            const orderID = response.data?.orderID || '—';

                                            // Update UI with API data
                                            const isLrNumber = trackingId.toUpperCase().startsWith('LR');
                                            if (isLrNumber) {
                                                rAwb.innerHTML = `<span style="color: #377df4;">AWB Number: </span><span style="color: #626262;">${trackingId}</span>`;
                                            } else {
                                                rAwb.innerHTML = `<span style="color: #377df4;">Tracking ID/AWB Number: </span><span style="color: #626262;">${trackingId}</span>`;
                                            }

                                            rCourier.innerHTML = `<span style="color: #377df4;">Courier: </span><span style="color: #626262;">${courier}</span>`;

                                            // Get status text and update badge
                                            const statusText = getStatusText(status);
                                            updateStatusBadge(statusText);

                                            // Set last update time from tracking data
                                            if (trackingData.length > 0) {
                                                const latestEvent = trackingData[0];
                                                rUpdated.innerHTML = `<span style="color: #377df4;">Last Update: </span><span style="color: #626262;">${formatDateTime(latestEvent.scan_datetime)}</span>`;
                                            } else {
                                                rUpdated.innerHTML = `<span style="color: #377df4;">Last Update: </span><span style="color: #626262;">—</span>`;
                                            }

                                            // ETA estimation based on status
                                            const etaText = estimateETA(statusText);
                                            rEta.innerHTML = `<span style="color: #377df4;">Estimated Delivery: </span><span style="color: #626262;">${etaText}</span>`;

                                            // Package details
                                            rPkg.innerHTML = `
                                                <div>
                                                    <span style="color: #377df4;">Order ID: </span>
                                                    <span style="color: #626262;">${orderID}</span>
                                                </div>
                                                <div>
                                                    <span style="color: #377df4;">Service: </span>
                                                    <span style="color: #626262;">${selectedService === 'ecom' ? 'E-commerce' : 'Express'}</span>
                                                </div>
                                                <div style="display: flex; align-items: center; gap: 8px;">
                                                    <span style="color: #377df4;">Courier:</span>
                                                    <img id="courierLogo" src="" alt="Courier Logo" style="height: 20px; width: auto; object-fit: contain;">
                                                </div>
                                            `;
                                            
                                            // Set courier logo
                                            const courierLogo = document.getElementById('courierLogo');
                                            if (courierLogo) {
                                                const logoPath = getCourierLogo(courier);
                                                if (logoPath) {
                                                    courierLogo.src = logoPath;
                                                    courierLogo.style.display = 'block';
                                                } else {
                                                    courierLogo.style.display = 'none';
                                                }
                                            }

                                            // Route information with current location from tracking data
                                            let currentLocation = '—';
                                            if (trackingData.length > 0) {
                                                currentLocation = trackingData[0].location || '—';
                                            }

                                            rRoute.innerHTML = `
                                                <div>
                                                    <span style="color: #377df4;"><i class="fa-solid fa-location-dot"></i> Current Location:</span>
                                                    <span style="color: #626262; font-weight: 600;">${currentLocation}</span>
                                                </div>
                                            `;

                                            // Create dynamic progress labels and render timeline
                                            createProgressLabels(status);
                                            renderTimeline(trackingData);
                                            resultCount.innerHTML = `<span style="color: #377df4;">Results: </span><span style="color: #626262;">1 result</span>`;
                                            showView('result');
                                        } catch (error) {
                                            console.error('Tracking error:', error);
                                            
                                            // Display just the error message from backend
                                            const errorMessage = error.message || 'Something went wrong. Please try again.';
                                            errorText.innerHTML = `<span style="color: #377df4;">Error: </span><span style="color: #626262;">${errorMessage}</span>`;
                                            
                                            showView('error');
                                        }
                                    }

                                    // Event Listeners
                                    radioOptions.forEach(option => {
                                        option.addEventListener('click', () => {
                                            radioOptions.forEach(opt => opt.classList.remove('selected'));
                                            option.classList.add('selected');
                                            selectedService = option.dataset.service;
                                            updateServiceTitle();
                                            showView('empty');
                                        });
                                    });

                                    if (trackButton) {
                                        trackButton.addEventListener('click', (e) => {
                                            e.preventDefault();
                                            track();
                                        });
                                    }

                                    trackingInput.addEventListener('keypress', (e) => {
                                        if (e.key === 'Enter') {
                                            e.preventDefault();
                                            track();
                                        }
                                    });

                                    // Initialize
                                    showView('empty');
                                    
                                    // Add scroll event listener to timeline for dynamic line height
                                    document.addEventListener('DOMContentLoaded', function() {
                                        const timeline = document.getElementById('rTimeline');
                                        if (timeline) {
                                            timeline.addEventListener('scroll', function() {
                                                // Update line height when scrolling
                                                setTimeout(() => {
                                                    extendTimelineLine();
                                                }, 50);
                                            });
                                        }
                                    });
                                })();
                        </script>

                        <!-- External JS -->
                        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
                        <script src="https://cdn.jsdelivr.net/npm/axios@1.6.0/dist/axios.min.js"></script>
                        <!-- FOOTER -->
             
                    </div>
    </div>
    </div>
   
</body>


</html>