<!DOCTYPE html>
<html lang="en">

<head>
  <%- include('../partials/head') %>
  <style>
    .chat-preview {
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 15px;
      background: #f9f9f9;
      max-height: 500px;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
      scroll-behavior: smooth;
    }
    .chat-bubble {
      padding: 10px 15px;
      border-radius: 18px;
      margin-bottom: 12px;
      max-width: 75%;
      line-height: 1.5;
      position: relative;
      word-wrap: break-word;
      opacity: 0;
      transform: translateY(10px);
      transition: opacity 0.3s ease, transform 0.3s ease;
    }
    .chat-bubble.visible { opacity: 1; transform: translateY(0); }
    .chat-bubble.start { background: #e6f7ff; margin-right: auto; }
    .chat-bubble.true { background: #d9f7be; margin-left: auto; }
    .chat-bubble.false { background: #fff1f0; margin-left: auto; }
    .chat-bubble.confirm { background: #f0f5ff; margin-right: auto; }
    .play-button { margin: 10px 0; }
  </style>
</head>

<body data-theme="light" class="font-nunito">
  <div id="wrapper" class="theme-cyan">

    <%- include('../partials/header') %>
    <%- include('../partials/left-sidebar') %>
    <%- include('../partials/right-iconbar') %>

    <div id="main-content">
      <div class="container-fluid">
        <div class="block-header">
          <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
              <h2>Automation Flow – Simulator</h2>
              <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="/"><i class="fa fa-dashboard"></i></a></li>
                <li class="breadcrumb-item active">Automation Flow</li>
              </ul>
            </div>
          </div>
        </div>

        <!-- Flow Preview -->
        <div class="row">
          <div class="col-lg-8 offset-lg-2">
            <div class="card">
              <div class="header">
                <h2>Customer Not Available</h2>
                <button id="playConversation" class="btn btn-primary btn-sm play-button">
                  ▶ Start Chat
                </button>
              </div>
              <div class="body">
                <div class="chat-preview" id="chatPreview"></div>
              </div>
            </div>
          </div>
        </div>

      </div>

      <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  let flowData = null;
  let ndrOrders = []; // orders with "Customer Not Available"

  // 🔹 Replace placeholders dynamically
  function replacePlaceholders(text, order = null) {
    if (!text) return "";
    let replaced = text;

    if (!order) return replaced;

    // Customer Name
    if (order.order && order.order.consignee) {
      const first = order.order.consignee.first_name || "";
      const last = order.order.consignee.last_name || "";
      replaced = replaced.replace(/{{customerName}}/g, `${first} ${last}`.trim());
    } else {
      replaced = replaced.replace(/{{customerName}}/g, "Customer");
    }

    // Brand
    if (order.order?.client?.company_name) {
      replaced = replaced.replace(/{{brandName}}/g, order.order.client.company_name);
    } else {
      replaced = replaced.replace(/{{brandName}}/g, "Brand");
    }

    // Order details
    if (order.order) {
      replaced = replaced
        .replace(/{{orderId}}/g, order.order.id || "0000")
        .replace(/{{orderNo}}/g, order.order.id || "ORD-0000")
        .replace(/{{orderValue}}/g, order.order.grand_total || "0.00");
    }

    // AWB & Courier
    let awb = "AWB123";
    let courier = "Courier";
    if (order.order?.exp_lrs?.length > 0) {
      awb = order.order.exp_lrs[0].lr_no || awb;
      courier = order.order.exp_lrs[0].tagged_api || courier;
    }
    replaced = replaced
      .replace(/{{awbNo}}/g, awb)
      .replace(/{{courierName}}/g, courier);

    return replaced;
  }

  // 🔹 Append a chat bubble
  function appendBubble(type, text, order = null) {
    const chat = document.getElementById("chatPreview");
    const bubble = document.createElement("div");
    bubble.className = "chat-bubble " + type;
    bubble.innerText = replacePlaceholders(text.trim(), order);
    chat.appendChild(bubble);
    setTimeout(() => bubble.classList.add("visible"), 50);
    chat.scrollTop = chat.scrollHeight;
  }

  // 🔹 Append True/False buttons
  function appendOptions(order = null) {
    const chat = document.getElementById("chatPreview");
    const optionsDiv = document.createElement("div");
    optionsDiv.className = "mt-2";

    const btnTrue = document.createElement("button");
    btnTrue.className = "btn btn-sm btn-success me-2";
    btnTrue.innerText = "✅ True";
    btnTrue.onclick = () => handleChoice("true", order);

    const btnFalse = document.createElement("button");
    btnFalse.className = "btn btn-sm btn-danger";
    btnFalse.innerText = "❌ False";
    btnFalse.onclick = () => handleChoice("false", order);

    optionsDiv.appendChild(btnTrue);
    optionsDiv.appendChild(btnFalse);
    chat.appendChild(optionsDiv);
    chat.scrollTop = chat.scrollHeight;
  }

  // 🔹 Append 24/48/72 hr reattempt buttons
  function appendTimeOptions(order = null) {
    const chat = document.getElementById("chatPreview");
    const optionsDiv = document.createElement("div");
    optionsDiv.className = "mt-2";

    ["24 Hrs", "48 Hrs", "72 Hrs"].forEach(time => {
      const btn = document.createElement("button");
      btn.className = "btn btn-sm btn-info me-2";
      btn.innerText = time;
      btn.onclick = () => {
        const msg = `Dear {{customerName}}, thanks for confirming. 
Your Order no. {{orderNo}} will be delivered within ${time}. 
Thanks, Team {{brandName}}`;
        appendBubble("confirm", msg, order);
      };
      optionsDiv.appendChild(btn);
    });

    chat.appendChild(optionsDiv);
    chat.scrollTop = chat.scrollHeight;
  }

  // 🔹 Handle user choice
  function handleChoice(choice, order = null) {
    if (choice === "true" && flowData?.true_msg) {
      appendBubble("true", flowData.true_msg, order);
      setTimeout(() => appendTimeOptions(order), 1000);
    } else if (choice === "false" && flowData?.false_msg) {
      appendBubble("false", flowData.false_msg, order);
      if (flowData.confirm_msg) {
        setTimeout(() => appendBubble("confirm", flowData.confirm_msg, order), 1000);
      }
    }
  }

  // 🔹 Start conversation flow
  function startSimulation() {
    const chat = document.getElementById("chatPreview");
    chat.innerHTML = "";

    if (ndrOrders.length === 0) {
      appendBubble("start", "No orders found with reason: Customer Not Available");
      return;
    }

    let idx = 0;
    function nextOrder() {
      if (idx >= ndrOrders.length) return;
      const order = ndrOrders[idx++];
      const msg = `Dear {{customerName}}.
Your order no. {{orderId}} from {{brandName}} with {{courierName}} AWB#{{awbNo}} 
is undelivered since you weren't available.
If it is not true please click "False".
Else click "True".`;
      appendBubble("start", msg, order);
      setTimeout(() => appendOptions(order), 1000);
    }
    nextOrder();
  }

  // 🔹 Load Flow Data
  async function loadFlow() {
    const { data } = await axios.get("/api/automation/customer-not-available");
    if (data.success || data.ok) flowData = data.data;
  }

  // 🔹 Load NDR orders
  async function loadNdrOrders() {
    try {
      const { data } = await axios.get("http://localhost:5000/ndr-history/exp");
      if (data.ok) {
        ndrOrders = data.data.filter(
          i => i.reason && i.reason.toLowerCase().includes("customer not available")
        );
      }
    } catch (err) {
      console.error("NDR load error:", err);
    }
  }

  $(document).ready(async () => {
    await loadFlow();
    await loadNdrOrders();
    $("#playConversation").on("click", startSimulation);
  });
</script>

      <%- include('../partials/footer') %>
    </div>
  </div>
  <script src="/assets/bundles/mainscripts.bundle.js"></script>
</body>
</html>
