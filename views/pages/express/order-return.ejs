<!DOCTYPE html>
<html lang="hi">


<head>
  <%- include('../../partials/head') %>

   
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover">

    
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" referrerpolicy="no-referrer" />
    <style>
      :root {
        --clr-danger-100: #ffe5e7;
        --clr-secondary-100: #f1f3f5;
        --clr-bg: #f8f9fc;
        --clr-card: #ffffff;
        --clr-muted: #666;
        --clr-border: #e2e8f0;
        --clr-border-subtle: #eaeaea;
        --clr-primary: #0d6efd;
        --clr-primary-100: #e9f2ff;
        --clr-accent: #5a99f7;
        --clr-success: #28a745;
        --clr-success-100: #e8f5e8;
        --clr-warning-100: #fff3e0;
        --clr-info-100: #e3f2fd;
        --radius-lg: 12px;
        --radius-xl: 16px;
        --shadow-sm: 0 2px 6px rgba(0, 0, 0, 0.04);
        --shadow-md: 0 4px 16px rgba(13, 110, 253, 0.08);
        --shadow-lg: 0 8px 25px rgba(0, 0, 0, 0.10);
      }

      /* Responsive overrides */
      @media (max-width: 991.98px){
        .order-card{ padding:16px; }
        .order-card .row > [class^="col-"], .order-card .row > [class*=" col-"]{ flex:0 0 100%; max-width:100%; }
        .timeline-section{ min-height:auto; }
        .timeline-line{ left:16px; height:calc(100% - 20px); }
        .delivery-date{ font-size: clamp(28px, 8vw, 48px); }
        .filter .d-flex{ flex-wrap: wrap; }
        #orderDetailsCanvasSecond .col-sm-4, #orderDetailsCanvasSecond .col-sm-5, #orderDetailsCanvasSecond .col-sm-3{ flex:0 0 100%; max-width:100%; }
        .left-panel{ min-height:auto; }
      }
      @media (max-width: 1199.98px){
        .col-sm-3 > section[style*="min-width"]{ min-width:0 !important; width:100% !important; }
      }
      @media (max-width:1200px){ .map-container{ min-height:260px; } }
      @media (max-width: 1440px){ .delivery-date{ font-size:2.4rem; } }
      @media (max-width:575.98px){ .courier-compact img{ width:64px; height:24px; } }
      @media (max-width:768px){
        .order-card .row>div{ margin-bottom:1rem; }
        .filter-bar .col{ margin-bottom:.5rem; }
        .filter-bar .input-group{ flex-direction:column; }
        .tab-btns{ flex-wrap:wrap; gap:.5rem; }
        .delivery-date{ font-size:2rem; }
        .col-sm-4, .col-sm-5, .col-sm-3{ margin-bottom:2rem; }
      }
      @media (max-width: 768px) {
        .order-card .row>div { margin-bottom: 1rem; }
        .filter-bar .col { margin-bottom: .5rem; }
        .filter-bar .input-group { flex-direction: column; }
        .tab-btns { flex-wrap: wrap; gap: .5rem; }
        .delivery-date { font-size: 2rem; }
        .col-sm-4, .col-sm-5, .col-sm-3 { margin-bottom: 2rem; }
      }
      @media (max-width: 767.98px) {
        .dropdown-menu[aria-labelledby="bulkActionsDropdown"] {
          min-width: 100% !important;
          width: 100% !important;
        }
      }
      @media (max-width: 575.98px) {
        #bulkActionsDropdown {
          font-size: 13px !important;
          padding-left: 0.75rem !important;
          padding-right: 0.75rem !important;
        }
        .dropdown-menu[aria-labelledby="bulkActionsDropdown"] button.dropdown-item {
          font-size: 13px !important;
          padding: 0.5rem 1rem !important;
        }
        .filter {
          flex-direction: column !important;
          align-items: stretch !important;
        }
        .filter > form {
          order: 1;
          width: 100% !important;
          margin-bottom: 0.5rem !important;
        }
        .filter .filter-btn-group {
          order: 99;
          width: 100% !important;
          display: flex;
          justify-content: flex-end;
          margin-top: 0.5rem;
        }
        .filter .filter-btn-group .btn {
          width: auto !important;
        }
      }
      @media (min-width: 576px) {
        .filter .filter-btn-group {
          margin-left: auto;
        }
      }

      /* Courier grouped cards */
      .courier-group { border: 1px solid var(--clr-border); border-radius: 12px; background: #fff; margin-bottom: 1rem; overflow: hidden; transition: box-shadow .3s ease, transform .3s ease; box-shadow: var(--shadow-sm);}
      .courier-group:hover { box-shadow: var(--shadow-md);}
      .courier-header { background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); padding: 12px 16px; border-bottom: 1px solid var(--clr-border); cursor: pointer; transition: background .2s ease, border-color .2s ease; display: flex; align-items: center; gap: 12px;}
      .courier-header:hover { background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);}
      .courier-header.expanded { background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%); border-bottom-color: #2196f3;}
      .courier-logo { width: 40px; height: 40px; object-fit: contain; border-radius: 8px; background: #fff; padding: 4px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);}
      .courier-options { max-height: 0; overflow: hidden; transition: max-height .3s ease;}
      .courier-options.expanded { max-height: 500px;}
      .courier-option { padding: 12px 16px; border-bottom: 1px solid #f1f3f4; transition: background .2s ease; display: flex; align-items: center; justify-content: space-between; gap: 12px;}
      .courier-option:hover { background: #f8f9fa;}
      .courier-option:last-child { border-bottom: none;}
      .courier-option.best-rate { background: linear-gradient(135deg, var(--clr-success-100) 0%, #d4edda 100%); border-left: 4px solid var(--clr-success);}
      .rate-badge { background: var(--clr-success); color: #fff; padding: 2px 8px; border-radius: 12px; font-size: 11px; font-weight: 600;}
      .expand-icon { transition: transform .3s ease;}
      .expand-icon.expanded { transform: rotate(180deg);}
      .shipping-option.active { border: 2px solid #198754 !important; box-shadow: 0 2px 8px rgba(25, 135, 84, 0.10);}

      /* Order cards + timeline */
      .order-card { background: #e9eff1; border-radius: 16px; padding: 24px; margin-bottom: 1.5rem; box-shadow: var(--shadow-md); transition: box-shadow .3s ease, transform .3s ease;}
      .order-card:hover { box-shadow: 0 6px 24px rgba(13, 110, 253, 0.12);}
      .order-id { font-weight: 600; color: var(--clr-primary); font-size: 14px; cursor: pointer;}
      .order-id:hover { text-decoration: underline;}
      .text-small { font-size: 13px;}
      .timeline-section { min-height: 140px; position: relative;}
      .timeline-icon { width: 44px; height: 44px; font-size: 16px; margin-left: -25px; color: #0052ff !important; display: flex; align-items: center; justify-content: center; border-radius: 50%;}

      /* Transit timeline styles */
      .transit-timeline { position: relative; padding-left: 30px;}
      .timeline-line { height: 48%; top: 30px; left: 22px; transform: translateX(-50%); opacity: 1; border: 1px dashed var(--clr-primary); position: absolute;}
      .transit-event { position: relative; margin-bottom: 20px; display: flex; align-items: flex-start;}
      .transit-event:last-child { margin-bottom: 0;}
      .transit-circle { position: absolute; left: -22px; top: 5px; width: 12px; height: 12px; background: #0d6efd; border: 3px solid #fff; border-radius: 50%; box-shadow: 0 0 0 2px #0d6efd; z-index: 2;}
      .transit-event.last-event .transit-circle { background: #28a745; box-shadow: 0 0 0 2px #28a745;}
      .transit-content { flex: 1; background: #f8f9fa; border-radius: 8px; padding: 12px 16px; border-left: 3px solid #0d6efd; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);}
      .transit-event.last-event .transit-content { border-left-color: #28a745; background: #e8f5e8;}
      .transit-date { font-weight: 600; color: #495057; font-size: 13px; margin-bottom: 4px;}
      .transit-description { color: #6c757d; font-size: 12px; line-height: 1.4;}
      .badge { font-size: 13px; padding: 5px 10px; border-radius: 8px;}

      /* Filter bar */
      .filter.row, .filter{ row-gap:.5rem; }
      .filter-bar .form-label { font-size: 13px; margin-bottom: .25rem; font-weight: 500;}
      .filter-bar .form-select, .filter-bar .form-control { background: #f9f9f9; border-radius: 10px; border: 1px solid #ddd; font-size: 14px;}
      .filter-bar .input-group-text { background: #f1f3f5; border: none; background-color: #f0f0f0; border-right: 0;}
      .filter-bar .dropdown-toggle::after { margin-left: .5rem;}
      .filter-bar i { font-size: 14px;}
      .filter-bar .form-select, .filter-bar .form-control { border-radius: 0 .375rem .375rem 0;}

      /* General cards/sections */
      .card { border-radius: 12px; box-shadow: var(--shadow-sm);}
      .section-title { font-size: 1rem; font-weight: 600; color: #343a40;}
      .form-label { font-weight: 500; font-size: .875rem;}
      .order-section { border: 1px solid var(--clr-border); border-radius: 12px; padding: 1.25rem; margin-bottom: 1.25rem; background: #fff;}
      .order-section h6 { font-weight: 600; font-size: .95rem; margin-bottom: 1rem;}
      .tab-btns button { border: none; background: none; padding: .3rem .6rem; font-size: .85rem; font-weight: 500; color: var(--clr-primary); margin-right: .3rem;}
      .tab-btns button.active { background-color: var(--clr-primary-100); border-radius: 6px;}
      .tab-btns .fa-box { margin-right: 4px;}

      /* App / tracking layout */
      .app-wrapper { max-width: 1200px; margin: 24px auto; background: #fff; border-radius: 24px; display: flex; overflow: hidden; box-shadow: 0 0 0 12px #d9dbdb; min-height: 720px;}
      .tracking-container { width: 100%; padding: 20px; background: #fff; border-radius: 12px; min-height: 100vh; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;}
      .tracking-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; padding-bottom: 15px; border-bottom: 1px solid var(--clr-border-subtle);}
      .tracking-title { font-size: 24px; font-weight: 600; color: #333;}
      .tracking-status { display: flex; align-items: center; margin-bottom: 30px;}
      .status-icon { width: 48px; height: 48px; border-radius: 50%; background: #e6f7ff; display: flex; align-items: center; justify-content: center; margin-right: 15px;}
      .status-icon i { color: var(--clr-accent); font-size: 24px;}
      .status-info { flex: 1;}
      .status-label { font-size: 14px; color: var(--clr-muted); margin-bottom: 5px;}
      .status-value { font-size: 18px; font-weight: 600; color: #333;}

      /* Modern timeline styles */
      .timeline { position: relative; padding-left: 0;}
      .timeline::before { content: ''; position: absolute; left: 20px; top: 0; bottom: 0; width: 2px; background: linear-gradient(180deg, #e3f2fd 0%, #bbdefb 50%, #90caf9 100%); border-radius: 1px;}
      .timeline-item { position: relative; margin-bottom: 24px; padding-left: 50px; transition: all 0.3s ease;}
      .timeline-item:last-child { margin-bottom: 0;}
      .timeline-item:hover { transform: translateX(4px);}
      .timeline-dot { position: absolute; left: 11px; top: 8px; width: 20px; height: 20px; border-radius: 50%; background: #fff; border: 3px solid #90caf9; z-index: 2; transition: all 0.3s ease;}
      .timeline-dot.active { background: #2196f3; border-color: #1976d2; box-shadow: 0 0 0 4px rgba(33, 150, 243, 0.2);}
      .timeline-dot.completed { background: #4caf50; border-color: #388e3c; box-shadow: 0 0 0 4px rgba(76, 175, 80, 0.2);}
      .timeline-dot.pending { background: #fff; border-color: #e0e0e0;}
      .timeline-dot.blink { animation: pulse 2s infinite;}
      @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(33, 150, 243, 0.7); } 70% { box-shadow: 0 0 0 10px rgba(33, 150, 243, 0); } 100% { box-shadow: 0 0 0 0 rgba(33, 150, 243, 0); } }
      .timeline-content { background: #fff; border-radius: 12px; padding: 16px; border: 1px solid #e3f2fd; box-shadow: 0 2px 8px rgba(33, 150, 243, 0.08); transition: all 0.3s ease; flex-grow: 1;}
      .timeline-content:hover { box-shadow: 0 4px 16px rgba(33, 150, 243, 0.15); border-color: #bbdefb;}
      .timeline-header { display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 12px;}
      .timeline-title { font-weight: 600; color: #1976d2; font-size: 14px; margin: 0;}
      .timeline-date { color: #666; font-size: 12px; font-weight: 500;}
      .timeline-status { display: inline-block; padding: 4px 12px; border-radius: 20px; font-size: 11px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 8px;}
      .timeline-description { color: #666; font-size: 12px; line-height: 1.4; margin-bottom: 8px;}
      .timeline-meta { display: flex; gap: 16px; font-size: 11px; color: #999;}
      .timeline-meta span { display: flex; align-items: center; gap: 4px;}
      .more-info-btn { background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%); border: none; color: #1976d2; padding: 6px 12px; border-radius: 6px; font-size: 11px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; margin-top: 8px;}
      .more-info-btn:hover { background: linear-gradient(135deg, #bbdefb 0%, #90caf9 100%); transform: translateY(-1px); box-shadow: 0 2px 8px rgba(33, 150, 243, 0.3);}
      .timeline-item-with-line { border-left: 2px solid #dee2e6; margin-left: 16px; padding-left: 20px;}
      .timeline-item-with-line::before { content: ''; position: absolute; left: -2px; top: 40px; width: 2px; height: calc(100% + 1rem); background-color: #dee2e6;}
      .timeline-circle { width: 32px; height: 32px; border-radius: 50%; display: flex; align-items: center; justify-content: center; flex-shrink: 0;}
      .timeline-content h6 { margin-bottom: 0.5rem; font-weight: 600; color: #212529;}
      .timeline-content p { margin-bottom: 0.5rem; color: #6c757d;}
      .timeline-content .bg-light { background-color: #f8f9fa !important; border: 1px solid #e9ecef;}

      /* Status-specific colors */
      .status-order-received { background: #e8f5e8; color: #2e7d32; }
      .status-ready-to-ship { background: #fff3e0; color: #f57c00; }
      .status-scheduled-pickup { background: #e3f2fd; color: #1976d2; }
      .status-in-transit { background: #f3e5f5; color: #7b1fa2; }
      .status-out-delivery { background: #fff8e1; color: #f9a825; }
      .status-delivered { background: #e8f5e8; color: #2e7d32; }
      .status-rto { background: #ffebee; color: #c62828; }
      .status-exception { background: #fff3e0; color: #ef6c00; }

      /* Package/order summary */
      .package { background: #fff; border-radius: 12px; padding: 15px; margin-bottom: 15px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);}
      .package .order-id { font-weight: 600; margin: 5px 0;}
      .package .status { color: var(--clr-accent); font-weight: 600; margin-bottom: 10px;}
      .package .status.ready { color: #faad14;}
      .package .status.transit { color: var(--clr-accent);}
      .package .status.delivered { color: #52c41a;}
      .package .details { display: flex; justify-content: space-between; margin-top: 15px; font-size: 14px;}
      .package .details div { flex: 1;}
      .package .progress-bar { height: 4px; background: var(--clr-accent); margin: 10px 0; border-radius: 2px;}
      .info-icon { cursor: pointer; position: relative;}
      .details-balloon { position: absolute; top: 100%; right: 0; width: 250px; background: #fff; border-radius: 8px; padding: 15px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); z-index: 10;}
      .close-details { position: absolute; top: 5px; right: 10px; cursor: pointer; font-size: 16px;}
      .summary-item { margin-bottom: 15px;}
      .summary-label { font-weight: 600; display: block; margin-bottom: 5px; color: #333;}
      .summary-value { color: var(--clr-muted);}
      .summary-subitem { padding-left: 15px; margin-top: 5px; color: var(--clr-muted);}
      .left-panel { background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); min-height: 100vh;}
      .delivery-date { font-size: 3rem; font-weight: 700; color: #333; line-height: 1;}

      /* Timeline/scrollbar */
      .timeline-container::-webkit-scrollbar { width: 6px;}
      .timeline-container::-webkit-scrollbar-track { background: #f1f1f1; border-radius: 10px;}
      .timeline-container::-webkit-scrollbar-thumb { background: #c1c1c1; border-radius: 10px;}
      .timeline-container::-webkit-scrollbar-thumb:hover { background: #a8a8a8;}
      .timeline-container { scrollbar-width: thin; scrollbar-color: #c1c1c1 #f1f1f1;}

      /* Status badges */
      .status-badge { padding: .25rem .75rem; border-radius: 1rem; font-size: .75rem; font-weight: 600; text-transform: uppercase;}
      .status-packed { background-color: var(--clr-info-100); color: #1976d2;}
      .status-pickup { background-color: var(--clr-warning-100); color: #f57c00;}
      .status-manifested { background-color: var(--clr-info-100); color: #1976d2;}
      .status-in-transit { background-color: var(--clr-warning-100); color: #f57c00;}
      .status-delivered { background-color: var(--clr-success-100); color: #4caf50;}
      .status-out-for-delivery { background-color: var(--clr-primary-100); color: #9c27b0;}
      .status-undelivered { background-color: var(--clr-danger-100); color: #f44336;}
      .status-rto { background-color: var(--clr-warning-100); color: #ff9800;}
      .status-default { background-color: var(--clr-secondary-100); color: #f57c00;}

      /* Delivery timeline */
      #deliveryTimeline .tracker-container { margin: 0 auto; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); border: 1px solid #d1d5db; border-radius: 0.5rem; background: #fff;}
      #deliveryTimeline .timeline-icons::after { content: ""; position: absolute; top: 1.75rem; left: 50%; transform: translateX(-50%); width: 2px; height: calc(100% - 3.5rem); background-color: #60a5fa; z-index: 0;}
      #deliveryTimeline .timeline-icon { transition: all 0.3s ease;}
      #deliveryTimeline .timeline-icon:hover { transform: scale(1.1); box-shadow: 0 4px 8px rgba(96, 165, 250, 0.3);}
      #deliveryTimeline .timeline-texts .title { transition: color 0.3s ease;}
      #deliveryTimeline .timeline-texts .title:hover { color: #1f2937;}
      #deliveryTimeline .links a { transition: all 0.3s ease;}
      #deliveryTimeline .links a:hover { color: #1d4ed8; transform: translateX(2px);}
      .hover-effect { transition: transform .3s ease, box-shadow .3s ease;}
      .hover-effect:hover { transform: translateY(-2px); box-shadow: var(--shadow-lg) !important;}
      .tracking-progress { height: 8px; background: #e9ecef; border-radius: 4px;}
      .tracking-progress-bar { background: linear-gradient(90deg, #4caf50 0%, #8bc34a 100%); border-radius: 4px;}
      .courier-img { width: 40px; height: 40px; object-fit: contain;}
      .map-container { position: relative; border-radius: 1rem; overflow: hidden; min-height: 300px;}
      .map-controls { position: absolute; top: 1rem; right: 1rem; display: flex; flex-direction: column; gap: .5rem;}
      .map-control-btn { background: #fff; border: none; padding: .75rem; border-radius: .5rem; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); transition: transform .2s ease, box-shadow .2s ease;}
      .map-control-btn:hover { transform: translateY(-1px); box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);}

      /* Pagination styles - Bootstrap style */
      .entries-info { font-size: 0.875rem;}
      .pagination .page-link { cursor: pointer; user-select: none; border-radius: 6px; margin: 0 2px; border: 1px solid #dee2e6; color: #6c757d; transition: all 0.2s ease;}
      .pagination .page-link:hover { background-color: #e9ecef; border-color: #dee2e6; color: #495057;}
      .pagination .page-item.active .page-link { background-color: #0d6efd; border-color: #0d6efd; color: white;}
      .pagination .page-item.disabled .page-link { color: #6c757d; pointer-events: none; background-color: #fff; border-color: #dee2e6;}
      .form-select-sm { padding: 0px 30px; font-size: 0.875rem; border-radius: 0.375rem; transition: all 0.2s ease;}
      .form-select-sm:focus { border-color: #0d6efd; box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);}
      .form-select-sm:hover { border-color: #86b7fe;}
      .entries-info .fw-bold { color: #0d6efd;}

      /* Custom styling for error details in SweetAlert and utility classes */
      .cursor-pointer { cursor: pointer; }
      .text-danger { color: #dc3545 !important; }
      .text-start { text-align: left !important; }
      .mt-2 { margin-top: 0.5rem !important; }
      .mt-3 { margin-top: 1rem !important; }
      .small { font-size: 0.875em !important; }
      .text-muted { color: #6c757d !important; }

      /* Blinking animation and hover effects for filter/export buttons */
      @keyframes blink { 0% { opacity: 1; } 50% { opacity: 0.7; } 100% { opacity: 1; } }
      #button-addon2:hover { background: #007bff !important; color: #fff !important; animation: blink 0.8s linear infinite; }
      #apply-date-filter:hover { background: #28a745 !important; color: #fff !important; animation: blink 0.8s linear infinite; }
      #clear-date-filter:hover { background: #dc3545 !important; color: #fff !important; animation: blink 0.8s linear infinite; }
      #dateRangeDropdown:hover { background: #ffc107 !important; color: #212529 !important; animation: blink 0.8s linear infinite; }
      #bulkActionsDropdown:hover { background: #20c997 !important; color: #fff !important; animation: blink 0.8s linear infinite; }
      .btn-export-csv:hover { background: #17a2b8 !important; color: #fff !important; animation: blink 0.8s linear infinite; }
      .btn-export-excel:hover { background: #218838 !important; color: #fff !important; animation: blink 0.8s linear infinite; }

      /* Offcanvas Filter Styles */
      #filterSidebar {
        background: #f8f9fa;
        border-left: 1px solid #dee2e6;
      }
      
      /* Prevent multiple backdrop issues - Simple solution */
      .offcanvas-backdrop + .offcanvas-backdrop {
        display: none !important;
      }
      
      #filterSidebar .offcanvas-header {
        background: #e9ecef;
        border-bottom: 1px solid #dee2e6;
      }
      
      #filterSidebar .offcanvas-title {
        color: #495057;
        font-weight: 600;
      }
      
      #filterSidebar .form-label {
        color: #495057;
        font-weight: 500;
      }
      
      #filterSidebar .form-control,
      #filterSidebar .form-select {
        border: 1px solid #ced4da;
        border-radius: 6px;
        font-size: 14px;
      }
      
      #filterSidebar .form-control:focus,
      #filterSidebar .form-select:focus {
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
      }
      
      #filterSidebar .btn {
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.2s ease;
      }
      
      #filterSidebar .btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      
      #filterSidebar .filter-date-range-option {
        text-align: left;
        padding: 8px 12px;
        border: 1px solid #dee2e6;
        border-radius: 6px;
        transition: all 0.2s ease;
      }
      
      #filterSidebar .filter-date-range-option:hover {
        background-color: #e9ecef;
        border-color: #adb5bd;
      }
      
      #filterSidebar .filter-date-range-option i {
        width: 16px;
        text-align: center;
        margin-right: 8px;
      }
      
      /* Responsive adjustments for offcanvas */
      @media (max-width: 576px) {
        #filterSidebar {
          width: 100% !important;
        }
        
        #filterSidebar .offcanvas-body {
          padding: 1rem;
        }
        
        #filterSidebar .row.g-3 {
          margin: 0;
        }
        
        #filterSidebar .col-6 {
          padding: 0 0.5rem;
        }

        /* Additional styles for new filter elements */
        #filterSidebar .dropdown-toggle {
          text-align: left;
          padding: 0.75rem 1rem;
          transition: all 0.2s ease;
        }
        
        #filterSidebar .dropdown-menu {
          border: 2px solid #e9ecef;
          border-radius: 8px;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        #filterSidebar .dropdown-item {
          padding: 0.75rem 1rem;
          transition: all 0.2s ease;
        }
        
        #filterSidebar .dropdown-item:hover {
          background: #f8f9fa;
          color: #2c3e50;
        }
        
        #filterSidebar .dropdown-item i {
          width: 20px;
          text-align: center;
          margin-right: 0.5rem;
          color: #6c757d;
        }

        /* Range indicator pill styles */
        #drawerRangePill {
          background: linear-gradient(135deg, #f8f9fa 0%, #e3f2fd 100%);
          border: 1px solid #e3f2fd;
          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }
        
        #drawerRangePill i {
          color: #2196f3;
          font-size: 1.2rem;
        }
        
        #drawerRangeText {
          color: #1976d2 !important;
          font-size: 1.1rem;
        }

        /* Additional styles for filter elements */
        #filterSidebar .form-select {
          border: 2px solid #e9ecef;
          border-radius: 8px;
          padding: 0.75rem;
          transition: all 0.2s ease;
        }
        
        #filterSidebar .form-select:focus {
          border-color: #3498db;
          box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);
          transform: translateY(-1px);
        }
        
        #filterSidebar .btn-outline-danger {
          border: 2px solid #dc3545;
          color: #dc3545;
        }
        
        #filterSidebar .btn-outline-danger:hover {
          background: #dc3545;
          border-color: #dc3545;
          color: white;
        }
      }
    </style>
</head>


<body data-theme="light" class="font-nunito">
  <div id="wrapper" class="theme-cyan">
    <!-- HEADER -->
    <%- include('../../partials/header') %>

      <!-- SIDEBAR -->
      <%- include('../../partials/left-sidebar') %>
        <%- include('../../partials/right-iconbar') %>

          <!-- MAIN CONTENT -->
          <div id="main-content">
            <div class="container pt-4">

              <!-- Page Header -->
              <div class="block-header">
                <div class="row">
                  <div class="col-lg-6 col-md-6 col-sm-12">
                    <h2 class="mb-2">Order Return</h2>
                    <ul class="breadcrumb">
                      <li class="breadcrumb-item">
                        <a href="/index" aria-label="Dashboard">
                          <i class="fa fa-dashboard" aria-hidden="true"></i>
                        </a>
                      </li>
                      <li class="breadcrumb-item">Order Management</li>
                      <li class="breadcrumb-item">Express</li>
                      <li class="breadcrumb-item">Post-Dispatch</li>
                      <li class="breadcrumb-item active" aria-current="page">Order Return</li>
                    </ul>
                  </div>
                </div>
              </div>

              <!-- Filters Row -->
              <div class="mb-5">
                <div class="row">
                  <div class="col-12">
                    <div class="filter d-flex flex-wrap align-items-stretch gap-2 p-2"
                      style="box-shadow: 0 2px 8px rgba(0,0,0,0.1); border-radius: 8px; background: #f5f5f5;">

                      <!-- Search (smaller, more compact) -->
                      <form class="flex-grow-1 d-flex mb-2 mb-md-0" onsubmit="return false;" style="min-width:120px;max-width:220px;">
                        <div class="input-group w-100" style="box-shadow: 0 1px 4px rgba(0,0,0,0.08); border-radius: 5px;">
                          <input type="text" class="form-control form-control-sm ps-2 pe-4"
                            id="search-input"
                            placeholder="Search..." aria-label="Search orders"
                            style="border: none; border-radius: 5px; font-size: 13px; height: 32px; background: #f5f5f5; color: #212529;">
                          <span class="input-group-text bg-transparent border-0 position-absolute end-0 top-50 translate-middle-y p-0 me-2" style="pointer-events: none; color: #888; background: none;">
                            <i class="fas fa-search" style="font-size: 13px; color: #4d84fc;"></i>
                          </span>
                        </div>
                      </form>

                      <!-- Bulk Actions -->
                      <div class="flex-shrink-1 mb-2 mb-md-0" style="min-width:120px;max-width:180px;">
                        <div class="dropdown w-100">
                          <button 
                            class="btn btn-success dropdown-toggle btn-sm w-100" 
                            type="button" 
                            id="bulkActionsDropdown"
                            name="bulkActionsDropdown"
                            data-bs-toggle="dropdown" 
                            disabled 
                            aria-disabled="true" 
                            style="border: none;padding: 8px; box-shadow: 0 1px 4px rgba(0,0,0,0.08); background: #f5f5f5; color: #212529;"
                            title="Bulk Actions"
                          >
                            <i class="fas fa-tasks me-1" style="color: #9a18d2;"></i>Bulk Actions
                          </button>
                          <ul class="dropdown-menu shadow-sm w-100" aria-labelledby="bulkActionsDropdown">
                            <li>
                              <h6 class="dropdown-header">Print Labels</h6>
                            </li>
                            <li>
                              <button 
                                class="dropdown-item bulk-print-label d-flex align-items-center" 
                                type="button" 
                                name="printLabel4X6"
                                data-size="4X6"
                                style="background: #f5f5f5; color: #212529;"
                              >
                                <i class="fas fa-print me-2"></i>4X6 Labels
                              </button>
                            </li>
                            <li>
                              <button 
                                class="dropdown-item bulk-print-label d-flex align-items-center" 
                                type="button" 
                                name="printLabelA4"
                                data-size="A4"
                                style="background: #f5f5f5; color: #212529;"
                              >
                                <i class="fas fa-print me-2"></i>A4 Labels
                              </button>
                            </li>
                            <li>
                              <button 
                                class="dropdown-item bulk-print-label d-flex align-items-center" 
                                type="button" 
                                name="printLabel4X4"
                                data-size="4X4"
                                style="background: #f5f5f5; color: #212529;"
                              >
                                <i class="fas fa-print me-2"></i>4X4 Labels
                              </button>
                            </li>
                            <li>
                              <button 
                                class="dropdown-item bulk-print-label d-flex align-items-center" 
                                type="button" 
                                name="printLabel4X2"
                                data-size="4X2"
                                style="background: #f5f5f5; color: #212529;"
                              >
                                <i class="fas fa-print me-2"></i>4X2 Labels
                              </button>
                            </li>
                          </ul>
                        </div>
                      </div>
                 

                      <!-- Export Buttons -->
                      <div class="btn-group flex-shrink-1 mb-2 mb-md-0" role="group" style="min-width:100px;">
                        <button type="button" class="btn btn-primary btn-sm btn-export-csv" onclick="exportToCSV()" style="border: none; box-shadow: 0 1px 4px rgba(0,0,0,0.08); background: #f5f5f5; color: #212529;"
                          title="Export to CSV">
                          <i class="fas fa-file-csv me-1" style="color: #1877d5;"></i>CSV
                        </button>
                        <button type="button" class="btn btn-success btn-sm btn-export-excel" onclick="exportToExcel()" style="border: none; box-shadow: 0 1px 4px rgba(0,0,0,0.08); background: #f5f5f5; color: #212529;"
                          title="Export to Excel">
                          <i class="fas fa-file-excel me-1" style="color: #2ad218;"></i>Excel
                        </button>
                      </div>

                      <!-- Filters Button & Range Badge -->
                      <div class="filter-btn-group d-flex align-items-center gap-2 flex-shrink-1 mb-2 mb-md-0" style="min-width:100px;">
                        <button
                          class="btn btn-light btn-sm d-flex align-items-center px-2 py-2 shadow-sm flex-shrink-0"
                          type="button" data-bs-toggle="offcanvas" data-bs-target="#filterSidebar"
                          aria-controls="filterSidebar"
                          style="border-radius: 8px; font-weight: 500; font-size: 14px; min-width: 80px; background: #f5f5f5; color: #212529;">
                          <i class="fas fa-filter me-2" style="color: #4a87e2;"></i>
                          <span class="default-text" style="color:#3e1a51;">Filters</span>
                          <span class="spinner-border spinner-border-sm ms-2 d-none" role="status" aria-hidden="true"></span>
                        </button>
                        <span id="selectedRangeBadge"
                          class="btn btn-light btn-sm d-flex align-items-center px-2 py-2 shadow-sm flex-shrink-0"
                          style="border-radius: 8px; font-weight: 500; font-size: 14px; min-width: 60px; color: #3e1a51; background: #f5f5f5;">
                          <span id="selectedRangeText" style="color:#3e1a51;">Today</span>
                        </span>
                      
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Filter Indicators -->
                <div class="filter-indicators d-flex flex-wrap mx-4 mb-3"></div>

                <!-- Orders -->
                <div class="">
                  <div class="card-body p-2"></div>

                  <div id="ordersContainer">
                    <% // Separate order_id (for API calls) and orderid (for display)
                      // order_id is the numeric ID used in API calls
                      // orderid is the display string shown to users
                      %>

                      <% result.forEach(function(order) { 
                        const lrDateObj = new Date(order.created_at); 
                        const orderIdForAPI = order.order_id; // Use order_id for API calls
                        const orderIdForDisplay = order.orderid; // Use orderid for display
                        const orderDateObj = new Date(order.order_date || order.created_at || Date.now()); 
                        const formatDate = (date) => date.toLocaleDateString('en-IN', {
                          weekday: 'short', 
                          year: 'numeric', 
                          month: 'short', 
                          day: 'numeric', 
                          timeZone: 'Asia/Kolkata'
                        });
                        const consigneeFull = ((order.consignee_first_name || '') + ' ' + (order.consignee_last_name || '')).trim();
                        const courierName = (order.tagged_api || '').toLowerCase();
                        let logoPath = '/assets/images/logos/logo-dark.png';
                        if (courierName.includes('delhivery')) logoPath = '/assets/images/logos/delhivery.png';
                        else if (courierName.includes('xpress') || courierName.includes('expressbees')) logoPath = '/assets/images/logos/expressbees.png';
                        else if (courierName.includes('dtdc')) logoPath = '/assets/images/logos/dtdc.png';
                        else if (courierName.includes('bluedart')) logoPath = '/assets/images/BlueDart.png';
                        else if (courierName.includes('fedex')) logoPath = '/assets/images/FedEx.png';
                      %>

                        <div class="order-card" data-client="<%= order.client_id %>"
                          data-company-name="<%= order.company_name %>" data-created="<%= lrDateObj.toISOString() %>"
                          data-payment="<%= order.payment_mode || '' %>"
                          data-warehouse-pincode="<%= order.warehouse_pincode || 'N/A' %>"
                          data-consignee-pincode="<%= order.consignee_pincode || 'N/A' %>"
                          data-weight="<%= order.chargable_weight || 'N/A' %>"
                          data-package-weight="<%= order.chargable_weight || 'N/A' %>"
                          data-chargeable-weight="<%= order.chargable_weight || 'N/A' %>"
                          data-volumetric-weight="<%= order.volumetric_weight || 'N/A' %>"
                          data-total-weight="<%= order.total_weight || 'N/A' %>"
                          data-weight-unit="<%= order.weight_unit || 'kg' %>"
                          data-tagged-api="<%= order.tagged_api || 'N/A' %>"
                          data-service-type="<%= order.forwarder_product_type || 'N/A' %>"
                          data-charges="<%= order.total_lr_charges || 'N/A' %>"
                          data-lr-date="<%= lrDateObj.toISOString() %>"
                          data-eta="<%= order.eta || 3 %>"
                          data-pickup-zone="<%= order.pickup_zone || 'NA' %>"
                          data-destination-zone="<%= order.destination_zone || 'NA' %>"
                          data-warehouse-address="<%= order.warehouse_address || 'NA' %>"
                          data-consignee-address="<%= order.consignee_address1 || 'NA' %>"
                          data-grand-total="<%= order.grand_total || 'N/A' %>"
                          data-collectable-amount="<%= order.collectable_amount || 'N/A' %>"
                           data-consignee-phone-no="<%= order.consignee_phone || 'N/A' %>"
                           data-consignee-first-name="<%= order.consignee_first_name || 'N/A' %>"
                           data-consignee-last-name="<%= order.consignee_last_name || 'N/A' %>"
                           data-consignee-email-id="<%= order.consignee_email || 'N/A' %>"
                           data-invoice-no="<%= order.invoice_no || 'N/A' %>"
                           data-invoice-amount="<%= order.grand_total || 'N/A' %>"
                          data-order-id-db="<%= order.orderid || 'N/A' %>"
                           data-order-id="<%= orderIdForAPI %>">
                          <div class="row align-items-center g-3">

                            <!-- Select -->
                            <div class="col-md-1 text-center">
                              <input class="form-check-input rowCheckbox" type="checkbox" data-id="<%= order.lr_no %>">
                            </div>

                            <!-- Order/LR -->
                            <div class="col-md-2">
                              <div class="order-id lrNo" role="button" tabindex="0" data-bs-toggle="offcanvas"
                                data-bs-target="#orderDetailsCanvas" aria-controls="orderDetailsCanvas"
                                data-lrno="<%= order.lr_no %>" data-vendor-type="<%= order.tagged_api %>"
                                data-orderid="<%= orderIdForAPI %>">
                                <%= order.lr_no %>
                              </div>
                              <small class="text-muted d-block">LR Date: <%= formatDate(lrDateObj) %></small>

                              <div class="order-id mt-2">Order: <%= orderIdForDisplay %>
                              </div>
                              <small class="text-muted d-block">Order Date: <%= formatDate(orderDateObj) %></small>

                                      <button class="btn btn-outline-success btn-sm mt-2" onclick="openTrackingModal('<%= order.lr_no %>', '<%= orderIdForAPI %>', '<%= orderIdForDisplay %>', '<%= order.status %>')">
          Track Order
        </button>
                            </div>

                            <!-- Company / Consignee (timeline visuals kept) -->
                            <div class="col-md-3">
                              <div class="d-flex flex-column align-items-start position-relative timeline-section ps-4">
                                <div class="position-absolute timeline-line"></div>

                                <div class="d-flex align-items-center mb-2">
                                  <div
                                    class="text-black d-flex align-items-center justify-content-center me-3 timeline-icon">
                                    <i class="fa fa-building" aria-hidden="true"></i>
                                  </div>
                                  <div>
                                    <div class="fw-semibold">Company</div>
                                    <div class="text-muted text-small">
                                      <%= order.company_name || 'N/A' %>
                                    </div>
                                    <div class="text-muted text-small">Pincode: <%= order.warehouse_pincode || 'N/A' %>
                                    </div>
                                  </div>
                                </div>

                                <div class="d-flex align-items-center">
                                  <div
                                    class="text-black d-flex align-items-center justify-content-center me-3 timeline-icon">
                                    <i class="fa fa-user" aria-hidden="true"></i>
                                  </div>
                                  <div>
                                    <div class="fw-semibold">Consignee</div>
                                    <div class="text-muted text-small">
                                      <%= order.consignee_first_name || 'N/A' %>
                                        <%= order.consignee_last_name || '' %> (<%= order.consignee_city || 'N/A' %>)
                                    </div>
                                    <div class="text-muted text-small">Phone: <%= order.consignee_phone || 'N/A' %>
                                    </div>
                                    <div class="text-muted text-small">Alternate Phone: <%= order.consignee_alternate_mobile || 'N/A' %></div>
                                  </div>
                                </div>
                              </div>
                            </div>

                            <!-- Weight -->
                            <div class="col-md-2 text-small">
                              <strong>Weight Details</strong><br />
                              Chargeable: <%= order.chargable_weight || 'N/A' %> kg<br />
                                Volumetric: <%= order.volumetric_weight || 'N/A' %> kg
                            </div>

                            <!-- Courier -->
                            <div class="col-md-2 text-small">
                              <strong>Courier Partner</strong><br />

                              <div class="courier-compact" data-courier="<%= order.tagged_api %>">
                                <div class="d-flex align-items-center justify-content-between p-2 border rounded"
                                  style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); cursor: pointer;"
                                  onclick="toggleCourierOptions(this)">
                                  <div class="d-flex flex-column align-items-center">
                                    <img src="<%= logoPath %>" alt="<%= order.tagged_api || 'Courier' %>"
                                      style="width: 75px; height: 30px; object-fit: contain; border-radius: 4px;">
                                    <div class="text-muted" style="font-size: 11px; margin-top: 4px;">
                                      <%= order.forwarder_product_type || 'N/A' %>
                                        <% if ((order.forwarder_product_type||'').toLowerCase().includes('air')) { %>
                                          <i class="fas fa-plane ms-1 text-primary" aria-hidden="true"></i>
                                          <% } else { %>
                                            <i class="fas fa-truck ms-1 text-primary" aria-hidden="true"></i>
                                            <% } %>
                                    </div>
                                  </div>
                                  <div class="d-flex align-items-center">
                                    <span class="badge bg-success me-1" style="font-size: 10px;">₹<%= order.total_lr_charges || 'N/A' %></span>
                                    <i class="fas fa-chevron-down"
                                      style="font-size: 12px; transition: transform 0.3s ease;"></i>
                                  </div>
                                </div>

                                <!-- Expandable Options -->
                                <div class="courier-options-compact"
                                  style="max-height: 0; overflow: hidden; transition: max-height 0.3s ease;">
                                  <div class="border-top border-start border-end rounded-bottom p-2"
                                    style="background: #fff;">
                                    <!-- Total -->
                                    <div class="d-flex justify-content-between align-items-center mb-1 p-1"
                                      style="background: linear-gradient(135deg, #e8f5e8 0%, #d4edda 100%); border-left: 3px solid #28a745;">
                                      <div>
                                        <div class="fw-semibold small">Total Rate</div>
                                      </div>
                                      <div class="text-end">
                                        <div class="fw-bold text-success small">₹<%= order.total_lr_charges || 'N/A' %>
                                        </div>
                                      </div>
                                    </div>

                                    <div class="d-flex justify-content-between align-items-center mb-1 p-1">
                                      <div>
                                        <div class="fw-semibold small">Base Rate</div>
                                      </div>
                                      <div class="text-end">
                                        <div class="fw-bold small">₹<%= order.base_rate || 'N/A' %>
                                        </div>
                                      </div>
                                    </div>

                                    <div class="d-flex justify-content-between align-items-center mb-1 p-1">
                                      <div>
                                        <div class="fw-semibold small">Total Additional</div>
                                      </div>
                                      <div class="text-end">
                                        <div class="fw-bold small">₹<%= order.total_additional || 'N/A' %>
                                        </div>
                                      </div>
                                    </div>

                                    <div class="d-flex justify-content-between align-items-center mb-1 p-1">
                                      <div>
                                        <div class="fw-semibold small">Total GST (18%)</div>
                                      </div>
                                      <div class="text-end">
                                        <div class="fw-bold small">₹<%= order.total_gst || 'N/A' %>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>

                            <!-- Actions -->
                            <div class="col-md-2 text-end text-small">
                              <div class="mt-3 d-flex gap-2 justify-content-end">
                               
                                  <!-- Pickup Request -->
                                  <button class="btn pickup-request" data-orderid="<%= orderIdForAPI %>"
                                    data-client-id="<%= order.client_id %>" data-courier="<%= order.tagged_api %>"
                                    data-awb-number="<%= order.lr_no %>" title="Pickup Request">
                                    <i class="fas fa-person-walking-luggage me-1" aria-hidden="true"></i>
                                  </button>

                                  <!-- Cancel LR -->
                                  <button class="btn cancel-lr" data-action="cancel-lr-awb"
                                    data-courier="<%= order.tagged_api %>" data-awb-number="<%= order.lr_no %>"
                                    data-orderid="<%= orderIdForAPI %>" data-client-id="<%= order.client_id %>"
                                    title="Cancel LR">
                                    <i class="fas fa-times-circle me-1" aria-hidden="true"></i>
                                  </button>

                                  <!-- Shipping Labels -->
                                  <div class="dropdown">
                                    <button class="btn dropdown-toggle" type="button" data-bs-toggle="dropdown"
                                      aria-expanded="false" title="Print Shipping Label">
                                      <i class="fas fa-receipt me-1" aria-hidden="true"></i>
                                    </button>
                                    <div class="dropdown-menu">
                                      <% if (order.tagged_api && order.tagged_api.includes("Delhivery/LTL-surface")) {
                                        %>
                                        <a class="dropdown-item print-label" href="#" data-size="4X4"
                                          data-courier="<%= order.tagged_api %>" data-awb-number="<%= order.lr_no %>"
                                          data-orderid="<%= orderIdForAPI %>"
                                          aggrigator-id="<%= order.aggrigator_id %>" client-id="<%= order.client_id %>">
                                          <i class="fas fa-print me-2"></i>4X4 Label
                                        </a>
                                        <% } else { %>
                                          <a class="dropdown-item print-label" href="#" data-size="4X6"
                                            data-courier="<%= order.tagged_api %>" data-awb-number="<%= order.lr_no %>"
                                            data-orderid="<%= orderIdForAPI %>"
                                            aggrigator-id="<%= order.aggrigator_id %>"
                                            client-id="<%= order.client_id %>">
                                            <i class="fas fa-print me-2"></i>4X6 Label
                                          </a>
                                          <a class="dropdown-item print-label" href="#" data-size="A4"
                                            data-courier="<%= order.tagged_api %>" data-awb-number="<%= order.lr_no %>"
                                            data-orderid="<%= orderIdForAPI %>"
                                            aggrigator-id="<%= order.aggrigator_id %>"
                                            client-id="<%= order.client_id %>">
                                            <i class="fas fa-print me-2"></i>A4 Label
                                          </a>
                                          <a class="dropdown-item print-label" href="#" data-size="4X4"
                                            data-courier="<%= order.tagged_api %>" data-awb-number="<%= order.lr_no %>"
                                            data-orderid="<%= orderIdForAPI %>"
                                            aggrigator-id="<%= order.aggrigator_id %>"
                                            client-id="<%= order.client_id %>">
                                            <i class="fas fa-print me-2"></i>4X4 Label
                                          </a>
                                          <a class="dropdown-item print-label" href="#" data-size="4X2"
                                            data-courier="<%= order.tagged_api %>" data-awb-number="<%= order.lr_no %>"
                                            data-orderid="<%= orderIdForAPI %>"
                                            aggrigator-id="<%= order.aggrigator_id %>"
                                            client-id="<%= order.client_id %>"
                                            >
                                            <i class="fas fa-print me-2"></i>4X2 Label
                                          </a>
                                          <% } %>
                                    </div>
                                  </div>
                              
                              </div>
                            </div>

                          </div>
                        </div>

                        <% }); %>
                  </div>

                  <!-- Pagination and Entries Info -->
                  <div class="d-flex justify-content-between align-items-center mb-4">
                    <!-- Left Side - Total Entries -->
                    <div class="entries-info">
                      <span class="text-muted">
                        Showing <span id="showingStart" class="fw-bold">0</span> to <span id="showingEnd" class="fw-bold">0</span> of <span id="totalEntries" class="fw-bold">0</span> entries
                      </span>
                    </div>
                    
                    <!-- Right Side - Pagination -->
                    <nav aria-label="Orders pagination">
                      <div class="d-flex align-items-center gap-3">
                        <!-- Items per page selector -->
                        <div class="d-flex align-items-center gap-2">
                          <label for="itemsPerPageSelect" class="form-label mb-0 text-muted small">Show:</label>
                          <select id="itemsPerPageSelect" class="form-select form-select-sm" style="width: auto;" onchange="changeItemsPerPage(this.value)" title="Change number of items per page">
                            <option value="5">5</option>
                            <option value="10">10</option>
                            <option value="25">25</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                          </select>
                          <span class="text-muted small">entries</span>
                        </div>
                        
                        <!-- Pagination controls -->
                        <ul class="pagination pagination-sm mb-0" id="pagination"></ul>
                      </div>
                    </nav>
                  </div>
                </div>
              </div>
            </div>

            <!-- jQuery (Only once) -->
            <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

                <!-- Custom Pagination System - No DataTables needed -->
            <%- include('../../partials/footer') %>
          </div>
  </div>


  <!-- Client Filter Modal -->
  <div class="modal fade" id="clientFilterModal" tabindex="-1" aria-labelledby="clientFilterModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="clientFilterModalLabel">Filter by Client</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label for="clientSelect" class="form-label">Select Client</label>
            <select class="form-select" id="clientSelect">
              <option value="">All Clients</option>
              <!-- Client options will be populated dynamically -->
            </select>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" id="applyClientFilter">Apply Filter</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Payment Mode Filter Modal -->
  <div class="modal fade" id="paymentFilterModal" tabindex="-1" aria-labelledby="paymentFilterModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="paymentFilterModalLabel">Filter by Payment Mode</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label for="paymentModeSelect" class="form-label">Select Payment Mode</label>
            <select class="form-select" id="paymentModeSelect">
              <option value="">All Payment Modes</option>
              <option value="COD">COD</option>
              <option value="Prepaid">Prepaid</option>
              <!-- Add more payment modes as needed -->
            </select>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" id="applyPaymentFilter">Apply Filter</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Order Tracking Off-Canvas -->
  <div class="offcanvas offcanvas-end" tabindex="-1" id="orderDetailsCanvasSecond"
    aria-labelledby="customOffcanvasLabel" style="width: auto;">
    <div class="offcanvas-body p-0">
      <div class="container-fluid tracking-container bg-white overflow-hidden mx-auto">
        <div class="row">
          <!-- Left panel - Shipment Overview -->
          <div class="col-sm-4">
            <aside class="left-panel p-4 d-flex flex-column border-end h-100">
              <header class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="fw-semibold fs-6 text-dark mb-0">Shipment Overview & Tracking</h2>
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
              </header>

              <!-- Delivery Date Card -->
              <div class="d-flex justify-content-between align-items-start mb-4">
                <div>
                  <p class="text-muted small mb-1" id="orderDateDisplay">Order Date: Dec 15, 2024</p>
                  <p class="text-muted small mb-1">Estimated Delivery Date</p>
                  <p class="fw-bold fs-5 mb-0" id="deliveryDay">Monday</p>
                  <p class="text-muted small mb-2" id="deliveryMonth">February</p>
                  <p class="delivery-date mb-2" id="deliveryDate">25</p>
                  <p class=" mb-0" id="lrNumberDisplay" style="color: #333;">AWB NUMBER</p>
                  <p class=" fw-semibold fs-5 mb-0" id="lrNumberData" style="color:  #4caf50;font-weight: 800;">12345
                  </p>
                  <p class="text-muted " id="orderIdDisplay">Order ID #18498-98018</p>
                </div>
                <div class="align-self-start">
                  <div class=" small mb-1">Invoice Amount</div>
                  <div class=" small mb-1" id="grandTotal" style="font-size:1rem; color:#333;">₹0</div>
                  <div class="text-muted small mb-1">Payment Type</div>
                  <div class=" small mb-1" style="font-size:3rem; color:#333;text-transform: uppercase;"
                    id="paymentType">COD</div>

                  <div class="text-muted small mb-1" id="codtitle">COD Amount</div>
                  <div class=" small mb-1" id="collectableAmount" style="font-size:3rem; color:#333;">₹ 0</div>
                </div>
              </div>

              <!-- Shipment Route -->
              <section class="mb-4">
                <div class="mb-1">
                  <strong class="text-muted small">ZONE <br>FROM &rarr; TO</strong>
                </div>
                <div class="d-flex justify-content-between align-items-center mb-1">
                  <span class="small fw-semibold" id="shipmentRoute">Florence → Stockholm</span>
                  <img id="courierLogo" src="assets/images/logos/default.png" alt="Courier Logo"
                    style="width: 120px; height: 60px; object-fit: contain;">
                </div>
              </section>

              <!-- Current Shipment Card -->
              <section class="border rounded-3 p-3 mb-4 d-flex flex-column hover-effect">
                <div class="d-flex justify-content-between align-items-center mb-1">
                  <span class="small fw-semibold">
                    <span class="text-muted">From:</span>
                    <span id="fromLocation">Norra Nynäshamn</span>
                    <span class="fw-bold ms-2 text-muted">To:</span>
                    <span class="fw-bold" id="toLocation">Stockholm</span>
                  </span>
                </div>
                <span class="status-badge status-in-transit" style="width: fit-content;" id="currentStatus">IN
                  TRANSIT</span>
                <div class="text-muted small mb-2" id="lrNumber">Order ID #29698-98971</div>

                <!-- Progress Bar -->
                <div class="progress tracking-progress mb-3">
                  <div class="progress-bar tracking-progress-bar" style="width: 70%"></div>
                </div>

                <!-- Shipment Details -->
                <div class="row gx-2 small text-muted mb-3">
                  <div class="col-6 col-sm-3 mb-2 mb-sm-0">
                    <div class="fw-semibold text-dark">Sender</div>
                    <span id="senderName">Amazon</span>
                  </div>
                  <div class="col-6 col-sm-3 mb-2 mb-sm-0">
                    <div class="fw-semibold text-dark">Order Date</div>
                    <span id="departureDate">15 Dec<br>03:27 PM</span>
                  </div>
                  <div class="col-6 col-sm-3">
                    <div class="fw-semibold text-dark">Service Type</div>
                    <span id="serviceType">Express</span>
                  </div>
                  <div class="col-6 col-sm-3">
                    <div class="fw-semibold text-dark">Weight</div>
                    <span id="packageWeight">5.2 kg</span>
                  </div>
                </div>

                <!-- Courier Information -->
                <div class="d-flex align-items-center gap-3">
                  <img src="https://storage.googleapis.com/a1aa/image/2023d356-8963-43c7-401d-58d19658aeb7.jpg"
                    class="courier-img rounded-circle" alt="Courier Harris Whitaker" id="roundlogo" />
                  <div class="flex-grow-1 small">
                    <div class="fw-semibold">Courier Partner</div>
                    <span id="courierPartner">Harris Whitaker</span>
                  </div>
                  <button class="btn btn-sm p-2 rounded-circle border" type="button" aria-label="Chat with courier">
                    <i class="fas fa-comment-alt text-muted"></i>
                  </button>
                  <button class="btn btn-sm p-2 rounded-circle border" type="button" aria-label="Call courier">
                    <i class="fas fa-phone-alt text-muted"></i>
                  </button>
                </div>
              </section>
            </aside>
          </div>
          <!-- Middle panel - Map and Tracking Details -->
          <div class="col-sm-5">
            <main class="right-panel">
              <div class="d-flex flex-column flex-md-row gap-4 flex-grow-1">
                <!-- Map Section -->
                <section class="flex-grow-1 d-flex flex-column">
                  <!-- Tracking Summary Card -->
                  <div
                    class="bg-white rounded-3 p-4 mb-4 d-flex flex-column flex-md-row align-items-center justify-content-between gap-3 hover-effect shadow-sm">
                    <div class="d-flex flex-column flex-md-row align-items-center gap-3">
                      <div class="small fw-semibold" id="trackingOrderId">Order ID #29698-98971</div>
                      <span class="status-badge status-in-transit" id="trackingStatus">IN TRANSIT</span>
                    </div>
                    <div class="position-relative d-inline-block" style="z-index: 10;">
                      <button class="btn btn-outline-secondary btn-sm rounded-pill px-3" type="button"
                        id="contactCourierBtn" onmouseenter="showCourierBalloon(this)"
                        onmouseleave="hideCourierBalloon(this)">
                        Contact courier
                      </button>
                      <div class="courier-balloon shadow-lg animate__animated animate__fadeIn"
                        style="display:none; position:absolute; top:110%; left:50%; transform:translateX(-50%); min-width:220px; background:#fff; border-radius:12px; border:1px solid #e0e0e0; padding:1rem; box-shadow:0 4px 16px rgba(0,0,0,0.10); font-size:0.95rem;">
                        <div class="fw-semibold mb-1" style="color:#2d3a4a;">Dispatch Solutions</div>
                        <div>
                          <a href="mailto:customercare@dispatch.co.in" class="text-decoration-none"
                            style="color:#007bff;">
                            customercare@dispatch.co.in
                          </a>
                        </div>
                        <div>
                          <a href="tel:+919313388388" class="text-decoration-none" style="color:#007bff;">
                            +91 9313 388 388
                          </a>
                        </div>
                      </div>
                    </div>
                    <script>
                      function showCourierBalloon(btn) {
                        const balloon = btn.parentElement.querySelector('.courier-balloon');
                        if (balloon) {
                          balloon.style.display = 'block';
                          balloon.classList.add('animate__fadeIn');
                        }
                      }
                      function hideCourierBalloon(btn) {
                        const balloon = btn.parentElement.querySelector('.courier-balloon');
                        if (balloon) {
                          balloon.style.display = 'none';
                          balloon.classList.remove('animate__fadeIn');
                        }
                      }
                    </script>
                  </div>

                  <!-- Tracking Details Grid -->
                  <div class="bg-white rounded-3 p-4 mb-4 row g-3 small hover-effect shadow-sm">
                    <div class="col-6 col-md-4 col-lg-3">
                      <div class="fw-semibold text-muted">From</div>
                      <div class="fw-bold" id="trackingFromCity">Norra Nynäshamn</div>
                      <div id="trackingFromwarehouse">Warehouse</div>
                    </div>
                    <div class="col-6 col-md-4 col-lg-3">
                      <div class="fw-semibold text-muted">To</div>
                      <div class="fw-bold" id="trackingToCity">Stockholm</div>
                      <div id="trackingToAddress">Sweden</div>
                      <div id="trackingpincode">123456</div>
                    </div>
                    <div class="col-6 col-md-4 col-lg-2">
                      <div class="fw-semibold text-muted">Consignee</div>
                      <div class="fw-bold" id="trackingConsignee">Farsta</div>
                      <div id="trackingConsigneeCity">Sweden</div>
                    </div>
                    <div class="col-6 col-md-4 col-lg-2">
                      <div class="fw-semibold text-muted">Shipment Charges</div>
                      <div class="fw-bold" id="trackingCharges">₹246</div>
                    </div>
                    <div class="col-6 col-md-4 col-lg-2">
                      <div class="fw-semibold text-muted">LR Number</div>
                      <div class="fw-bold" id="trackingLrNumber">LR123456</div>
                    </div>
                  </div>

                  <!-- Map Container -->
                  <div class="map-container shadow-lg flex-grow-1 mb-4">
                    <img src="https://storage.googleapis.com/a1aa/image/b69f93a4-d7b9-42b7-8f75-1d7571c97426.jpg"
                      class="img-fluid w-100 h-100 object-fit-cover" alt="Package delivery route map" />
                    <div class="map-controls">
                      <button class="map-control-btn" type="button" aria-label="Search" style="border: none;">
                        <i class="fas fa-search text-muted"></i>
                      </button>
                      <button class="map-control-btn" type="button" aria-label="Map settings" style="border: none;">
                        <i class="fas fa-cog text-muted"></i>
                      </button>
                    </div>
                  </div>
                </section>
              </div>
            </main>
          </div>
          <!-- Right panel - Shipment Status Timeline -->
          <div class="col-sm-3">
            <section class="bg-white rounded-3 p-4 shadow-sm hover-effect h-100" style="min-width: 300px;">
              <div class="d-flex justify-content-between align-items-center mb-4">
                <h3 class="h5 fw-semibold mb-0">Shipment Status</h3>
              </div>
              <div class="card shadow-sm border-0" id="deliveryTimeline">
                <!-- Dynamic timeline will be populated here -->
                <div class="card-body p-4">
                  <div class="text-center text-muted py-4">
                    <i class="fas fa-shipping-fast fa-3x mb-3 text-muted"></i>
                    <h5 class="text-dark mb-2">Click on any order to view tracking details</h5>
                    <p class="text-muted mb-0">Status timeline will appear here</p>

                  </div>
                </div>
              </div>
            </section>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- this is a click pono script start-->
  <script>
    // ---------- Helpers ----------
    const safeValue = (v) => (v === null || v === undefined || v === '' ? 'N/A' : v);
    const safeGet = (obj, path, fallback = 'N/A') => {
      try {
        return path.split('.').reduce((o, k) => (o && k in o ? o[k] : undefined), obj) ?? fallback;
      } catch { return fallback; }
    };
    const swalOrAlert = (title, text = '', icon = 'info') => {
      if (window.Swal) return Swal.fire({ title, text, icon });
      alert(text ? `${title}\n${text}` : title);
    };
    const pickCourierLogo = (name = '') => {
      const n = String(name).toLowerCase();
      if (n.includes('delhivery')) return 'assets/images/logos/delhivery.png';
      if (n.includes('xpress') || n.includes('expressbees')) return 'assets/images/logos/expressbees.png';
      if (n.includes('dtdc')) return 'assets/images/logos/dtdc.png';
      if (n.includes('bluedart')) return 'assets/images/BlueDart.png';
      if (n.includes('fedex')) return 'assets/images/FedEx.png';
      return 'assets/images/logos/logo-dark.png';
    };
    const showDefaultTrackingUI = (order) => {
      const container = document.querySelector('.detailedorder');
      if (!container) return;
      container.innerHTML = `
                  <div class="package" style="background:linear-gradient(135deg,#fdfcfb 0%,#fff6dd 100%)">
                    <div class="col-sm-8">Package from ${safeValue(order.warehouse_address)}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status">order created</div>
                    <div class="info-icon" onclick="event.stopPropagation(); const b=this.querySelector('.details-balloon'); b.style.display = (b.style.display==='none'||!b.style.display) ? 'block':'none'">
                      <span style="color:#5a99fc;">View Details</span>
                      <div class="details-balloon" style="display: none;">
                        <span class="close-details" onclick="event.stopPropagation(); this.closest('.details-balloon').style.display='none'">×</span>
                        <div>Location<br/><strong>${safeValue(order.warehouse_address)}</strong></div>
                        <div>Order Date<br/><strong>${new Date(order.order_date).toLocaleString()}</strong></div>
                      </div>
                    </div>
                  </div>`;
    };
    const setText = (id, value) => { const el = document.getElementById(id); if (el) el.textContent = value; };

    // Time/ETA helpers
    const toDate = (d) => (d ? new Date(d) : null);
    const formatDate = (d, locale = 'en-US', opts = { month: 'short', day: 'numeric', year: 'numeric' }) =>
      d ? d.toLocaleDateString(locale, opts) : 'N/A';
 </script>


  <script>
    /* =========================================================
     * Utilities
     * =======================================================*/
    // safeValue and setText are already defined above, so we don't redeclare them

    const fmtDate = (d, withTime = false) => {
      if (!d) return 'N/A';
      const dt = (d instanceof Date) ? d : new Date(d);
      if (Number.isNaN(dt.getTime())) return 'N/A';
      return withTime
        ? dt.toLocaleString()
        : dt.toLocaleDateString();
    };

    const setRightLogo = (logoPath) => {
      const rightLogo = document.getElementById('right-logo');
      if (rightLogo && logoPath) rightLogo.src = logoPath;
    };

    const setTrackingStatus = (text) => {
      const statusElement = document.getElementById('tracking-status');
      if (!statusElement) return;
      statusElement.textContent = text || 'In Transit';
      statusElement.style.background = '#e6f7ff';
      statusElement.style.color = '#1890ff';
    };

    const detailsBalloonToggler = `
                onclick="event.stopPropagation();
                  const b=this.querySelector('.details-balloon');
                  b.style.display = (b.style.display==='none'||!b.style.display) ? 'block':'none'"
              `;

    const closeBalloonBtn = `
                <span class="close-details" onclick="event.stopPropagation(); this.closest('.details-balloon').style.display='none'">×</span>
              `;

    /* =========================================================
     * Shared Renderers
     * =======================================================*/
    function renderPackageHeaderBlock({ bg, client, order, statusText, progress = '81%' }) {
      return `
                  <div class="package" style="background:${bg}">
                    <div class="col-sm-8">Package from ${safeValue(client.company_name)}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status">${safeValue(statusText)}</div>
                    <div class="progress-bar" style="width:${progress};"></div>
                    <div class="details">
                      <div>Customer<br/><strong>${safeValue(order.consignee_name)}</strong></div>
                      <div>Weight<br/><strong>${safeValue(order.total_weight ?? order.chargable_weight ?? 'N/A')} ${safeValue(order.weight_unit || '')}</strong></div>
                      <div>Price<br/><strong>₹ ${safeValue(order.Invoice_amount)}</strong></div>
                      <div>Departure<br/><strong>${fmtDate(order.order_date)}</strong></div>
                    </div>
                  </div>
                `;
    }

    function renderStaticCreatedBlock(order, client) {
      return `
                  <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
                    <div class="col-sm-8">Package from ${safeValue(client.company_name)}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status">order created</div>
                    <div class="info-icon" ${detailsBalloonToggler}>
                      <span style="color:#5a99fc;">View Details</span>
                      <div class="details-balloon" style="display: none;">
                        ${closeBalloonBtn}
                        <div>Location<br/><strong>${safeValue(order.warehouse_address)}</strong></div>
                        <div>Order Date<br/><strong>${fmtDate(order.order_date, true)}</strong></div>
                      </div>
                    </div>
                  </div>
                `;
    }

    function renderStaticProcessingBlock(order, client) {
      return `
                  <div class="package" style="background:linear-gradient(135deg, #fdfcfb 0%, #fff6dd 100%)">
                    <div class="col-sm-8">Package from ${safeValue(client.company_name)}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status">order in process</div>
                    <div class="info-icon" ${detailsBalloonToggler}>
                      <span style="color:#5a99fc;">View Details</span>
                      <div class="details-balloon" style="display: none;">
                        ${closeBalloonBtn}
                        <div>Location<br/><strong>${safeValue(order.warehouse_address)}</strong></div>
                        <div>Update Date<br/><strong>${fmtDate(order.order_date, true)}</strong></div>
                      </div>
                    </div>
                  </div>
                `;
    }

    function renderBucketBlock({ title, fromText, order, combinedDetailsHTML, bg }) {
      return `
                  <div class="package" style="background:${bg}">
                    <div class="col-sm-8">${title} ${fromText}</div>
                    <div class="order-id">Order ID ${safeValue(order.order_id)}</div>
                    <div class="status ${title.toLowerCase().includes('transit') ? 'transit' : 'ready'}">${title}</div>
                    <div class="info-icon" ${detailsBalloonToggler}>
                      <span style="color:#5a99fc;">View Details</span>
                      <div class="details-balloon" style="display:none;">
                        ${closeBalloonBtn}
                        ${combinedDetailsHTML}
                      </div>
                    </div>
                  </div>
                `;
    }

    function mountIntoDetailedOrder(html) {
      const container = document.querySelector('.detailedorder');
      if (!container) return;
      container.innerHTML = `
                  <div class="mb-4">
                    <div class="">${html}</div>
                  </div>
                `;
    }

    /* =========================================================
     * DTDC – LTL
     * deliveryStatus[].strAction, strOrigin, strDestination, strActionDate, strActionTime, strVehicleNo, strDriverName
     * =======================================================*/
    function updateDTDCStatus(vendor, deliveryStatus, logoPath, lrNo, order, client) {
      console.log('updateDTDCStatus invoked');

      const last = (deliveryStatus && deliveryStatus.length) ? deliveryStatus[deliveryStatus.length - 1] : null;
      setRightLogo(logoPath);
      setTrackingStatus(last?.strAction || 'In Transit');

      let html = '';
      // Header card
      html += renderPackageHeaderBlock({
        bg: 'linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)',
        client, order, statusText: last?.strAction || 'In Transit'
      });
      // Static blocks
      html += renderStaticCreatedBlock(order, client);
      html += renderStaticProcessingBlock(order, client);

      // Buckets
      const readyToDispatchActions = ['Booked', 'Manifest Prepared'];
      const inTransitActions = ['THC OUT', 'LDS Updation', 'THC Arrived'];

      const processed = new Set();

      const ready = (deliveryStatus || []).filter(s => readyToDispatchActions.includes(s.strAction));
      if (ready.length) {
        const details = ready.map(s => `
                    <div>Status: ${safeValue(s.strAction)}</div>
                    <div>Location: ${safeValue(s.strOrigin)}</div>
                    <div>Updated On: ${fmtDate(s.strActionDate, true)}</div>
                    <div>Updated Time: ${safeValue(s.strActionTime)}</div>
                  `).join('<hr/>');

        html += renderBucketBlock({
          title: 'Ready to Dispatch',
          fromText: `from ${safeValue(ready[0].strOrigin || order.warehouse_address)}`,
          order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)',
          combinedDetailsHTML: details
        });

        ready.forEach(s => processed.add(s.strAction));
      }

      const transit = (deliveryStatus || []).filter(s => inTransitActions.includes(s.strAction));
      if (transit.length) {
        const details = transit.map(s => `
                    <div>Status: ${safeValue(s.strAction)}</div>
                    <div>Origin: ${safeValue(s.strOrigin)}</div>
                    <div>Destination: ${safeValue(s.strDestination)}</div>
                    <div>Updated On: ${fmtDate(s.strActionDate, true)}</div>
                    <div>Updated Time: ${safeValue(s.strActionTime)}</div>
                    ${s.strVehicleNo ? `<div>Vehicle No: ${safeValue(s.strVehicleNo)}</div>` : ''}
                    ${s.strDriverName ? `<div>Driver: ${safeValue(s.strDriverName)}</div>` : ''}
                  `).join('<hr/>');

        html += renderBucketBlock({
          title: 'In Transit',
          fromText: `from ${safeValue(transit[0].strOrigin)}`,
          order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)',
          combinedDetailsHTML: details
        });

        transit.forEach(s => processed.add(s.strAction));
      }

      // Remaining statuses
      (deliveryStatus || []).forEach(s => {
        if (processed.has(s.strAction)) return;
        const details = `
                    <div>Status: ${safeValue(s.strAction)}</div>
                    <div>Origin: ${safeValue(s.strOrigin)}</div>
                    <div>Destination: ${safeValue(s.strDestination)}</div>
                    <div>Updated On: ${fmtDate(s.strActionDate, true)}</div>
                    <div>Updated Time: ${safeValue(s.strActionTime)}</div>
                    ${s.strVehicleNo ? `<div>Vehicle No: ${safeValue(s.strVehicleNo)}</div>` : ''}
                    ${s.strDriverName ? `<div>Driver: ${safeValue(s.strDriverName)}</div>` : ''}
                  `;
        html += renderBucketBlock({
          title: safeValue(s.strAction),
          fromText: `from ${safeValue(s.strOrigin)}`,
          order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)',
          combinedDetailsHTML: details
        });
      });

      mountIntoDetailedOrder(html);
    }

    /* =========================================================
     * DTDC – Standard / B2C Smart Express
     * deliveryStatus[].strAction, strOrigin, strDestination, strActionDate, strActionTime
     * =======================================================*/
    function updateDTDCStatusStd(vendor, deliveryStatus, logoPath, lrNo, order, client) {
      console.log('updateDTDCStatusStd invoked');

      const last = (deliveryStatus && deliveryStatus.length) ? deliveryStatus[deliveryStatus.length - 1] : null;
      setRightLogo(logoPath);
      setTrackingStatus(last?.strAction || 'In Transit');

      let html = '';
      html += renderPackageHeaderBlock({
        bg: 'linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)',
        client, order, statusText: last?.strAction || 'In Transit'
      });
      html += renderStaticCreatedBlock(order, client);
      html += renderStaticProcessingBlock(order, client);

      const readyToDispatchActions = ['Booked', 'Manifest Prepared', 'Picked Up', 'Pickup Reassigned', 'Pickup Scheduled', 'Pickup Awaited'];
      const inTransitActions = ['In Transit', 'LDS Updation', 'THC Arrived', 'Reached At Destination', 'LINEHAUL DELAYED ROAD BLOCK / TRAFFIC JAM'];

      const processed = new Set();

      const ready = (deliveryStatus || []).filter(s => readyToDispatchActions.includes(s.strAction));
      if (ready.length) {
        const details = ready.map(s => `
                    <div>Status: ${safeValue(s.strAction)}</div>
                    <div>Location: ${safeValue(s.strOrigin)}</div>
                    <div>Updated On: ${fmtDate(s.strActionDate, true)}</div>
                    <div>Updated Time: ${String(safeValue(s.strActionTime)).slice(0, 2)}:${String(safeValue(s.strActionTime)).slice(2)}</div>
                  `).join('<hr/>');

        html += renderBucketBlock({
          title: 'Ready to Dispatch',
          fromText: `from ${safeValue(ready[0].strOrigin || order.warehouse_address)}`,
          order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)',
          combinedDetailsHTML: details
        });
        ready.forEach(s => processed.add(s.strAction));
      }

      const transit = (deliveryStatus || []).filter(s => inTransitActions.includes(s.strAction));
      if (transit.length) {
        const details = transit.map(s => `
                    <div>Status: ${safeValue(s.strAction)}</div>
                    <div>Origin: ${safeValue(s.strOrigin)}</div>
                    <div>Destination: ${safeValue(s.strDestination)}</div>
                    <div>Updated On: ${fmtDate(s.strActionDate, true)}</div>
                    <div>Updated Time: ${String(safeValue(s.strActionTime)).slice(0, 2)}:${String(safeValue(s.strActionTime)).slice(2)}</div>
                    ${s.strVehicleNo ? `<div>Vehicle No: ${safeValue(s.strVehicleNo)}</div>` : ''}
                    ${s.strDriverName ? `<div>Driver: ${safeValue(s.strDriverName)}</div>` : ''}
                  `).join('<hr/>');

        html += renderBucketBlock({
          title: 'In Transit',
          fromText: `from ${safeValue(transit[0].strOrigin)}`,
          order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)',
          combinedDetailsHTML: details
        });
        transit.forEach(s => processed.add(s.strAction));
      }

      (deliveryStatus || []).forEach(s => {
        if (processed.has(s.strAction)) return;
        const details = `
                    <div>Status: ${safeValue(s.strAction)}</div>
                    <div>Origin: ${safeValue(s.strOrigin)}</div>
                    <div>Destination: ${safeValue(s.strDestination)}</div>
                    <div>Updated On: ${fmtDate(s.strActionDate, true)}</div>
                    <div>Updated Time: ${String(safeValue(s.strActionTime)).slice(0, 2)}:${String(safeValue(s.strActionTime)).slice(2)}</div>
                    ${s.strVehicleNo ? `<div>Vehicle No: ${safeValue(s.strVehicleNo)}</div>` : ''}
                    ${s.strDriverName ? `<div>Driver: ${safeValue(s.strDriverName)}</div>` : ''}
                  `;
        html += renderBucketBlock({
          title: safeValue(s.strAction),
          fromText: `from ${safeValue(s.strOrigin)}`,
          order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)',
          combinedDetailsHTML: details
        });
      });

      mountIntoDetailedOrder(html);
    }

    /* =========================================================
     * Delhivery – LTL
     * deliveryStatus[].status, location, manifested_date, scan_remark
     * =======================================================*/
    function updateDeliveryStatus(vendor, deliveryStatus, logoPath, lrNo, order, client) {
      console.log('updateDeliveryStatus (Delhivery LTL) invoked');

      const last = (deliveryStatus && deliveryStatus.length) ? deliveryStatus[deliveryStatus.length - 1] : null;
      setRightLogo(logoPath);
      setTrackingStatus(last?.status || 'In Transit');

      let html = '';
      html += renderPackageHeaderBlock({
        bg: 'linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)',
        client, order, statusText: last?.status || 'In Transit'
      });
      html += renderStaticCreatedBlock(order, client);
      html += renderStaticProcessingBlock(order, client);

      const readyToDispatchScans = ['MANIFESTED'];
      const inTransitScans = ['LEFT_ORIGIN', 'REACH_DESTINATION'];

      const processed = new Set();

      const ready = (deliveryStatus || []).filter(s => readyToDispatchScans.includes(s.status));
      if (ready.length) {
        const details = ready.map(s => `
                    <div>Status: ${safeValue(s.status)}</div>
                    <div>Location: ${safeValue(s.location)}</div>
                    <div>Manifested Date: ${fmtDate(s.manifested_date, true)}</div>
                    <div>Scan Remark: ${safeValue(s.scan_remark)}</div>
                  `).join('<hr/>');

        html += renderBucketBlock({
          title: 'Ready to Dispatch',
          fromText: `from ${safeValue(ready[0].location || order.warehouse_address)}`,
          order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)',
          combinedDetailsHTML: details
        });
        ready.forEach(s => processed.add(s.status));
      }

      const transit = (deliveryStatus || []).filter(s => inTransitScans.includes(s.status));
      if (transit.length) {
        const details = transit.map(s => `
                    <div>Status: ${safeValue(s.status)}</div>
                    <div>Location: ${safeValue(s.location)}</div>
                    <div>Manifested Date: ${fmtDate(s.manifested_date, true)}</div>
                    <div>Scan Remark: ${safeValue(s.scan_remark)}</div>
                  `).join('<hr/>');

        html += renderBucketBlock({
          title: 'In Transit',
          fromText: `from ${safeValue(transit[0].location)}`,
          order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)',
          combinedDetailsHTML: details
        });
        transit.forEach(s => processed.add(s.status));
      }

      (deliveryStatus || []).forEach(s => {
        if (processed.has(s.status)) return;
        const details = `
                    <div>Status: ${safeValue(s.status)}</div>
                    <div>Location: ${safeValue(s.location)}</div>
                    <div>Manifested Date: ${fmtDate(s.manifested_date, true)}</div>
                    <div>Scan Remark: ${safeValue(s.scan_remark)}</div>
                    <div>Estimated Delivery: ${fmtDate(s.estimated_date, true)}</div>
                    <div>Promised Delivery: ${fmtDate(s.promised_delivery_date, true)}</div>
                    <div>Pickup Date: ${fmtDate(s.pickup_date, true)}</div>
                    <div>Delivered Date: ${fmtDate(s.delivered_date, true)}</div>
                  `;
        html += renderBucketBlock({
          title: safeValue(s.status),
          fromText: `from ${safeValue(s.location)}`,
          order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)',
          combinedDetailsHTML: details
        });
      });

      mountIntoDetailedOrder(html);
    }

    /* =========================================================
     * Delhivery – Standard
     * deliveryStatus[].scan, scanned_location, instructions, scan_datetime (and sometimes status_datetime)
     * =======================================================*/
    function updateDeliveryStdStatus(vendor, deliveryStatus, logoPath, lrNo, order, client) {
      console.log('updateDeliveryStdStatus (Delhivery Standard) invoked');

      const last = (deliveryStatus && deliveryStatus.length) ? deliveryStatus[deliveryStatus.length - 1] : null;
      setRightLogo(logoPath);
      setTrackingStatus(last?.scan || 'In Transit');

      let html = '';
      html += renderPackageHeaderBlock({
        bg: 'linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)',
        client, order, statusText: last?.scan || 'In Transit'
      });
      html += renderStaticCreatedBlock(order, client);
      html += renderStaticProcessingBlock(order, client);

      const readyToDispatchScans = ['Manifested'];
      const inTransitScans = ['In Transit', 'Pending', 'Dispatched'];

      const processed = new Set();

      const ready = (deliveryStatus || []).filter(s => readyToDispatchScans.includes(s.scan));
      if (ready.length) {
        const details = ready.map(s => `
                    <div>Status: ${safeValue(s.scan)}</div>
                    <div>Location: ${safeValue(s.scanned_location)}</div>
                    <div>Scan Remark: ${safeValue(s.instructions)}</div>
                    <div>Scan Date: ${fmtDate(s.scan_datetime || s.status_datetime, true)}</div>
                  `).join('<hr/>');

        html += renderBucketBlock({
          title: 'Ready to Dispatch',
          fromText: `from ${safeValue(ready[0].scanned_location || order.warehouse_address)}`,
          order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)',
          combinedDetailsHTML: details
        });
        ready.forEach(s => processed.add(s.scan));
      }

      const transit = (deliveryStatus || []).filter(s => inTransitScans.includes(s.scan));
      if (transit.length) {
        const details = transit.map(s => `
                    <div>Status: ${safeValue(s.scan)}</div>
                    <div>Location: ${safeValue(s.scanned_location)}</div>
                    <div>Scan Remark: ${safeValue(s.instructions)}</div>
                    <div>Scan Date: ${fmtDate(s.scan_datetime || s.status_datetime, true)}</div>
                  `).join('<hr/>');

        html += renderBucketBlock({
          title: 'In Transit',
          fromText: `from ${safeValue(transit[0].scanned_location)}`,
          order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)',
          combinedDetailsHTML: details
        });
        transit.forEach(s => processed.add(s.scan));
      }

      (deliveryStatus || []).forEach(s => {
        if (processed.has(s.scan)) return;
        const details = `
                    <div>Status: ${safeValue(s.scan)}</div>
                    <div>Location: ${safeValue(s.scanned_location)}</div>
                    <div>Scan Remark: ${safeValue(s.instructions)}</div>
                    <div>Date: ${fmtDate(s.scan_datetime || s.status_datetime, true)}</div>
                  `;
        html += renderBucketBlock({
          title: safeValue(s.scan),
          fromText: `from ${safeValue(s.scanned_location)}`,
          order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)',
          combinedDetailsHTML: details
        });
      });

      mountIntoDetailedOrder(html);
    }

    /* =========================================================
     * ExpressBees – Standard
     * deliveryStatus[].message, location, event_time
     * =======================================================*/
    function updateExpressBeesStatus(vendor, deliveryStatus, logoPath, lrNo, order, client) {
      console.log('updateExpressBeesStatus invoked');

      const last = (deliveryStatus && deliveryStatus.length) ? deliveryStatus[deliveryStatus.length - 1] : null;
      setRightLogo(logoPath);
      setTrackingStatus(last?.message || 'In Transit');

      let html = '';
      // Use first "In Transit" time as departure, else order date
      const firstTransit = (deliveryStatus || []).find(s => s.message === 'In Transit');

      html += renderPackageHeaderBlock({
        bg: 'linear-gradient(134deg, #fdfcfb 0%, #c9edff 100%)',
        client, order,
        statusText: last?.message || 'In Transit',
        progress: '81%'
      }).replace(
        /(<div>Departure<br\/><strong>)(.*?)(<\/strong>)/,
        `$1${fmtDate(firstTransit?.event_time || order.order_date)}$3`
      );

      html += renderStaticCreatedBlock(order, client);
      html += renderStaticProcessingBlock(order, client);

      const readyToDispatchMessages = ['Data Received', 'Pickup Not Done'];
      const inTransitMessages = ['Picked', 'Out For Pickup', 'Pickup Done'];

      const processed = new Set();

      const ready = (deliveryStatus || []).filter(s => readyToDispatchMessages.includes(s.message));
      if (ready.length) {
        const details = ready.map(s => `
                    <div>Status: ${safeValue(s.message)}</div>
                    <div>Location: ${safeValue(s.location)}</div>
                    <div>Event Time: ${fmtDate(s.event_time, true)}</div>
                  `).join('<hr/>');

        html += renderBucketBlock({
          title: 'Ready to Dispatch',
          fromText: `from ${safeValue(ready[0].location || order.warehouse_address)}`,
          order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #f7f78a6e 100%)',
          combinedDetailsHTML: details
        });
        ready.forEach(s => processed.add(s.message));
      }

      const transit = (deliveryStatus || []).filter(s => inTransitMessages.includes(s.message));
      if (transit.length) {
        const details = transit.map(s => `
                    <div>Status: ${safeValue(s.message)}</div>
                    <div>Location: ${safeValue(s.location)}</div>
                    <div>Event Time: ${fmtDate(s.event_time, true)}</div>
                  `).join('<hr/>');

        html += renderBucketBlock({
          title: 'Pickup details',
          fromText: `from ${safeValue(transit[0].location)}`,
          order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #fff2fdd9 100%)',
          combinedDetailsHTML: details
        });
        transit.forEach(s => processed.add(s.message));
      }

      (deliveryStatus || []).forEach(s => {
        if (processed.has(s.message)) return;
        const details = `
                    <div>Status: ${safeValue(s.message)}</div>
                    <div>Location: ${safeValue(s.location)}</div>
                    <div>Event Time: ${fmtDate(s.event_time, true)}</div>
                  `;
        html += renderBucketBlock({
          title: safeValue(s.message),
          fromText: `from ${safeValue(s.location)}`,
          order, bg: 'linear-gradient(135deg, #fdfcfb 0%, #ddf7cd6e 100%)',
          combinedDetailsHTML: details
        });
      });

      mountIntoDetailedOrder(html);
    }

    /* =========================================================
     * Balloons (info popovers)
     * =======================================================*/
    function toggleBalloon(item) {
      // Close others
      document.querySelectorAll('.info-balloon').forEach(b => { b.style.display = 'none'; });
      // Toggle this one
      const balloon = item.querySelector('.info-balloon');
      if (balloon) balloon.style.display = (balloon.style.display === 'none' || !balloon.style.display) ? 'block' : 'none';
    }

    function closeBalloonOutside(event) {
      document.querySelectorAll('.info-balloon').forEach(balloon => {
        if (!balloon.contains(event.target) && !event.target.closest('.progressList_item')) {
          balloon.style.display = 'none';
        }
      });
    }
    document.addEventListener('click', closeBalloonOutside);

    function closeBalloon(event, element) {
      event.stopPropagation();
      const balloon = element.closest('.info-balloon');
      if (balloon) balloon.style.display = 'none';
    }
  </script>


  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

 


  <!-- DataTable CSS removed - using custom pagination -->

  <script>
    // Handle submenu toggle
    document.querySelectorAll('.dropdown-submenu > a').forEach(function (element) {
      element.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();

        // Close all open submenus
        var openSubmenus = document.querySelectorAll('.dropdown-submenu .dropdown-menu');
        openSubmenus.forEach(function (submenu) {
          submenu.style.display = 'none';
        });

        // Open the current submenu
        var currentSubmenu = this.nextElementSibling;
        currentSubmenu.style.display = 'block';
      });
    });
  </script>

  <!-- cancel lr script -->
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // Add event listener to all "Cancel LR/AWB" buttons
      document.querySelectorAll('.cancel-lr').forEach(button => {
        button.addEventListener('click', async function (event) {
          event.preventDefault(); // Prevent default link behavior

          const courier_partner = this.getAttribute('data-courier'); // Get client type
          const lrNumber = this.getAttribute('data-awb-number');
          const po_number = this.getAttribute("data-poid")
          const client_id = this.getAttribute("data-client-id")
          console.log("client_id: " + client_id)
          if (!courier_partner || !lrNumber) {
            console.error('Client type or LR number is missing.');
            return;
          }

          // Check for DTDC LTL services
          if (courier_partner === 'DTDC/LTL-surface' || courier_partner === 'DTDC/ltl') {
            Swal.fire({
              title: 'Cannot Cancel',
              text: 'DTDC LTL LR cannot be cancelled',
              icon: 'error',
              confirmButtonText: 'OK'
            });
            return;
          }

          // Show confirmation dialog before proceeding
          const result = await Swal.fire({
            title: 'Confirm Cancellation',
            text: `Do you really want to cancel LR ${lrNumber}?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, cancel it!',
            cancelButtonText: 'No, keep it'
          });

          // If user confirms, proceed with cancellation
          if (result.isConfirmed) {
            try {
              let response;
              let apiEndpoint = '';

              // Determine which API endpoint to use based on courier_partner
              if (courier_partner === 'Delhivery/Standard-Surface' ||
                courier_partner === 'Delhivery/standard-surface' ||
                courier_partner === 'Delhivery/Standard-Air' ||
                courier_partner === 'Delhivery/standard-air') {
                apiEndpoint = '/api/cancel-delhivery-standard';
              } else if (courier_partner === 'Delhivery/LTL-surface') {
                apiEndpoint = '/api/cancel-delhivery-ltl';
              } else if (courier_partner === 'DTDC/Standard-Surface' || courier_partner === 'DTDC/Standard-Air') {
                apiEndpoint = '/api/cancel-dtdc-standard';
              } else if (courier_partner === 'expressbees/Standard-Surface' ||
                courier_partner === 'expressbees/Standard-Air') {
                apiEndpoint = '/api/cancel-expressbees-standard';
              } else {
                console.error('Unsupported client type:', courier_partner);
                return;
              }

              // Make the API call
              response = await axios.post(apiEndpoint, { lrNumber, po_number, client_id });

              // Handle success response
              if ((response.data.status === true) || (response.data.success)) {
                Swal.fire({
                  title: 'Success!',
                  text: `LR ${lrNumber} cancelled successfully for ${courier_partner}.`,
                  icon: 'success',
                  confirmButtonText: 'OK'
                }).then(() => {
                  window.location.reload();
                });
              } else {
                Swal.fire({
                  title: 'Failure!',
                  text: `Failed to cancel LR ${lrNumber} for ${courier_partner}.`,
                  icon: 'error',
                  confirmButtonText: 'Try Again'
                });
              }
            } catch (error) {
              console.error('Error cancelling LR:', error);
              Swal.fire({
                title: 'Error!',
                text: 'An error occurred while cancelling the LR. Please try again.',
                icon: 'error',
                confirmButtonText: 'Close'
              });
            }
          }
        });
      });
    });
  </script>
  <!-- Add this before closing </body> tag -->
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAUn2MQSdLGnXLCK3smc1Y3lFgc76fwwh8&callback=initMap"
    async defer></script>
  <!-- print label script -->
  <!-- <script>
    document.querySelectorAll('.print-label').forEach(function (element) {
      element.addEventListener('click', async function (e) {
        e.preventDefault();

        // Get data from attributes
        const courier = this.getAttribute('data-courier');
        const clientId = this.getAttribute('client-id');
        const aggrigatorId = this.getAttribute('aggrigator-id');
        const awbNumber = this.getAttribute('data-awb-number');
        const poId = this.getAttribute('data-poid');
        const labelSize = this.getAttribute('data-size');

        let apiEndpoint = '/get-shipping-label';

        // Use dedicated endpoint for Delhivery/LTL-surface
        if (courier === 'Delhivery/LTL-surface') {
          apiEndpoint = '/api/shipping-label/delhivery-ltl';
        }

        try {
          Swal.fire({
            title: 'Generating Label...',
            text: 'Please wait while we generate your shipping label',
            allowOutsideClick: false,
            didOpen: () => {
              Swal.showLoading();
            }
          });

          const response = await axios.get(apiEndpoint, {
            params: {
              courier,
              awbNumber,
              poId,
              labelSize,
              clientId,
              aggrigatorId
            },
            responseType: 'blob'
          });

          // Process PDF blob and download
          const blob = new Blob([response.data], { type: 'application/pdf' });
          const url = window.URL.createObjectURL(blob);

          const link = document.createElement('a');
          link.href = url;
          link.download = `shipping-label-${awbNumber}-${labelSize}.pdf`;
          link.style.display = 'none';
          document.body.appendChild(link);

          link.click();

          setTimeout(() => {
            document.body.removeChild(link);
            window.URL.revokeObjectURL(url);
          }, 100);

          Swal.close();
        } catch (error) {
          console.error('Error fetching label:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to generate shipping label. Please try again.'
          });
        }
      });
    });
  </script> -->

  <script>
    /* =========================================================
     * Google Maps — Tracking Route Renderer (Refined)
     * =======================================================*/

    let map;
    let directionsService;
    let directionsRenderer;
    let markers = [];
    let geocoder;

    // Small in-memory cache to avoid repeated geocoding
    const geocodeCache = new Map();

    // Graceful DOM setter
    function setTextById(id, value) {
      const el = document.getElementById(id);
      if (el) el.textContent = value;
    }

    // Safe numeric parse
    const toInt = (v, fallback = 0) => {
      const n = parseInt(v, 10);
      return Number.isFinite(n) ? n : fallback;
    };

    // Normalize a location string (for deduping and comparisons)
    const normLoc = (s) => String(s || '')
      .trim()
      .replace(/\s+/g, ' ')
      .replace(/[_(),]/g, ' ')
      .toLowerCase();

    // Promise-based geocode with caching and a tiny backoff
    function geocodeAddress(address, regionSuffix = 'India', backoffMs = 120) {
      const raw = String(address || '').trim();
      const q = raw ? `${raw}, ${regionSuffix}` : '';

      if (!q) return Promise.reject(new Error('Empty address'));

      const key = normLoc(q);
      if (geocodeCache.has(key)) {
        return Promise.resolve(geocodeCache.get(key));
      }

      return new Promise((resolve, reject) => {
        geocoder.geocode({ address: q }, (results, status) => {
          if (status === 'OK' && results && results[0]) {
            geocodeCache.set(key, results);
            resolve(results);
          } else if (status === 'OVER_QUERY_LIMIT') {
            // Simple backoff
            setTimeout(() => {
              geocoder.geocode({ address: q }, (results2, status2) => {
                if (status2 === 'OK' && results2 && results2[0]) {
                  geocodeCache.set(key, results2);
                  resolve(results2);
                } else {
                  reject(new Error(`Geocode failed: ${status2}`));
                }
              });
            }, backoffMs);
          } else {
            reject(new Error(`Geocode failed: ${status}`));
          }
        });
      });
    }

    // Clear all markers from map
    function clearMarkers() {
      markers.forEach(m => m.setMap && m.setMap(null));
      markers = [];
    }

    // Create a marker with a simple info window
    function createMarker(position, type, title, statusHtml) {
      if (!map || !position) return null;

      let iconUrl;
      switch (type) {
        case 'origin':
          iconUrl = 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png';
          break;
        case 'intermediate':
          iconUrl = 'https://maps.google.com/mapfiles/ms/icons/yellow-dot.png';
          break;
        case 'current':
          iconUrl = 'https://maps.google.com/mapfiles/ms/icons/green-dot.png';
          break;
        case 'destination':
          iconUrl = 'https://maps.google.com/mapfiles/ms/icons/red-dot.png';
          break;
        default:
          iconUrl = 'https://maps.google.com/mapfiles/ms/icons/grey-dot.png';
      }

      const marker = new google.maps.Marker({
        position,
        map,
        icon: {
          url: iconUrl,
          scaledSize: new google.maps.Size(40, 40),
        },
        title: title || '',
        animation: google.maps.Animation.DROP,
      });

      const infoWindow = new google.maps.InfoWindow({
        content: `
        <div style="padding:10px; max-width:220px">
          <strong>${title || ''}</strong>
          ${statusHtml ? `<br><small>${statusHtml}</small>` : ''}
        </div>
      `,
      });

      marker.addListener('click', () => infoWindow.open(map, marker));
      markers.push(marker);
      return marker;
    }

    // Initialize map (call this once your Maps script is loaded)
    function initMap() {
      if (!window.google || !google.maps) {
        console.error('Google Maps JS API not loaded.');
        return;
      }

      geocoder = new google.maps.Geocoder();
      directionsService = new google.maps.DirectionsService();
      directionsRenderer = new google.maps.DirectionsRenderer({
        suppressMarkers: true,
        polylineOptions: {
          strokeColor: '#0000FF',
          strokeWeight: 4,
        },
      });

      const styles = [{ stylers: [{ saturation: -80 }, { lightness: 20 }] }];

      map = new google.maps.Map(document.getElementById('map'), {
        zoom: 5, // sensible default for India-wide routing
        center: { lat: 20.5937, lng: 78.9629 },
        mapTypeControl: false,
        fullscreenControl: true,
        streetViewControl: false,
        styles,
      });

      directionsRenderer.setMap(map);
    }

    /**
     * Calculate & display a multi-stop route.
     * @param {Array<{location:string,status?:string,date?:string}>} deliveryStatus
     * @param {string} finalDestination
     * @param {number|string|null} eta - total promised duration (days)
     */
    async function calculateAndDisplayRoute(deliveryStatus, finalDestination, eta) {
      try {
        if (!Array.isArray(deliveryStatus) || deliveryStatus.length === 0) {
          console.warn('No deliveryStatus provided; skipping map route.');
          return;
        }
        if (!map || !directionsService || !directionsRenderer) {
          console.warn('Map/Directions not initialized. Call initMap() first.');
          return;
        }

        clearMarkers();

        const bounds = new google.maps.LatLngBounds();
        const totalDurationInDays = Math.max(1, toInt(eta, 5)); // fallback 5 days

        // 1) Normalize & de-duplicate locations while preserving order
        const seen = new Set();
        const unique = [];
        for (const s of deliveryStatus) {
          const loc = (s && s.location) ? String(s.location).split('(')[0] : '';
          const key = normLoc(loc);
          if (loc && !seen.has(key)) {
            seen.add(key);
            unique.push({
              location: loc,
              status: s?.status || '',
              date: s?.date || '',
            });
          }
        }
        if (unique.length === 0) {
          console.warn('No valid locations in deliveryStatus.');
          return;
        }

        // 2) Compute elapsed days from first entry
        const firstDate = unique[0]?.date ? new Date(unique[0].date) : null;
        const now = new Date();
        const elapsedDays = firstDate && !isNaN(firstDate) ? Math.max(0,
          Math.floor((now - firstDate) / (1000 * 60 * 60 * 24))
        ) : 0;

        // 3) Geocode all intermediate points
        const geocodedLocations = [];
        for (let i = 0; i < unique.length; i++) {
          const u = unique[i];
          try {
            const results = await geocodeAddress(u.location, 'India');
            const latLng = results[0].geometry.location;

            const type =
              i === 0 ? 'origin' :
                i === unique.length - 1 ? 'current' :
                  'intermediate';

            createMarker(
              latLng,
              type,
              u.location,
              `Status: ${u.status || '—'}<br>Date: ${u.date ? new Date(u.date).toLocaleString() : '—'}`
            );

            bounds.extend(latLng);
            geocodedLocations.push(latLng);
          } catch (e) {
            console.error(`Geocode failed for "${u.location}":`, e);
          }
        }

        // 4) Destination handling (only if different)
        const lastLocStr = unique[unique.length - 1]?.location || '';
        if (finalDestination && normLoc(finalDestination) !== normLoc(lastLocStr)) {
          try {
            const results = await geocodeAddress(finalDestination, 'India');
            const latLng = results[0].geometry.location;

            createMarker(latLng, 'destination', finalDestination, 'Final Destination');
            bounds.extend(latLng);
            geocodedLocations.push(latLng);
          } catch (e) {
            console.error(`Geocode failed for destination "${finalDestination}":`, e);
          }
        }

        // 5) Draw directions if we have at least two points
        if (geocodedLocations.length >= 2) {
          const waypoints = geocodedLocations
            .slice(1, -1)
            .map(loc => ({ location: loc, stopover: true }));

          const req = {
            origin: geocodedLocations[0],
            destination: geocodedLocations[geocodedLocations.length - 1],
            waypoints,
            optimizeWaypoints: false, // keep historical order
            travelMode: google.maps.TravelMode.DRIVING,
          };

          const routeResult = await new Promise((resolve, reject) => {
            directionsService.route(req, (result, status) => {
              if (status === 'OK') resolve(result);
              else reject(new Error(`Directions failed: ${status}`));
            });
          });

          directionsRenderer.setDirections(routeResult);

          // 6) Compute distances
          const legs = routeResult.routes?.[0]?.legs || [];
          const totalDistanceM = legs.reduce((acc, leg) => acc + (leg.distance?.value || 0), 0);
          const remainingDistanceM = legs.length ? (legs[legs.length - 1].distance?.value || 0) : 0;
          const completedDistanceM = Math.max(0, totalDistanceM - remainingDistanceM);
          const progressPct = totalDistanceM ? ((completedDistanceM / totalDistanceM) * 100) : 0;

          // 7) Compute remaining time from ETA vs elapsed
          const remainingDays = Math.max(0, totalDurationInDays - elapsedDays);
          const durationText = remainingDays === 0
            ? 'Delivery overdue'
            : remainingDays === 1
              ? '1 day remaining'
              : `${remainingDays} days remaining`;

          // 8) Fit map
          if (!bounds.isEmpty()) map.fitBounds(bounds);

          // 9) Update UI
          setTextById('total_distance', `${(totalDistanceM / 1000).toFixed(1)} km`);
          setTextById('distance', `${(remainingDistanceM / 1000).toFixed(1)} km`);
          setTextById('duration', durationText);
          setTextById(
            'map_info',
            `Total: ${(totalDistanceM / 1000).toFixed(1)}km | ` +
            `Remaining: ${(remainingDistanceM / 1000).toFixed(1)}km | ` +
            `Progress: ${progressPct.toFixed(1)}% | ` +
            `ETA: ${durationText}`
          );
        } else {
          // No route lines possible (only one valid point)
          if (!bounds.isEmpty()) map.fitBounds(bounds);
          setTextById('map_info', 'Insufficient points to draw a route.');
        }
      } catch (err) {
        console.error('Error in calculateAndDisplayRoute:', err);
      }
    }

    // Expose init & renderer to global (if needed elsewhere)
    window.initMap = initMap;
    window.calculateAndDisplayRoute = calculateAndDisplayRoute;
  </script>




  <!-- SweetAlert -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
    // =========================
    // Custom Pagination System
    // =========================

    let currentPage = 1;
    let itemsPerPage = 10;
    let allOrders = [];
    let filteredOrders = [];
    let activeFilters = {
      clientId: null,
      payment: null,
      date: { min: null, max: null },
      destinationZone: null,
      taggedApi: null
    };

    // Helper to get element by id
    const byId = (id) => document.getElementById(id);

    // --- Pagination Rendering ---
    function renderPagination(totalItems) {
      const pageCount = Math.ceil(totalItems / itemsPerPage);
      const pagination = document.getElementById("pagination");
      pagination.innerHTML = '';

      if (pageCount <= 1) return;

      let pageLinks = [];

      // Previous button
      pageLinks.push(`
        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
          <a class="page-link" onclick="changePage(${currentPage - 1})" ${currentPage === 1 ? 'style="pointer-events: none;"' : ''}>
            <i class="fas fa-chevron-left"></i>
          </a>
        </li>
      `);

      // First page
      if (currentPage > 3) {
        pageLinks.push(`<li class="page-item"><a class="page-link" onclick="changePage(1)">1</a></li>`);
        if (currentPage > 4) {
          pageLinks.push(`<li class="page-item disabled"><span class="page-link">...</span></li>`);
        }
      }

      // Current page range
      for (let i = Math.max(1, currentPage - 2); i <= Math.min(pageCount, currentPage + 2); i++) {
        pageLinks.push(`<li class="page-item ${i === currentPage ? 'active' : ''}"><a class="page-link" onclick="changePage(${i})">${i}</a></li>`);
      }

      // Last page
      if (currentPage < pageCount - 2) {
        if (currentPage < pageCount - 3) {
          pageLinks.push(`<li class="page-item disabled"><span class="page-link">...</span></li>`);
        }
        pageLinks.push(`<li class="page-item"><a class="page-link" onclick="changePage(${pageCount})">${pageCount}</a></li>`);
      }

      // Next button
      pageLinks.push(`
        <li class="page-item ${currentPage === pageCount ? 'disabled' : ''}">
          <a class="page-link" onclick="changePage(${currentPage + 1})" ${currentPage === pageCount ? 'style="pointer-events: none;"' : ''}>
            <i class="fas fa-chevron-right"></i>
          </a>
        </li>
      `);

      pagination.innerHTML = pageLinks.join('');
    }

    function changePage(page) {
      const totalPages = Math.ceil(filteredOrders.length / itemsPerPage) || 1;
      if (page < 1 || page > totalPages) return;
      currentPage = page;
      displayOrders();
      renderPagination(filteredOrders.length);
      if (window.selectAllCheckbox) {
        window.selectAllCheckbox.checked = false;
        window.selectAllCheckbox.indeterminate = false;
      }
      const ordersContainer = byId('ordersContainer');
      if (ordersContainer) ordersContainer.scrollIntoView({ behavior: 'smooth' });
    }

    function changeItemsPerPage(value) {
      itemsPerPage = parseInt(value);
      currentPage = 1;
      displayOrders();
      renderPagination(filteredOrders.length);
    }

    function updateEntriesInfo(start, end, total) {
      document.getElementById('showingStart').textContent = start;
      document.getElementById('showingEnd').textContent = end;
      document.getElementById('totalEntries').textContent = total;
    }

    // --- Display Orders ---
    function displayOrders() {
      const container = byId('ordersContainer');
      if (!container) return;

      // Hide all cards first
      const allCards = document.querySelectorAll('.order-card');
      allCards.forEach(card => card.style.display = 'none');

      // Show only cards for current page
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = Math.min(startIndex + itemsPerPage, filteredOrders.length);

      // Remove "no results" message if exists
      const noResultsDiv = byId('no-results-message');
      if (noResultsDiv) noResultsDiv.remove();

      if (filteredOrders.length === 0) {
        // Show "no results" message
        const messageDiv = document.createElement('div');
        messageDiv.id = 'no-results-message';
        messageDiv.className = 'text-center py-5';
        messageDiv.innerHTML = `
          <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
          <h5 class="text-muted">No orders found</h5>
          <p class="text-muted">Try adjusting your filters or search criteria</p>
        `;
        container.appendChild(messageDiv);
        return;
      }

      for (let i = startIndex; i < endIndex; i++) {
        const order = filteredOrders[i];
        if (order && order._card) {
          order._card.style.display = 'block';
        }
      }

      // Update entries info and pagination
      updateEntriesInfo(startIndex + 1, Math.min(startIndex + (endIndex - startIndex), filteredOrders.length), filteredOrders.length);
      renderPagination(filteredOrders.length);
    }

    // --- Filter & Search ---
    function applyFilters() {
      console.log('applyFilters called with activeFilters:', activeFilters);
      
      // Debug all unique payment mode values in the dataset
      const uniquePaymentModes = [...new Set(allOrders.map(o => o.payment_mode))].sort();
      console.log('All unique payment_mode values in dataset:', uniquePaymentModes);
      
      // Debug all unique tagged API values in the dataset
      const uniqueTaggedApis = [...new Set(allOrders.map(o => o.tagged_api))].sort();
      console.log('All unique tagged_api values in dataset:', uniqueTaggedApis);
      
      filteredOrders = allOrders.filter(order => {
        if (activeFilters.clientId && order.client_id != activeFilters.clientId) return false;
        if (activeFilters.payment && String(order.payment_mode).toLowerCase() !== String(activeFilters.payment).toLowerCase()) {
          console.log('Payment mode filter check failed:', { 
            filterPaymentMode: activeFilters.payment, 
            orderPaymentMode: order.payment_mode, 
            filterType: typeof activeFilters.payment, 
            orderType: typeof order.payment_mode,
            match: String(order.payment_mode).toLowerCase() === String(activeFilters.payment).toLowerCase()
          });
          return false;
        }
        if (activeFilters.date.min || activeFilters.date.max) {
          const orderDate = parseDisplayDate(order.created_at);
          if (!orderDate) return false;
          if (activeFilters.date.min && orderDate < activeFilters.date.min) return false;
          if (activeFilters.date.max && orderDate > activeFilters.date.max) return false;
        }
        if (activeFilters.destinationZone && order.destination_zone !== activeFilters.destinationZone) return false;
        if (activeFilters.taggedApi && String(order.tagged_api).toUpperCase() !== String(activeFilters.taggedApi).toUpperCase()) {
          console.log('Tagged API filter check failed:', { 
            filterTaggedApi: activeFilters.taggedApi, 
            orderTaggedApi: order.tagged_api, 
            filterType: typeof activeFilters.taggedApi, 
            orderType: typeof order.tagged_api,
            match: String(order.tagged_api).toUpperCase() === String(activeFilters.taggedApi).toUpperCase()
          });
          return false;
        }
        return true;
      });
      currentPage = 1;
      displayOrders();
      renderPagination(filteredOrders.length);
    }

    function performSearch(searchTerm) {
      if (!searchTerm.trim()) {
        filteredOrders = allOrders.slice();
      } else {
        const term = searchTerm.toLowerCase();
        filteredOrders = allOrders.filter(order => {
          return (
            (order.lr_no || '').toLowerCase().includes(term) ||
            (order.order_id || '').toLowerCase().includes(term) ||
            (order.company_name || '').toLowerCase().includes(term) ||
            (order.consignee_first_name || '').toLowerCase().includes(term) ||
            (order.consignee_last_name || '').toLowerCase().includes(term) ||
            (order.consignee_city || '').toLowerCase().includes(term)
          );
        });
      }
      currentPage = 1;
      displayOrders();
      renderPagination(filteredOrders.length);
    }

    // --- Date Parsing Helper ---
    function parseDisplayDate(str) {
      if (!str) return null;
      const d = new Date(str);
      if (!isNaN(d)) return d;
      // fallback: try to parse "dd MMM, yyyy" etc.
      const m = str.match(/(\d{1,2})\s+([A-Za-z]{3,})[,\s]+(\d{4})/);
      if (m) {
        const day = parseInt(m[1], 10);
        const month = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"].indexOf(m[2]);
        const year = parseInt(m[3], 10);
        if (month >= 0) return new Date(year, month, day);
      }
      return null;
    }

    // --- Filter Indicator UI ---
    function ensureIndicatorsContainer() {
      if ($('.filter-indicators').length === 0) {
        const html = `<div class="filter-indicators d-flex flex-wrap mx-4 mb-3"></div>`;
        const $filterRow = $('.filter, .row.filter, .filter-bar').first();
        if ($filterRow.length) {
          $filterRow.after(html);
        } else {
          $('body').prepend(html);
        }
      }
    }
    function showActiveFilter(type, valueText) {
      ensureIndicatorsContainer();
      let label;
      switch(type) {
        case 'client': label = 'Client'; break;
        case 'payment': label = 'Payment'; break;
        case 'date': label = 'Date'; break;
        case 'destinationZone': label = 'Destination Zone'; break;
        case 'taggedApi': label = 'Courier'; break;
        default: label = type.charAt(0).toUpperCase() + type.slice(1);
      }
      const id = `active-filter-${type}`;
      const existing = $(`#${id}`);
      const content = `
        ${label}: ${valueText}
        <button type="button" class="btn-close btn-close-white ms-2" aria-label="Close"
          onclick="clearFilter('${type}')"></button>
      `;
      if (existing.length) {
        existing.html(content);
      } else {
        $('.filter-indicators').append(
          `<span id="${id}" class="badge bg-primary me-2 mb-2">${content}</span>`
        );
      }
    }
    function removeIndicator(type) {
      $(`#active-filter-${type}`).remove();
    }

    // --- Populate Dropdowns ---
    function populateClientFilter() {
      const $select = $('#clientSelect');
      
      $select.empty().append('<option value="">All Clients</option>');
      
      const clientMap = new Map();
      allOrders.forEach(order => {
        if (order.client_id && order.company_name && !clientMap.has(order.client_id)) {
          clientMap.set(order.client_id, order.company_name);
          $select.append(`<option value="${order.client_id}">${order.company_name}</option>`);
        }
      });
    }
    function populatePaymentFilter() {
      const $select = $('#paymentModeSelect');
      
      $select.empty().append('<option value="">All Payment Modes</option>');
      
      const modes = new Set();
      allOrders.forEach(order => {
        if (order.payment_mode && !modes.has(order.payment_mode)) {
          modes.add(order.payment_mode);
          $select.append(`<option value="${order.payment_mode}">${order.payment_mode}</option>`);
        }
      });
    }

    // --- Utilities ---
    function formatDateForInput(date) {
      const y = date.getFullYear();
      const m = String(date.getMonth() + 1).padStart(2, '0');
      const d = String(date.getDate()).padStart(2, '0');
      return `${y}-${m}-${d}`;
    }

    // --- Clear Filter ---
    function clearFilter(type) {
      if (type === 'client') {
        activeFilters.clientId = null;
        $('#clientSelect').val('');
      } else if (type === 'payment') {
        activeFilters.payment = null;
        $('#paymentModeSelect').val('');
      } else if (type === 'date') {
        activeFilters.date.min = null;
        activeFilters.date.max = null;
        $('#min-date').val('');
        $('#max-date').val('');
      } else if (type === 'destinationZone') {
        activeFilters.destinationZone = null;
        $('#filterDestinationZone').val('');
      } else if (type === 'taggedApi') {
        activeFilters.taggedApi = null;
        $('#filterTaggedApi').val('');
      }
      removeIndicator(type);
      applyFilters();
    }

    // --- Export ---
    function exportToCSV() {
      console.log("Exporting", filteredOrders, "orders to CSV");
     const headers = ['LR No', 'Order ID', 'Company Name', 'Consignee Name','Consignee Mo.no','Consignee email', 'City', 'Pin Code' ,'Payment Mode','invoice(Rs)','invoice no.', 'Created Date'];
      const csvContent = [
        headers.join(','),
        ...filteredOrders.map(order => [
          order.lr_no || '',
          order.order_id_db || '',
          order.company_name || '',
          `${order.consignee_first_name || ''} ${order.consignee_last_name || ''}`.trim(),
          order.consignee_phone || '',
          order.consignee_email || '',
          order.consignee_city || '',
          order.consignee_pincode || '',
          order.payment_mode || '',
          order.invoice_amount || '',
          order.invoice_no || '',
          order.created_at || ''  
        ].map(v => `"${String(v).replace(/"/g, '""')}"`).join(','))
      ].join('\n');
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = `ready_to_dispatch_orders_${new Date().toISOString().split('T')[0]}.csv`;
      link.click();
    }
    function exportToExcel() {
      exportToCSV();
    }

    // --- Show All Orders (no pagination) ---
    function showAllOrders() {
      const allCards = document.querySelectorAll('.order-card');
      allCards.forEach(card => card.style.display = 'block');
      const pagination = byId('pagination');
      if (pagination) pagination.style.display = 'none';
      // Update entries info to show all entries
      updateEntriesInfo(1, allOrders.length, allOrders.length);
      const itemsPerPageSelect = byId('itemsPerPageSelect');
      if (itemsPerPageSelect) itemsPerPageSelect.style.display = 'none';
    }

    // --- Initialization ---
    $(document).ready(function () {
      // Map order cards to allOrders array and keep reference to DOM card
      const orderCards = document.querySelectorAll('.order-card');
      console.log("Found order cards:", orderCards.length);
      
      allOrders = Array.from(orderCards).map((card, index) => {
        // Get the order ID directly from the data attribute (same source as EJS template)
        const orderIdSafe = card.dataset.orderId || '';
        
        console.log(`Card ${index}: orderIdSafe from dataset:`, orderIdSafe);
        
        const order = {
          lr_no: card.querySelector('.lrNo')?.textContent?.trim(),
          order_id: orderIdSafe, // This is the numeric order_id for API calls
          orderIdSafe: orderIdSafe, // Keep for backward compatibility
          order_id_db: card.dataset.orderIdDb || '', // This is the numeric order_id for API calls
          client_id: card.dataset.client,
          company_name: card.dataset.companyName,
          payment_mode: card.dataset.payment,
          created_at: card.dataset.created,
          consignee_first_name: card.dataset.consigneeFirstName || '',
          consignee_last_name: card.dataset.consigneeLastName || '',
          consignee_city: card.querySelector('.timeline-section .fa-user')?.parentElement?.nextElementSibling?.textContent?.match(/\(([^)]+)\)/)?.[1] || '',
          invoice_no: card.dataset.invoiceNo || '',
          invoice_amount: card.dataset.invoiceAmount || '',
       
          // Add missing properties that openTrackingModal needs
          consignee_phone: card.dataset.consigneePhoneNo || '',
          consignee_email: card.dataset.consigneeEmailId || '', 
          warehouse_pincode: card.dataset.warehousePincode || 'N/A',
          consignee_pincode: card.dataset.consigneePincode || 'N/A',
          chargable_weight: card.dataset.weight || 'N/A',
          package_weight: card.dataset.packageWeight || 'N/A',
          chargeable_weight: card.dataset.chargeableWeight || 'N/A',
          volumetric_weight: card.dataset.volumetricWeight || 'N/A',
          total_weight: card.dataset.totalWeight || 'N/A',
          weight_unit: card.dataset.weightUnit || 'kg',
          tagged_api: card.dataset.taggedApi || 'N/A',
          forwarder_product_type: card.dataset.serviceType || 'N/A',
          total_lr_charges: card.dataset.charges || 'N/A',
          lr_date: card.dataset.lrDate || card.dataset.created,
          eta: card.dataset.eta || '3',
          pickup_zone: card.dataset.pickupZone || 'NA',
          destination_zone: card.dataset.destinationZone || 'NA',
          warehouse_address: card.dataset.warehouseAddress || 'NA',
          consignee_address1: card.dataset.consigneeAddress || 'NA',
          grand_total: card.dataset.grandTotal || 'N/A',
          collectable_amount: card.dataset.collectableAmount || 'N/A',
          _card: card // keep reference to DOM element
        };
        return order;
      });
      
      console.log("Final allOrders array:", allOrders);
      filteredOrders = allOrders.slice();

      // Set default items per page
      const selectElement = document.getElementById('itemsPerPageSelect');
      if (selectElement) {
        selectElement.value = itemsPerPage;
        console.log("Initialized items per page selector with value:", itemsPerPage);
      } else {
        console.error("Items per page selector not found!");
      }
      
      // Initial display
      displayOrders();
      renderPagination(filteredOrders.length);

      // Filter option triggers
      $('.filter-option').on('click', function (e) {
        e.preventDefault();
        const type = $(this).data('filter-type');
        if (type === 'client') {
          populateClientFilter();
          $('#clientFilterModal').modal('show');
        } else if (type === 'payment') {
          populatePaymentFilter();
          $('#paymentFilterModal').modal('show');
        }
      });

      // Apply client filter
      $('#applyClientFilter').on('click', function () {
        const selectedClientId = $('#clientSelect').val() || null;
        activeFilters.clientId = selectedClientId;
        applyFilters();
        if (selectedClientId) {
          const text = $('#clientSelect option:selected').text();
          showActiveFilter('client', text);
        } else {
          removeIndicator('client');
        }
        $('#clientFilterModal').modal('hide');
      });

      // Apply payment filter
      $('#applyPaymentFilter').on('click', function () {
        const selectedPaymentMode = $('#paymentModeSelect').val() || null;
        activeFilters.payment = selectedPaymentMode;
        applyFilters();
        if (selectedPaymentMode) {
          showActiveFilter('payment', selectedPaymentMode);
        } else {
          removeIndicator('payment');
        }
        $('#paymentFilterModal').modal('hide');
      });

      // Apply date range filter
      $('#apply-date-filter').on('click', function () {
        const min = $('#min-date').val() ? new Date($('#min-date').val()) : null;
        const max = $('#max-date').val() ? new Date($('#max-date').val()) : null;
        if (min) min.setHours(0, 0, 0, 0);
        if (max) max.setHours(23, 59, 59, 999);
        activeFilters.date.min = min;
        activeFilters.date.max = max;
        applyFilters();
        if (min || max) {
          const text = (min && max)
            ? `${min.toLocaleDateString()} - ${max.toLocaleDateString()}`
            : (min ? `From: ${min.toLocaleDateString()}` : `To: ${max.toLocaleDateString()}`);
          showActiveFilter('date', text);
        } else {
          removeIndicator('date');
        }
      });

      // Clear date filter
      $('#clear-date-filter').on('click', function () {
        $('#min-date').val('');
        $('#max-date').val('');
        activeFilters.date.min = null;
        activeFilters.date.max = null;
        applyFilters();
        removeIndicator('date');
      });

      // Quick date ranges
      $('.date-range-option').on('click', function (e) {
        e.preventDefault();
        const range = $(this).data('range');
        const today = new Date();
        let start = new Date(today);
        let end = new Date(today);
        switch (range) {
          case 'today': break;
          case 'yesterday':
            start.setDate(today.getDate() - 1);
            end.setDate(today.getDate() - 1);
            break;
          case 'last7days':
            start.setDate(today.getDate() - 6);
            break;
          case 'last30days':
            start.setDate(today.getDate() - 29);
            break;
          case 'thisMonth':
            start = new Date(today.getFullYear(), today.getMonth(), 1);
            end = new Date(today.getFullYear(), today.getMonth() + 1, 0);
            break;
          case 'lastMonth':
            start = new Date(today.getFullYear(), today.getMonth() - 1, 1);
            end = new Date(today.getFullYear(), today.getMonth(), 0);
            break;
        }
        $('#min-date').val(formatDateForInput(start));
        $('#max-date').val(formatDateForInput(end));
        $('#apply-date-filter').click();
      });

      // Search bar
      $('#search-input').on('keyup', function () {
        performSearch(this.value);
      });
      $('#button-addon2').on('click', function () {
        performSearch($('#search-input').val());
      });

      // Page size change
      $('#itemsPerPageSelect').on('change', function () {
        changeItemsPerPage(this.value);
      });

      // Offcanvas Filter Event Handlers








      // Clear all filters
      $('#clearAllFilters').on('click', function () {
        activeFilters.clientId = null;
        activeFilters.payment = null;
        activeFilters.date.min = null;
        activeFilters.date.max = null;
        activeFilters.destinationZone = null;
        activeFilters.taggedApi = null;
        $('#filter-min-date').val('');
        $('#filter-max-date').val('');
        $('#filterPaymentMode').val('');
        $('#filterDestinationZone').val('');
        $('#filterTaggedApi').val('');
        applyFilters();
        $('.filter-indicators').empty();
        $('#selectedRangeText').text('Today');
        $('#drawerRangeText').text('Today');
      });

      // Simple backdrop cleanup function
      function removeExtraBackdrops() {
        const backdrops = document.querySelectorAll('.offcanvas-backdrop');
        if (backdrops.length > 1) {
          // Keep only the last backdrop, remove others
          for (let i = 0; i < backdrops.length - 1; i++) {
            backdrops[i].remove();
          }
        }
      }

      // Legacy function removed - now using manual-only closing approach

      // Filter Sidebar Functionality
      // Quick date ranges for filter sidebar
      $('.filter-date-range-option').on('click', function (e) {
        e.preventDefault();
        const range = $(this).data('range');
        const today = new Date();
        let start = new Date(today);
        let end = new Date(today);
        
        switch (range) {
          case 'today': break;
          case 'yesterday':
            start.setDate(today.getDate() - 1);
            end.setDate(today.getDate() - 1);
            break;
          case 'last7days':
            start.setDate(today.getDate() - 6);
            break;
          case 'last30days':
            start.setDate(today.getDate() - 29);
            break;
          case 'thisMonth':
            start = new Date(today.getFullYear(), today.getMonth(), 1);
            end = new Date(today.getFullYear(), today.getMonth() + 1, 0);
            break;
          case 'lastMonth':
            start = new Date(today.getFullYear(), today.getMonth() - 1, 1);
            end = new Date(today.getFullYear(), today.getMonth(), 0);
            break;
        }
        
        $('#filter-min-date').val(formatDateForInput(start));
        $('#filter-max-date').val(formatDateForInput(end));
        
        // Update the drawer range text
        $('#drawerRangeText').text($(this).text().trim());
        $('#selectedRangeText').text($(this).text().trim());
      });

      // Apply filter button
      $('#filterApplyBtn').on('click', function () {
        const minDate = $('#filter-min-date').val() ? new Date($('#filter-min-date').val()) : null;
        const maxDate = $('#filter-max-date').val() ? new Date($('#filter-max-date').val()) : null;
        const paymentMode = $('#filterPaymentMode').val();
        const destinationZone = $('#filterDestinationZone').val();
        const taggedApi = $('#filterTaggedApi').val();
        
        if (minDate) minDate.setHours(0, 0, 0, 0);
        if (maxDate) maxDate.setHours(23, 59, 59, 999);
        
        // Apply filters to the existing filter system
        activeFilters.date.min = minDate;
        activeFilters.date.max = maxDate;
        
        // Add new filters
        if (paymentMode) {
          console.log('Payment mode filter selected:', { 
            paymentMode: paymentMode, 
            paymentModeType: typeof paymentMode,
            paymentModeValue: paymentMode 
          });
          // Store the original value for filtering
          activeFilters.payment = paymentMode;
        }
        if (destinationZone) {
          activeFilters.destinationZone = destinationZone;
        }
        if (taggedApi) {
          console.log('Tagged API filter selected:', { 
            taggedApi: taggedApi, 
            taggedApiType: typeof taggedApi,
            taggedApiValue: taggedApi 
          });
          activeFilters.taggedApi = taggedApi;
        } else {
          console.log('No tagged API filter selected, clearing activeFilters.taggedApi');
          activeFilters.taggedApi = null;
        }
        
        // Apply the filters
        applyFilters();
        
        // Close filter manually after applying
        if (window.closeFilterManually) {
          console.log('🎯 Apply button clicked - closing filter manually');
          window.closeFilterManually();
        }
        
        // Show filter indicators
        if (minDate || maxDate) {
          const text = (minDate && maxDate)
            ? `${minDate.toLocaleDateString()} - ${maxDate.toLocaleDateString()}`
            : (minDate ? `From: ${minDate.toLocaleDateString()}` : `To: ${maxDate.toLocaleDateString()}`);
          showActiveFilter('date', text);
        }
        if (paymentMode) {
          const paymentValue = paymentMode === 'cod' ? 'COD' : paymentMode === 'prepaid' ? 'Prepaid' : paymentMode;
          showActiveFilter('payment', paymentValue);
        }
        if (destinationZone) {
          showActiveFilter('destinationZone', destinationZone);
        }
        if (taggedApi) {
          showActiveFilter('taggedApi', taggedApi);
        }
      });

      // Reset filter button
      $('#filterResetBtn').on('click', function () {
        $('#filter-min-date').val('');
        $('#filter-max-date').val('');
        $('#filterPaymentMode').val('');
        $('#filterDestinationZone').val('');
        $('#filterTaggedApi').val('');
        
        // Clear all filters
        activeFilters.date.min = null;
        activeFilters.date.max = null;
        activeFilters.payment = null;
        activeFilters.destinationZone = null;
        activeFilters.taggedApi = null;
        
        // Remove all indicators
        $('.filter-indicators .badge').remove();
        
        // Apply filters
        applyFilters();
      });

      // Manual-only filter sidebar control with debugging
      const filterSidebar = document.getElementById('filterSidebar');
      if (filterSidebar) {
        console.log('✅ Filter sidebar found, setting up MANUAL-ONLY event listeners');
        
        // Track offcanvas state for debugging and prevent conflicts
        let isOperating = false; // Prevent multiple simultaneous operations
        let currentState = 'closed'; // closed, opening, open, closing
        let lastShowTime = 0; // Debounce mechanism

        // Bootstrap offcanvas event listeners with conflict prevention and debouncing
        filterSidebar.addEventListener('show.bs.offcanvas', function (event) {
          const now = Date.now();
          console.log('🔄 Offcanvas SHOW event triggered, current state:', currentState);
          
          // Debounce: Ignore rapid fire events within 300ms
          if (now - lastShowTime < 300) {
            console.log('🚫 Blocking SHOW - too rapid (debounced)');
            event.preventDefault();
            event.stopPropagation();
            return;
          }
          
          // Prevent multiple simultaneous operations
          if (isOperating || currentState === 'opening' || currentState === 'open') {
            console.log('🚫 Blocking SHOW - already operating or open');
            event.preventDefault();
            event.stopPropagation();
            return;
          }
          
          lastShowTime = now;
          isOperating = true;
          currentState = 'opening';
          console.log('✅ SHOW event accepted, state changed to opening');
          
          // Set timeout to reset if stuck in opening state
          if (window.openingTimeout) {
            clearTimeout(window.openingTimeout);
          }
          
          window.openingTimeout = setTimeout(() => {
            if (currentState === 'opening') {
              console.log('⚠️ Opening timeout - resetting stuck state');
              currentState = 'closed';
              isOperating = false;
            }
          }, 2000);
        });

        filterSidebar.addEventListener('shown.bs.offcanvas', function () {
          console.log('✅ Offcanvas SHOWN event - fully opened and STABLE');
          
          // Clear the opening timeout since we successfully opened
          if (window.openingTimeout) {
            clearTimeout(window.openingTimeout);
          }
          
          currentState = 'open';
          isOperating = false;
          
          // Wait for complete stability before adding backdrop
          setTimeout(() => {
            if (currentState === 'open') {
              addCustomBackdrop();
            }
          }, 150);
        });

        filterSidebar.addEventListener('hide.bs.offcanvas', function (event) {
          console.log('🔄 Offcanvas HIDE event triggered, current state:', currentState);
          
          // Prevent multiple simultaneous operations
          if (isOperating || currentState === 'closing' || currentState === 'closed') {
            console.log('🚫 Blocking HIDE - already operating or closed');
            event.preventDefault();
            event.stopPropagation();
            return;
          }
          
          isOperating = true;
          currentState = 'closing';
          removeCustomBackdrop();
        });

        filterSidebar.addEventListener('hidden.bs.offcanvas', function () {
          console.log('✅ Offcanvas HIDDEN event - fully closed');
          currentState = 'closed';
          isOperating = false;
          removeCustomBackdrop();
        });

        // Custom backdrop that only responds to manual clicks
        function addCustomBackdrop() {
          console.log('🎭 Adding custom backdrop for manual control');
          
          // Debug current filter state
          console.log('📊 Filter visual state check:', {
            hasShowClass: filterSidebar.classList.contains('show'),
            visibility: filterSidebar.style.visibility,
            display: getComputedStyle(filterSidebar).display,
            transform: getComputedStyle(filterSidebar).transform
          });
          
          removeCustomBackdrop(); // Remove any existing
          
          const backdrop = document.createElement('div');
          backdrop.className = 'custom-offcanvas-backdrop';
          backdrop.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            z-index: 1040;
            width: 100vw;
            height: 100vh;
            background-color: rgba(0, 0, 0, 0.5);
          `;
          
          // Only close on direct backdrop click (not inside filter)
          backdrop.addEventListener('click', function(event) {
            if (event.target === backdrop && currentState === 'open') {
              console.log('🎯 Custom backdrop clicked - closing manually');
              closeFilterManually();
            }
          });
          
          document.body.appendChild(backdrop);
        }

        function removeCustomBackdrop() {
          const customBackdrop = document.querySelector('.custom-offcanvas-backdrop');
          if (customBackdrop) {
            customBackdrop.remove();
            console.log('🗑️ Custom backdrop removed');
          }
        }

        // Manual close function with complete state reset
        function closeFilterManually() {
          console.log('🔒 Closing filter manually, current state:', currentState);
          
          // Don't proceed if already closing or closed
          if (currentState === 'closing' || currentState === 'closed') {
            console.log('🚫 Already closing/closed, ignoring close request');
            return;
          }
          
          // Set state to closing to prevent conflicts
          currentState = 'closing';
          isOperating = true;
          
          // Remove custom backdrop immediately
          removeCustomBackdrop();
          
          if (filterSidebar) {
            // Destroy existing Bootstrap instance to prevent conflicts
            try {
              const existingInstance = bootstrap.Offcanvas.getInstance(filterSidebar);
              if (existingInstance) {
                existingInstance.dispose();
                console.log('🗑️ Destroyed existing Bootstrap instance');
              }
            } catch (error) {
              console.error('Error destroying offcanvas instance:', error);
            }

            // Force close manually with complete cleanup
            filterSidebar.classList.remove('show', 'showing');
            filterSidebar.setAttribute('aria-hidden', 'true');
            filterSidebar.style.visibility = 'hidden';
            
            console.log('🔍 After manual close - filter state:', {
              hasShowClass: filterSidebar.classList.contains('show'),
              visibility: filterSidebar.style.visibility,
              ariaHidden: filterSidebar.getAttribute('aria-hidden')
            });
            
            // Clean up body and document
            document.body.classList.remove('offcanvas-open', 'modal-open');
            document.body.style.overflow = '';
            document.body.style.paddingRight = '';
            
            // Remove any remaining backdrops
            const allBackdrops = document.querySelectorAll('.offcanvas-backdrop, .custom-offcanvas-backdrop');
            allBackdrops.forEach(backdrop => backdrop.remove());
            
            console.log('🧹 Manual cleanup completed');

            // Reset state after cleanup
            currentState = 'closed';
            isOperating = false;

            // Recreate Bootstrap instance after cleanup for next use
            setTimeout(() => {
              try {
                // Reset visibility for next use
                filterSidebar.style.visibility = '';
                filterSidebar.setAttribute('aria-hidden', 'true');
                
                const newInstance = new bootstrap.Offcanvas(filterSidebar, {
                  backdrop: false,
                  keyboard: false
                });
                console.log('✅ Bootstrap instance recreated for future use');
                console.log('🔄 Filter reset state:', {
                  hasShowClass: filterSidebar.classList.contains('show'),
                  visibility: filterSidebar.style.visibility,
                  ariaHidden: filterSidebar.getAttribute('aria-hidden')
                });
              } catch (error) {
                console.error('Error recreating Bootstrap instance:', error);
              }
            }, 300);
          }
        }

        // Emergency reset function for completely stuck states
        function emergencyResetFilter() {
          console.log('🚨 Emergency filter reset triggered');
          
          // Remove ALL offcanvas and backdrop elements
          const allOffcanvas = document.querySelectorAll('.offcanvas');
          const allBackdrops = document.querySelectorAll('.offcanvas-backdrop, .custom-offcanvas-backdrop, .modal-backdrop');
          
          allOffcanvas.forEach(offcanvas => {
            try {
              const instance = bootstrap.Offcanvas.getInstance(offcanvas);
              if (instance) instance.dispose();
            } catch (e) {}
            
            offcanvas.classList.remove('show', 'showing');
            offcanvas.setAttribute('aria-hidden', 'true');
            offcanvas.style.visibility = 'hidden';
          });
          
          allBackdrops.forEach(backdrop => backdrop.remove());
          
          // Reset body
          document.body.classList.remove('offcanvas-open', 'modal-open');
          document.body.style.overflow = '';
          document.body.style.paddingRight = '';
          document.body.style.marginRight = '';
          
          // Recreate filter instance
          setTimeout(() => {
            if (filterSidebar) {
              new bootstrap.Offcanvas(filterSidebar, {
                backdrop: false,
                keyboard: false
              });
              console.log('🔄 Filter completely reset and ready');
            }
          }, 500);
        }
        
        // Expose functions globally
        window.closeFilterManually = closeFilterManually;
        window.emergencyResetFilter = emergencyResetFilter;
        
        // Add keyboard shortcut for emergency reset (Ctrl+Shift+R)
        document.addEventListener('keydown', function(event) {
          if (event.ctrlKey && event.shiftKey && event.key === 'R') {
            event.preventDefault();
            console.log('🔑 Emergency reset triggered by keyboard shortcut');
            emergencyResetFilter();
          }
        });
      }

      // Intelligent periodic cleanup to prevent stuck screens with debugging
      setInterval(() => {
        const openOffcanvas = document.querySelector('.offcanvas.show');
        const backdrops = document.querySelectorAll('.offcanvas-backdrop');
        
        if (!openOffcanvas && backdrops.length > 0) {
          console.log('🔍 Periodic cleanup: Found orphaned backdrops, cleaning up');
          // No offcanvas is open but backdrops exist - clean them up
          backdrops.forEach(backdrop => backdrop.remove());
          // Also clean up body classes
          document.body.classList.remove('offcanvas-open', 'modal-open');
          document.body.style.overflow = '';
          document.body.style.paddingRight = '';
        } else if (openOffcanvas && backdrops.length > 1) {
          console.log('🔍 Periodic cleanup: Found multiple backdrops, removing extras');
          // Remove extra backdrops if multiple exist
          removeExtraBackdrops();
        }
        
        // Debug log current state only when there are issues
        const filterSidebar = document.getElementById('filterSidebar');
        if (filterSidebar && filterSidebar.classList.contains('show')) {
          // Only log if there's an issue (backdrop mismatch or body class problem)
          const backdropCount = backdrops.length;
          const bodyHasOffcanvasOpen = document.body.classList.contains('offcanvas-open');
          
          if (backdropCount !== 1 || !bodyHasOffcanvasOpen) {
            console.log('⚠️ Filter sidebar issue detected:', {
              isShown: true,
              backdropCount: backdropCount,
              bodyHasOffcanvasOpen: bodyHasOffcanvasOpen,
              expectedBackdrops: 1,
              expectedBodyClass: true
            });
          }
        }
      }, 5000); // Reduced frequency to every 5 seconds
    });

    // Expose for onclick handlers
    window.clearFilter = clearFilter;
    window.changePage = changePage;
          window.changeItemsPerPage = changeItemsPerPage;
    window.exportToCSV = exportToCSV;
    window.exportToExcel = exportToExcel;
  </script>



  <!-- DataTable Buttons check removed - using custom pagination -->
  <script src="https://unpkg.com/pdf-lib/dist/pdf-lib.min.js"></script>
  <!-- Add this script at the end of your file, before the closing </body> tag -->
  <script>
    (function () {
      // -----------------------------
      // Utilities
      // -----------------------------
      function getVisibleRowNodes() {
        // Get visible order cards from current page
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const visibleCards = Array.from(document.querySelectorAll('.order-card')).slice(startIndex, endIndex);
        return visibleCards;
      }

      function qsaIn(node, sel) {
        return Array.from(node.querySelectorAll(sel));
      }

      function qsIn(node, sel) {
        return node.querySelector(sel);
      }

      function isTruthy(v) {
        return !(v === null || v === undefined || v === '' || Number.isNaN(v));
      }

      // -----------------------------
      // Checkbox selection + bulk button
      // -----------------------------
      let selectAllCheckbox;
      let bulkActionsButton;

      function updateBulkActionsButton() {
        if (!bulkActionsButton) return;
        const anyChecked = document.querySelectorAll('.rowCheckbox:checked').length > 0;
        bulkActionsButton.disabled = !anyChecked;
      }

      function syncSelectAllState() {
        if (!selectAllCheckbox) return;
        const visibleRows = getVisibleRowNodes();
        const visibleCheckboxes = visibleRows
          .map(row => qsIn(row, '.rowCheckbox'))
          .filter(Boolean);

        const allChecked = visibleCheckboxes.length > 0 && visibleCheckboxes.every(cb => cb.checked);
        const someChecked = visibleCheckboxes.some(cb => cb.checked);

        selectAllCheckbox.checked = allChecked;
        selectAllCheckbox.indeterminate = someChecked && !allChecked;
      }

      function toggleVisibleCheckboxes(checked) {
        const visibleRows = getVisibleRowNodes();
        const visibleCheckboxes = visibleRows
          .map(row => qsIn(row, '.rowCheckbox'))
          .filter(Boolean);

        visibleCheckboxes.forEach(cb => { cb.checked = checked; });
        updateBulkActionsButton();
        syncSelectAllState();
      }

      // -----------------------------
      // Bulk Label Printing
      // -----------------------------
      async function mergeAndDownloadPDF(arrayBuffers, fileNameBase) {
        if (!Array.isArray(arrayBuffers) || arrayBuffers.length === 0) {
          throw new Error('No PDF data provided for merging.');
        }
        const mergedPdf = await PDFLib.PDFDocument.create();

        for (let i = 0; i < arrayBuffers.length; i++) {
          try {
            const srcPdf = await PDFLib.PDFDocument.load(arrayBuffers[i]);
            const pages = await mergedPdf.copyPages(srcPdf, srcPdf.getPageIndices());
            pages.forEach(p => mergedPdf.addPage(p));
          } catch (err) {
            console.error('Error processing PDF index', i, err);
            throw new Error(`Failed to merge PDF ${i + 1}`);
          }
        }

        const finalBytes = await mergedPdf.save();
        const blob = new Blob([finalBytes], { type: 'application/pdf' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = `${fileNameBase}_${Date.now()}.pdf`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }

      function buildLoadingOverlay() {
        const el = document.createElement('div');
        el.id = 'loading-overlay';
        el.style.cssText = 'position:fixed;inset:0;background:rgba(255,255,255,0.85);display:flex;justify-content:center;align-items:center;z-index:9999;';
        el.innerHTML = '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>';
        return el;
      }

      function extractRowPayload(row) {
        // Try to get a dedicated .lrNo node (as in your markup)
        const lrEl = qsIn(row, '.lrNo');

        // Pull from lrNo element attributes if present
        const fromLr = lrEl ? {
          lrNo: lrEl.getAttribute('data-lrno') || null,
          courier: lrEl.getAttribute('data-vendor-type') || null,
          poId: lrEl.getAttribute('data-pono') || null,
          orderId: lrEl.getAttribute('data-orderid') || null,
          clientIdAttr: lrEl.getAttribute('client-id') || lrEl.getAttribute('data-client-id') || null,
          aggrigatorIdAttr: lrEl.getAttribute('aggrigator-id') || lrEl.getAttribute('data-aggrigator-id') || null,
        } : {};

        // Also try row dataset (recommended to add these to <tr data-client-id="" data-aggrigator-id="">)
        const rowData = {
          clientIdRow: row.getAttribute('data-client-id') || null,
          aggrigatorIdRow: row.getAttribute('data-aggrigator-id') || null,
        };

        // Build final payload with fallbacks
        return {
          lrNo: fromLr.lrNo || row.getAttribute('data-lrno') || null,
          courier: fromLr.courier || row.getAttribute('data-courier') || null,
          poId: fromLr.poId || row.getAttribute('data-pono') || null,
          orderId: fromLr.orderId || row.getAttribute('data-orderid') || null,
          clientId: fromLr.clientIdAttr || rowData.clientIdRow || row.getAttribute('data-client') || null,
          aggrigatorId: fromLr.aggrigatorIdAttr || rowData.aggrigatorIdRow || row.getAttribute('data-aggrigator') || null,
        };
      }

      async function printBulkLabels(selectedRows, labelSize) {
        // Overlay
        const overlay = buildLoadingOverlay();
        document.body.appendChild(overlay);

        try {
          // Split by courier for special handling
          const isDelLtl = (r) => String(r.courier || '').toLowerCase() === 'delhivery/ltl-surface';
          const delhiveryLTLRows = selectedRows.filter(isDelLtl);
          const otherRows = selectedRows.filter(r => !isDelLtl(r));

          const pdfBuffers = [];

          // 1) Regular labels (one combined request for others)
          if (otherRows.length > 0) {
            const resp = await axios.post(
              '/api/print-bulk-labels',
              { selectedRows: otherRows, labelSize },
              { responseType: 'arraybuffer', headers: { 'Accept': 'application/pdf' } }
            );
            if (resp && resp.data) {
              pdfBuffers.push(resp.data); // already ArrayBuffer
            }
          }

          // 2) Delhivery LTL — one call per row (their API)
          if (delhiveryLTLRows.length > 0) {
            const requests = delhiveryLTLRows.map(r => axios.get(
              '/api/shipping-label/delhivery-ltl',
              {
                params: {
                  awbNumber: r.lrNo,
                  poId: r.poId,
                  labelSize,
                  clientId: r.clientId,
                  aggrigatorId: r.aggrigatorId
                },
                responseType: 'arraybuffer',
                headers: { 'Accept': 'application/pdf' }
              }
            ));
            const results = await Promise.all(requests);
            results.forEach(res => {
              if (res && res.data) pdfBuffers.push(res.data);
            });
          }

          if (pdfBuffers.length === 0) {
            throw new Error('No PDF data received from the server.');
          }

          await mergeAndDownloadPDF(pdfBuffers, 'batch_labels');
        } catch (err) {
          console.error('Bulk label generation failed:', err);
          alert(err?.message || 'An error occurred while generating labels.');
        } finally {
          overlay.remove();
        }
      }



      // -----------------------------
      // Event Wiring (DOM Ready)
      // -----------------------------
      document.addEventListener('DOMContentLoaded', function () {
        selectAllCheckbox = document.getElementById('selectAll');
        bulkActionsButton = document.getElementById('bulkActionsDropdown');

        // Select All — only visible page rows
        if (selectAllCheckbox) {
          selectAllCheckbox.addEventListener('change', function () {
            toggleVisibleCheckboxes(this.checked);
          });
        }

        // Individual row checkbox change
        document.addEventListener('change', function (e) {
          const target = e.target;
          if (!target.classList.contains('rowCheckbox')) return;
          updateBulkActionsButton();
          syncSelectAllState();
        });

        // Update select-all state after page change
        // This will be handled by the changePage function

        // Bulk print menu items
        // Bulk print menu items - Updated to use smart bulk system
        document.querySelectorAll('.bulk-print-label').forEach(link => {
          link.addEventListener('click', async function (e) {
            e.preventDefault();
            const labelSize = this.getAttribute('data-size') || '4X6';
            const selected = Array.from(document.querySelectorAll('.rowCheckbox:checked'));

            if (selected.length === 0) {
              Swal.fire({
                icon: 'warning',
                title: 'No Orders Selected',
                text: 'Please select at least one row.',
                confirmButtonText: 'OK'
              });
              return;
            }

            // Collect order IDs for bulk API call
            const orderIds = selected.map(cb => {
              const orderCard = cb.closest('.order-card');
              if (!orderCard) return null;
              return orderCard.getAttribute('data-order-id');
            }).filter(id => id);

            if (orderIds.length === 0) {
              Swal.fire({
                icon: 'warning',
                title: 'No Valid Orders',
                text: 'No valid orders selected.',
                confirmButtonText: 'OK'
              });
              return;
            }

            // Show loading indicator for bulk operation
            Swal.fire({
              title: 'Generating Bulk Labels...',
              text: `Processing ${orderIds.length} labels. Please wait.`,
              allowOutsideClick: false,
              showConfirmButton: false,
              didOpen: () => {
                Swal.showLoading();
              },
              customClass: {
                container: 'swal-high-zindex'
              }
            });

            try {
              console.log('🚀 Making bulk API call with params:', {
                bulkOrderIds: orderIds.join(','),
                labelSize: labelSize,
                orderType: 'express'
              });

              // Make single bulk API call instead of individual calls
              const response = await axios.get('/api/shipping-label/generate', {
                params: {
                  bulkOrderIds: orderIds.join(','),
                  labelSize: labelSize,
                  orderType: 'express'
                },
                responseType: 'blob'
              });

              console.log('📥 Response received:', {
                status: response.status,
                statusText: response.statusText,
                headers: response.headers,
                dataType: typeof response.data,
                dataSize: response.data ? response.data.size : 'N/A',
                contentType: response.headers['content-type']
              });

              if (response.data && response.data.size > 0) {
                const blob = new Blob([response.data], { type: 'application/pdf' });
                console.log('📄 Blob created:', {
                  size: blob.size,
                  type: blob.type
                });

                const url = window.URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = url;
                link.download = `bulk-labels-${labelSize}-${Date.now()}.pdf`;
                document.body.appendChild(link);
                link.click();

                // Cleanup
                setTimeout(() => {
                  document.body.removeChild(link);
                  window.URL.revokeObjectURL(url);
                }, 100);

                // Close loading and show success
                Swal.close();
                Swal.fire({
                  icon: 'success',
                  title: 'Bulk Labels Generated Successfully!',
                  text: `${orderIds.length} shipping labels have been merged into a single PDF and downloaded.`,
                  confirmButtonText: 'Great!',
                  customClass: {
                    container: 'swal-high-zindex'
                  }
                });

              } else {
                throw new Error('Received empty PDF data from server');
              }

            } catch (error) {
              console.error('❌ Bulk label generation failed:', error);
              
              // Close loading indicator
              Swal.close();
              
              // Show error message
              let errorTitle = 'Bulk Label Generation Failed';
              let errorMessage = 'An error occurred while generating bulk labels.';
              
              if (error.response) {
                const status = error.response.status;
                let data = error.response.data;
                
                // Try to parse error data
                if (typeof data === 'string') {
                  try {
                    data = JSON.parse(data);
                  } catch (e) {
                    console.warn('Could not parse error response data as JSON:', e);
                  }
                }
                
                const backendMessage = (typeof data === 'object' && data !== null && data.message) ? data.message : null;
                
                if (status === 400) {
                  errorTitle = 'Bad Request';
                  errorMessage = backendMessage || 'Invalid request parameters.';
                } else if (status === 404) {
                  errorTitle = 'Not Found';
                  errorMessage = backendMessage || 'Shipping label service not found.';
                } else if (status === 500) {
                  errorTitle = 'Server Error';
                  errorMessage = backendMessage || 'Internal server error occurred.';
                } else {
                  errorTitle = `Error ${status}`;
                  errorMessage = backendMessage || `Server error with status ${status}.`;
                }
              } else if (error.request) {
                errorTitle = 'Network Error';
                errorMessage = 'Unable to connect to the server. Please check your internet connection.';
              } else {
                errorMessage = error.message || 'An unexpected error occurred.';
              }
              
              Swal.fire({
                icon: 'error',
                title: errorTitle,
                text: errorMessage,
                confirmButtonText: 'OK',
                customClass: {
                  container: 'swal-high-zindex'
                }
              });
            }
          });
        });

        // Individual print label menu items
        // Individual print label menu items - Updated to use new API
        document.querySelectorAll('.print-label').forEach(link => {
          link.addEventListener('click', async function (e) {
            e.preventDefault();
            const orderId = this.getAttribute('data-orderid');
            const labelSize = this.getAttribute('data-size');
            const orderCard = this.closest('.order-card');
            
            if (!orderCard) {
              console.error('Order card not found');
              return;
            }

            const lrNo = orderCard.querySelector('.lrNo')?.textContent?.trim();
            
            try {
              // Show loading state for individual label
              Swal.fire({
                title: 'Generating Label...',
                text: `Please wait while we generate the label for LR ${lrNo}`,
                allowOutsideClick: false,
                showConfirmButton: false,
                didOpen: () => {
                  Swal.showLoading();
                },
                customClass: {
                  container: 'swal-high-zindex'
                }
              });
              
              // Use the new API endpoint
              const response = await axios.get('/api/shipping-label/generate', {
                params: {
                  orderId: orderId,
                  labelSize: labelSize,
                  orderType: 'express',
                  lrNo: lrNo
                },
                responseType: 'blob'
              });
              
              const blob = new Blob([response.data], { type: 'application/pdf' });
              const url = window.URL.createObjectURL(blob);
              const link = document.createElement('a');
              link.href = url;
              link.download = `shipping-label-${lrNo}-${labelSize}.pdf`;
              link.style.display = 'none';
              document.body.appendChild(link);
              link.click();
              setTimeout(() => {
                document.body.removeChild(link);
                window.URL.revokeObjectURL(url);
              }, 100);
              
              // Close loading state
              Swal.close();
              
              // Show success message
              Swal.fire({
                icon: 'success',
                title: 'Label Generated Successfully!',
                text: `Shipping label for LR ${lrNo} has been downloaded.`,
                timer: 2000,
                showConfirmButton: false,
                customClass: {
                  container: 'swal-high-zindex'
                }
              });
              
            } catch (error) {
              console.error(`Error generating label for order ${orderId}:`, error);
              
              // Close loading state
              Swal.close();
              
              // Enhanced error handling with SweetAlert
              let errorTitle = 'Error Generating Label';
              let errorMessage = 'An error occurred while generating the shipping label.';
              
              if (error.response) {
                const status = error.response.status;
                let data = error.response.data;
                
                if (typeof data === 'string') {
                  try {
                    data = JSON.parse(data);
                  } catch (e) {
                    console.warn('Could not parse error response data as JSON:', e);
                  }
                }
                
                const backendMessage = (typeof data === 'object' && data !== null && data.message) ? data.message : null;
                
                if (status === 400) {
                  errorTitle = 'Bad Request';
                  errorMessage = backendMessage || 'Invalid request parameters.';
                } else if (status === 404) {
                  errorTitle = 'Not Found';
                  errorMessage = backendMessage || 'Shipping label service not found for this user';
                } else if (status === 500) {
                  errorTitle = 'Server Error';
                  errorMessage = backendMessage || 'Internal server error occurred.';
                } else {
                  errorTitle = `Error ${status}`;
                  errorMessage = backendMessage || `Server error with status ${status}.`;
                }
              } else if (error.request) {
                errorTitle = 'Network Error';
                errorMessage = 'Unable to connect to the server. Please check your internet connection.';
              } else {
                errorMessage = error.message || 'An unexpected error occurred.';
              }
              
              Swal.fire({
                icon: 'error',
                title: errorTitle,
                text: errorMessage,
                confirmButtonText: 'OK',
                customClass: {
                  container: 'swal-high-zindex'
                }
              });
            }
          });
        });

        // ------------- Courier Compact Toggle + Active styles -------------
        window.toggleCourierOptions = function (headerElement) {
          const courierCompact = headerElement.closest('.courier-compact');
          if (!courierCompact) return;
          const optionsContainer = courierCompact.querySelector('.courier-options-compact');
          const expandIcon = headerElement.querySelector('.fa-chevron-down');

          const computed = getComputedStyle(optionsContainer);
          const isExpanded = computed.maxHeight !== '0px';
          if (isExpanded) {
            optionsContainer.style.maxHeight = '0px';
            if (expandIcon) expandIcon.style.transform = 'rotate(0deg)';
          } else {
            optionsContainer.style.maxHeight = '200px';
            if (expandIcon) expandIcon.style.transform = 'rotate(180deg)';
          }
        };

        // Option selection styling (within courier options)
        document.querySelectorAll('.courier-options-compact > div > div').forEach(option => {
          option.addEventListener('click', function (e) {
            e.stopPropagation();
            const wrap = this.closest('.courier-compact');
            if (!wrap) return;
            wrap.querySelectorAll('.courier-options-compact > div > div').forEach(opt => {
              opt.style.border = 'none';
              opt.style.backgroundColor = '';
            });
            this.style.border = '2px solid #007bff';
            this.style.backgroundColor = '#f8f9fa';
            // Place for on-select logic…
          });
        });
      });
    })();
  </script>


  <script>
    (function () {
      // -----------------------------
      // Helpers
      // -----------------------------
      // Global variable to store tracking data
      let globalTrackingData = {};
      
      const INRCurrency = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR', maximumFractionDigits: 0 });

      const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

      const safe = (v, fallback = 'N/A') => (v === null || v === undefined || v === '' ? fallback : v);

      function $(id) { return document.getElementById(id); }

      function setText(id, val) {
        const el = $(id);
        if (!el) return;
        el.textContent = val ?? '';
      }

      function setHTML(id, html) {
        const el = $(id);
        if (!el) return;
        el.innerHTML = html ?? '';
      }

      function setSrc(id, url, fallback) {
        const el = $(id);
        if (!el) return;
        el.src = url || fallback || '/assets/images/logos/default.png';
        if (fallback) {
          el.onerror = () => { el.onerror = null; el.src = fallback; };
        }
      }

      function toDate(value) {
        const d = new Date(value);
        return isNaN(d.getTime()) ? null : d;
      }

      function formatINDate(d) {
        if (!d) return 'N/A';
        // Show as "28 Apr, 2025" style
        return d.toLocaleDateString('en-IN', { day: '2-digit', month: 'short', year: 'numeric', timeZone: 'Asia/Kolkata' });
      }

      function formatINDateTime(d) {
        if (!d) return 'N/A';
        return d.toLocaleString('en-IN', { day: '2-digit', month: 'short', year: 'numeric', hour: '2-digit', minute: '2-digit', hour12: true, timeZone: 'Asia/Kolkata' });
      }

      function toINR(n) {
        const num = Number(n);
        return isFinite(num) ? INRCurrency.format(num) : INRCurrency.format(0);
      }

      function titleCase(str) {
        if (!str) return 'N/A';
        return String(str).replace(/\w\S*/g, t => t.charAt(0).toUpperCase() + t.slice(1).toLowerCase());
      }

      function courierLogo(taggedApi) {
        const v = (taggedApi || '').toLowerCase();
        if (v.includes('delhivery')) return '/assets/images/logos/delhivery.png';
        if (v.includes('xpress') || v.includes('expressbees') || v.includes('express')) return '/assets/images/logos/expressbees.png';
        if (v.includes('dtdc')) return '/assets/images/logos/dtdc.png';
        if (v.includes('bluedart')) return '/assets/images/BlueDart.png';
        if (v.includes('fedex')) return '/assets/images/FedEx.png';
        return '/assets/images/logos/default.png';
      }

      // -----------------------------
      // Main
      // -----------------------------
      
      // Function to update tracking status text based on status value
      function updateTrackingStatusText(status) {
        let trackingStatusText = '';
        let currentStatusText = '';
        console.log("status",status)
        
        switch(parseInt(status)) {
          case 1:
          case 2:
            trackingStatusText = 'Ready to Dispatch';
            currentStatusText = 'Ready to Dispatch';
            break;
       
          case 3:
            trackingStatusText = 'In Transit';
            currentStatusText = 'In Transit';
            break;
          case 8:
            trackingStatusText = 'Out for Delivery';
            currentStatusText = 'Out for Delivery';
            break;
          case 4:
            trackingStatusText = 'Delivered';
            currentStatusText = 'Delivered';
            break;
          case 0:
            trackingStatusText = 'Cancelled';
            currentStatusText = 'Cancelled';
            break;
          case 5:
            trackingStatusText = 'Order in Return';
            currentStatusText = 'Order in Return';
            break;
          default:
            trackingStatusText = 'Unknown Status';
            currentStatusText = 'Unknown Status';
        }
        
        // Update the tracking status elements
        const trackingStatusEl = document.getElementById('trackingStatus');
        const currentStatusEl = document.getElementById('currentStatus');
        
        if (trackingStatusEl) {
          trackingStatusEl.textContent = trackingStatusText;
        }
        if (currentStatusEl) {
          currentStatusEl.textContent = currentStatusText;
        }
      }
      
      window.openTrackingModal = function (lrNo, orderIdSafe, orderIdForDisplay, status) {
        // Check if allOrders is populated
        if (!allOrders || allOrders.length === 0) {
          console.error('allOrders array is not populated yet. Please wait for page to load completely.');
          return;
        }
        
        // Get the full order object from allOrders array
        console.log("openTrackingModal called with:", { lrNo, orderIdSafe, orderIdForDisplay });
        console.log("allOrders array:", allOrders);
        console.log("allOrders orderIdSafe values:", allOrders.map(o => ({ orderIdSafe: o.orderIdSafe, lr_no: o.lr_no })));
        
        // Try to find the order with flexible comparison (string vs number)
        let order = allOrders.find(o => o.orderIdSafe === orderIdSafe);
        
        // If exact match fails, try string comparison
        if (!order) {
          order = allOrders.find(o => String(o.orderIdSafe) === String(orderIdSafe));
        }
        
        // If still not found, try number comparison
        if (!order) {
          order = allOrders.find(o => Number(o.orderIdSafe) === Number(orderIdSafe));
        }
        
        if (!order) {
          console.error('Order not found for ID:', orderIdSafe);
          console.error('Available orderIdSafe values:', allOrders.map(o => ({ orderIdSafe: o.orderIdSafe, type: typeof o.orderIdSafe })));
          console.error('Type comparison - orderIdSafe param:', typeof orderIdSafe, 'value:', orderIdSafe);
          console.error('Type comparison - first orderIdSafe in array:', typeof allOrders[0]?.orderIdSafe, 'value:', allOrders[0]?.orderIdSafe);
          return;
        }
        
        // Extract order data
        const {
          company_name: companyName,
          consignee_first_name: consigneeName,
          consignee_city: consigneeCity,
          warehouse_pincode: warehousePincode,
          consignee_pincode: consigneePincode,
          chargable_weight: weight,
          package_weight: packageWeight,
          chargeable_weight: chargeableWeight,
          volumetric_weight: volumetricWeight,
          total_weight: totalWeight,
          weight_unit: weightUnit,
          tagged_api: taggedApi,
          forwarder_product_type: serviceType,
          total_lr_charges: charges,
          lr_date: lrDate,
          eta,
          created_at: orderDate,
          pickup_zone,
          destination_zone,
          warehouse_address,
          consignee_address1,
          payment_mode,
          grand_total,
          collectable_amount,
          
        } = order;
        console.log("order", order);

        // Dates & ETA
        const lrDateObj = toDate(lrDate);
        const orderDateObj = toDate(orderDate);

        const etaDays = Number.isFinite(parseInt(eta, 10)) ? parseInt(eta, 10) : 3;
        const estimatedDelivery = lrDateObj ? new Date(lrDateObj) : new Date();
        estimatedDelivery.setDate(estimatedDelivery.getDate() + etaDays);

        // Header block
        setText('orderDateDisplay', `Order Date: ${orderDateObj ? formatINDateTime(orderDateObj) : safe(orderDate)}`);
        setText('deliveryDay', dayNames[estimatedDelivery.getDay()]);
        setText('deliveryMonth', monthNames[estimatedDelivery.getMonth()]);
        setText('deliveryDate', String(estimatedDelivery.getDate()));
        setText('lrNumberData', safe(lrNo, 'N/A'));

        // Logos
        const logoSrc = courierLogo(taggedApi);
        setSrc('courierLogo', logoSrc, '/assets/images/logos/default.png');
        setSrc('roundlogo', logoSrc, '/assets/images/logos/default.png');

        // Route
        const routeFrom = safe(pickup_zone, 'Origin');
        const routeTo = safe(destination_zone, 'Destination');
        setText('shipmentRoute', `${routeFrom} → ${routeTo}`);
        setText('orderIdDisplay', `Order ID #${safe(orderIdForDisplay, '-')}`);

        // Current shipment card
        const fromLoc = [safe(companyName, 'Sender'), '→'].join(' ');
        setText('fromLocation', fromLoc);
        setText('toLocation', safe(consigneeName, 'Consignee'));
        // currentStatus will be updated by updateTrackingStatusText function
        setText('lrNumber', `LR #${safe(lrNo, '-')}`);

        // Shipment details grid
        setText('senderName', safe(companyName));
        setText('departureDate', lrDateObj ? formatINDateTime(lrDateObj) : safe(lrDate));
        setText('serviceType', safe(serviceType, 'Express'));

        // Package Weight: always display in kg
        const packageWeightStr = safe(packageWeight, weight, 'N/A');
        
        // Debug: Log the packageWeight values to see what we're getting
        console.log('Package Weight Debug:', {
            packageWeight,
            weight,
            packageWeightStr,
            packageWeightType: typeof packageWeight,
            weightType: typeof weight
        });
        
        setText('packageWeight', /^\d+(\.\d+)?$/.test(String(packageWeightStr)) ? `${packageWeightStr} kg` : packageWeightStr);

        // Update timeline weights dynamically
        const timelineWeightEl = document.getElementById('timelineWeight');
        
        if (timelineWeightEl) {
          const weightValue = safe(packageWeight, weight, 'N/A');
          timelineWeightEl.textContent = /^\d+(\.\d+)?$/.test(String(weightValue)) ? `${weightValue} kg` : weightValue;
        }

        setText('courierPartner', safe(taggedApi));

        // Tracking summary
        setText('trackingOrderId', `Order ID #${safe(orderIdForDisplay, '-')}`);
        
        // Update tracking status text based on status value
        updateTrackingStatusText(status);

        // Tracking grid (addresses & amounts)
        setText('trackingFromCity', safe(companyName));
        setText('trackingFromwarehouse', titleCase(warehouse_address));
        setText('trackingToCity', safe(consigneeName));
        setText('trackingToAddress', safe(consignee_address1));
        setText('trackingConsignee', safe(consigneeName));
        setText('trackingConsigneeCity', safe(consigneeCity));
        setText('trackingCharges', toINR(charges));
        setText('trackingLrNumber', safe(lrNo));
        setText('trackingpincode', safe(consigneePincode));
        setText('paymentType', safe(payment_mode));
        setText('grandTotal', toINR(grand_total));
        updateTimelineWithRealData(lrNo, taggedApi, orderDate, lrDate, chargeableWeight, packageWeight, orderIdForDisplay);

        // COD / Collectable visibility
        const collectableEl = document.getElementById('collectableAmount');
        const codTitleEl = document.getElementById('codtitle');
        const isPrepaid = typeof payment_mode === 'string' && payment_mode.toLowerCase().includes('pre');

        if (isPrepaid) {
          if (collectableEl) collectableEl.style.display = 'none';
          if (codTitleEl) codTitleEl.style.display = 'none';
        } else {
          if (collectableEl) {
            collectableEl.style.display = '';
            setText('collectableAmount', toINR(collectable_amount));
          }
          if (codTitleEl) codTitleEl.style.display = '';
        }

        // Offcanvas (safe open)
        const offcanvasElement = document.getElementById('orderDetailsCanvasSecond');
        if (!offcanvasElement) {
          console.warn('Offcanvas element #orderDetailsCanvasSecond not found.');
          return;
        }
        if (typeof bootstrap === 'undefined' || !bootstrap.Offcanvas) {
          console.warn('Bootstrap Offcanvas is not available.');
          return;
        }
        const offcanvas = bootstrap.Offcanvas.getOrCreateInstance(offcanvasElement);
        offcanvas.show();
      };

              // Helper functions for tracking
      async function updateTimelineWithRealData(lrNo, taggedApi, orderDate, lrDate, chargeableWeight = null, packageWeight = null, orderIdForDisplay = null) {
        try {
          // Call your API
          const response = await axios.get(`/api/express/shipments/tracking/${lrNo}`);
          const result = await response.data;
          
          if (result.success && result.data) {
            // Store data globally for later use
            globalTrackingData[lrNo] = result.data;
            
            // Update the timeline with real data
            const timelineContainer = document.getElementById('deliveryTimeline');
            if (timelineContainer) {
              timelineContainer.innerHTML = ''; // Clear existing
              
              // Scroll to top when new data loads
              timelineContainer.parentElement.scrollTop = 0;
              
                             // Create timeline based on status value
               const timelineItems = createTimelineFromStatus(result.data.status, result.data.courier, lrNo, result.data.trackingData, orderDate, lrDate, chargeableWeight, packageWeight, orderIdForDisplay);
              timelineContainer.innerHTML = timelineItems;
              
              // No need to add More info button separately as it's now part of the timeline design
            }
          } else {
            console.log('No tracking data available for LR:', lrNo);
            // Show a message when no tracking data
            const timelineContainer = document.getElementById('deliveryTimeline');
            if (timelineContainer) {
              timelineContainer.innerHTML = `
                <div class="card-body p-4">
                  <div class="text-center text-muted py-4">
                    <i class="fas fa-info-circle fa-3x mb-3 text-muted"></i>
                    <h5 class="text-dark mb-2">No tracking information available yet for LR: ${lrNo}</h5>
                    <p class="text-muted mb-0">Tracking data will appear here once the shipment is processed</p>
                  </div>
                </div>
              `;
              
              // No "More info" button when there's no data
            }
          }
        } catch (error) {
          console.error('Error fetching tracking data:', error);
          // Show error message
          const timelineContainer = document.getElementById('deliveryTimeline');
          if (timelineContainer) {
                        timelineContainer.innerHTML = `
                <div class="card-body p-4">
                  <div class="text-center text-danger py-4">
                    <i class="fas fa-exclamation-triangle fa-3x mb-3 text-danger"></i>
                    <h5 class="text-danger mb-2">Error loading tracking data</h5>
                    <p class="text-danger mb-0">Please try again later</p>
                  </div>
                </div>
              `;
            
            // No "More info" button when there's an error
          }
        }
      }

             // Create timeline based on status value
       function createTimelineFromStatus(status, courier, lrNo, trackingData = [], orderDate, lrDate, chargeableWeight = null, packageWeight = null, orderIdForDisplay = null) {
        const currentDate = new Date();
        const formattedDate = currentDate.toLocaleDateString('en-IN');
        const formattedTime = currentDate.toLocaleTimeString('en-IN', { 
          hour: '2-digit', 
          minute: '2-digit',
          hour12: true 
        });

        // Define timeline steps based on status
        const timelineSteps = getTimelineSteps(status, courier, trackingData, orderDate, lrDate);
        
        let timelineHTML = `
          <div class="tracker-container" style="max-width: 320px; width: 100%; border: 1px solid #d1d5db; border-radius: 0.5rem; padding: 1rem; color: #4b5563; background: #fff;">
            <div class="header" style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 1rem; font-weight: 600; color: #4b5563; font-size: 14px;">
              
              <span>Order ID #${safe(orderIdForDisplay, '-')}</span>
            </div>

            <div class="info-row" style="display: flex; justify-content: space-between; margin-bottom: 0.25rem; font-size: 11px; color: #4b5563; font-weight: 600;">
              <div>AWB No</div>
              <div class="value" style="font-weight: 400; display: flex; align-items: center; gap: 0.25rem; color: #4b5563;">
                <span>${lrNo}</span>
                <i class="fas fa-copy" style="color: #3b82f6; cursor: pointer; font-size: 12px;" onclick="copyToClipboard('${lrNo}')" title="Copy AWB Number"></i>
              </div>
            </div>
            <div class="info-row package-details" style="display: flex; justify-content: space-between; margin-bottom: 0.25rem; font-size: 11px; color: #4b5563; font-weight: 600;">
              <div>Package Details</div>
              <div class="value" style="font-weight: 400; display: flex; align-items: center; gap: 0.25rem; color: #4b5563;">
                <i class="fas fa-box" style="font-size: 14px; color: #4b5563;"></i>
                <span>Standard Package</span>
              </div>
            </div>
            <div class="info-row" style="display: flex; justify-content: space-between; margin-bottom: 0.25rem; font-size: 11px; color: #4b5563; font-weight: 600;">
              <div>Weight</div>
                             <div id="timelineWeight">${packageWeight ? (packageWeight + ' kg') : 'N/A'}</div>
            </div>

            <div  style="display: flex; gap: 1rem; margin-top: 1rem;">
              <div class="timeline-icons" style="position: relative;display: flex;flex-direction: column;align-items: end;gap: 1.5rem;width: 2rem;">
                <div style="content: ''; position: absolute; top: 1.75rem; left: 50%; transform: translateX(-50%); width: 2px; height: calc(100% - 3.5rem); background-color: #60a5fa; z-index: 0;"></div>
        `;
        
        // Add timeline icons
        timelineSteps.forEach((step, index) => {
          const isCompleted = step.completed;
          const iconClass = getTimelineIcon(step.title);
          
          timelineHTML += `
            <div class="timeline-icon" title="${step.title}" style="width: 2rem; height: 2rem; background-color: ${isCompleted ? '#60a5fa' : '#d1d5db'}; color: white; border-radius: 50%; display: flex; justify-content: center; align-items: center; z-index: 1; font-size: 14px;">
              <i class="${iconClass}"></i>
            </div>
          `;
        });
        
        timelineHTML += `
              </div>
              <div class="timeline-texts" style="flex: 1; font-size: 11px; color: #4b5563; font-weight: 400; line-height: 1.2;">
        `;
        
        // Add timeline texts
        timelineSteps.forEach((step, index) => {
          const isLastStep = index === timelineSteps.length - 1;
          
          timelineHTML += `
            <div style="margin-bottom: 1.5rem;">
              <div class="title" style="font-weight: 600; font-size: 12px; color: #374151; margin-bottom: 0.15rem;">${step.title}</div>
              ${step.date ? `<div class="date" style="margin-bottom: 0.15rem;">${step.date}, ${step.time || formattedTime}</div>` : ''}
              ${step.description ? `<div class="subtext" style="color: #93c5fd; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 160px;" title="${step.description}">${step.description}</div>` : ''}
              ${isLastStep ? `
                <div class="links" style="display: flex; flex-direction: column; gap: 0.25rem; font-weight: 600; color: #3b82f6;">
                  <a href="#" onclick="showMoreInfo('${lrNo}', '${courier}', '${status}', '${lrNo}')" style="text-decoration: none;">More info</a>
                </div>
              ` : ''}
            </div>
          `;
        });
        
        timelineHTML += `
              </div>
            </div>

            <div class="footer" style="margin-top: 1rem; border-top: 1px solid #d1d5db; padding-top: 0.5rem; font-size: 11px; color: #4b5563; display: flex; justify-content: space-between; align-items: center; font-weight: 400;">
              <div class="label" style="font-weight: 600; display: flex; align-items: center; gap: 0.25rem;">
                Chargeable Weight <i class="fas fa-info-circle" style="font-size: 12px;"></i>
              </div>
              <div id="timelineChargeableWeight">${chargeableWeight ? (chargeableWeight + ' kg') : 'N/A'}</div>
            </div>
          </div>
        `;
        
        return timelineHTML;
      }

      // Helper function to get appropriate icon for each timeline step
      function getTimelineIcon(title) {
        const iconMap = {
          'Order Received': 'fas fa-shopping-bag',
          'Ready To Ship': 'fas fa-box',
          'Scheduled for Pickup': 'fas fa-truck-loading',
          'In-transit': 'fas fa-truck',
          'Out for delivery': 'fas fa-motorcycle',
          'Delivered': 'fas fa-clipboard-check',
          'RTO - In Transit': 'fas fa-undo',
          'RTO - Returned': 'fas fa-undo-alt'
        };
        return iconMap[title] || 'fas fa-circle';
      }

      // Get timeline steps based on status value
      function getTimelineSteps(status, courier, trackingData = [], orderDate, lrDate) {
        const currentDate = new Date();
        const currentDateStr = currentDate.toLocaleDateString('en-IN', { day: '2-digit', month: 'short', year: 'numeric' });
        const currentTimeStr = currentDate.toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit', hour12: true });
        
        // Helper function to format dates
        function formatINDate(date) {
          return date.toLocaleDateString('en-IN', { day: '2-digit', month: 'short', year: 'numeric' });
        }
        
        function formatINDateTime(date) {
          return date.toLocaleDateString('en-IN', { day: '2-digit', month: 'short', year: 'numeric' }) + ', ' + 
                 date.toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit', hour12: true });
        }
        
        // Determine Order Received date and time
        let orderReceivedDate = currentDateStr;
        let orderReceivedTime = currentTimeStr;
        if (orderDate) {
          try {
            const orderDateObj = new Date(orderDate);
            orderReceivedDate = formatINDate(orderDateObj);
            orderReceivedTime = orderDateObj.toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit', hour12: true });
          } catch (e) {
            console.warn('Invalid order date:', orderDate);
          }
        }
        
        // Determine Ready To Ship date and time
        let readyToShipDate = currentDateStr;
        let readyToShipTime = currentTimeStr;
        
        if (trackingData && trackingData.length > 0) {
          // Look for the earliest 'Data Received', 'MANIFESTED', or 'Booked' scan
          const readyToShipScans = trackingData.filter(scan => {
            const scanDesc = (scan.scan_description || scan.scan || '').toLowerCase();
            return scanDesc.includes('data received') || 
                   scanDesc.includes('manifested') || 
                   scanDesc.includes('booked') ||
                   scanDesc.includes('pickup') ||
                   scanDesc.includes('out for pickup');
          });
          
          if (readyToShipScans.length > 0) {
            // Sort by date to get the earliest
            readyToShipScans.sort((a, b) => {
              const dateA = new Date(a.scan_datetime || a.scan_date || a.strActionDate);
              const dateB = new Date(b.scan_datetime || b.scan_date || b.strActionDate);
              return dateA - dateB;
            });
            
            const earliestScan = readyToShipScans[0];
            try {
              const scanDate = new Date(earliestScan.scan_datetime || earliestScan.scan_date || earliestScan.strActionDate);
              readyToShipDate = formatINDate(scanDate);
              readyToShipTime = scanDate.toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit', hour12: true });
            } catch (e) {
              console.warn('Invalid scan date:', earliestScan);
            }
          } else if (lrDate) {
            // Fallback to LR date if no scan found
            try {
              const lrDateObj = new Date(lrDate);
              readyToShipDate = formatINDate(lrDateObj);
              readyToShipTime = lrDateObj.toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit', hour12: true });
            } catch (e) {
              console.warn('Invalid LR date:', lrDate);
            }
          }
        } else if (lrDate) {
          // Fallback to LR date if no tracking data
          try {
            const lrDateObj = new Date(lrDate);
            readyToShipDate = formatINDate(lrDateObj);
            readyToShipTime = lrDateObj.toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit', hour12: true });
          } catch (e) {
            console.warn('Invalid LR date:', lrDate);
          }
        }
        
        const steps = [
          {
            title: 'Order Received',
            statusText: 'Order Created',
            statusClass: 'order-received',
            completed: true,
            date: orderReceivedDate,
            time: orderReceivedTime
          },
          {
            title: 'Ready To Ship',
            statusText: 'Processing',
            statusClass: 'ready-to-ship',
            completed: true,
            date: readyToShipDate,
            time: readyToShipTime
          },
          {
            title: 'Scheduled for Pickup',
            statusText: 'Pickup Scheduled',
            statusClass: 'scheduled-pickup',
            completed: status >= 1,
            date: status >= 1 ? currentDateStr : null,
            time: status >= 1 ? currentTimeStr : null
          },
          {
            title: 'In-transit',
            statusText: 'In Transit',
            statusClass: 'in-transit',
            completed: status >= 3,
            date: status >= 3 ? currentDateStr : null,
            time: status >= 3 ? currentTimeStr : null,
                            description: null
          },
          {
            title: 'Out for delivery',
            statusText: 'Out For Delivery',
            statusClass: 'out-delivery',
            completed: status >= 8,
            date: status >= 8 ? currentDateStr : null,
            time: status >= 8 ? currentTimeStr : null
          },
          {
            title: 'RTO - In Transit',
            statusText: 'RTO Processing',
            statusClass: 'rto',
            completed: status >= 7,
            date: status >= 7 ? currentDateStr : null,
            time: status >= 7 ? currentTimeStr : null
          },
          {
            title: 'RTO - Returned',
            statusText: 'RTO Completed',
            statusClass: 'rto',
            completed: status >= 5,
            date: status >= 5 ? currentDateStr : null,
            time: status >= 5 ? currentTimeStr : null
          }
        ];

        // Filter steps based on courier and status
        if (courier === 'XPRESSBEES') {
          if (status === 1) {
            return steps.slice(0, 3); // Order Received, Ready To Ship, Scheduled for Pickup
          } else if (status === 3) {
            return steps.slice(0, 4); // Add In-transit
          } else if (status === 8) {
            return steps.slice(0, 5); // Add Out for delivery
          } else if (status === 4) {
            return steps.slice(0, 6); // Add RTO - In Transit
          } else if (status === 5) {
            return steps.slice(0, 7); // Add RTO - Returned
          }
        } else if (courier === 'DELHIVERY') {
          if (status === 1) {
            return steps.slice(0, 3);
          } else if (status === 3) {
            return steps.slice(0, 4);
          } else if (status === 8) {
            return steps.slice(0, 5);
          } else if (status === 4) {
            return steps.slice(0, 6);
          }
        }

        return steps.slice(0, 3); // Default to first 3 steps
      }

      function getStatusClass(code, courier) {
        const statusMap = {
          'XPRESSBEES': {
            'PP': 'status-pickup',
            'MANIFESTED': 'status-manifested',
            'IN_TRANSIT': 'status-in-transit',
            'DELIVERED': 'status-delivered',
            'OUT_FOR_PICKUP': 'status-pickup',
            'DATA_RECEIVED': 'status-manifested'
          },
          'DELHIVERY': {
            'PP': 'status-pickup',
            'OFD': 'status-out-for-delivery',
            'DL': 'status-delivered',
            'UND': 'status-undelivered'
          },
          'DTDC': {
            'PCUP': 'status-pickup',
            'IN_TRANSIT': 'status-in-transit',
            'DL': 'status-delivered',
            'RTO': 'status-rto'
          }
        };
        
        return statusMap[courier]?.[code] || 'status-default';
      }

      function getStatusText(code, courier) {
        const statusTextMap = {
          'PP': 'Pickup',
          'MANIFESTED': 'Manifested',
          'IN_TRANSIT': 'In Transit',
          'DELIVERED': 'Delivered',
          'OFD': 'Out For Delivery',
          'UND': 'Undelivered',
          'PCUP': 'Picked Up',
          'RTO': 'RTO',
          'OUT_FOR_PICKUP': 'Out For Pickup',
          'DATA_RECEIVED': 'Data Received'
        };
        
        return statusTextMap[code] || code;
      }

      function formatDate(dateString) {
        if (!dateString) return 'N/A';
        try {
          return new Date(dateString).toLocaleDateString('en-IN');
        } catch {
          return dateString;
        }
      }

      function formatDateTime(dateTimeString) {
        if (!dateTimeString) return 'N/A';
        try {
          const date = new Date(dateTimeString);
          return date.toLocaleTimeString('en-IN', { 
            hour: '2-digit', 
            minute: '2-digit',
            hour12: true 
          });
        } catch {
          return dateTimeString;
        }
      }

      // Show more info modal
      function showMoreInfo(lrNo, courier, status, dataKey) {
        // Get the data from global storage
        const apiData = globalTrackingData[dataKey];
        
        // Find the order data to get weight information
        const orderData = allOrders.find(order => order.lr_no === lrNo);
        const chargeableWeightDisplay = orderData ? safe(orderData.chargeable_weight, orderData.weight, 'N/A') : 'N/A';
        
        const statusText = getStatusTextForStatus(status, courier);
        
        Swal.fire({
          title: 'Transit History',
          html: `
            <div class="text-start">
              <div class="mb-3">
                <h6 class="fw-bold text-primary">All tracking history details</h6>
                <div class="mt-2">
                  <strong>Chargeable Weight:</strong> ${/^\d+(\.\d+)?$/.test(String(chargeableWeightDisplay)) ? `${chargeableWeightDisplay} kg` : chargeableWeightDisplay}
                </div>
              </div>
              
              ${apiData && apiData.trackingData && apiData.trackingData.length > 0 ? `
                <div class="transit-timeline" style="max-height: 400px; overflow-y: auto; position: relative;">
                  <div class="timeline-line" style="height: 48%; top: 14px; left: 14px; transform: translateX(-50%); opacity: 1; border: 1px dashed var(--clr-primary); position: absolute;"></div>
                  
                  ${apiData.trackingData.map((track, index) => `
                    <div class="transit-event ${index === apiData.trackingData.length - 1 ? 'last-event' : ''}">
                      <div class="transit-circle"></div>
                      <div class="transit-content">
                        <div class="transit-date">${new Date(track.scan_datetime).toLocaleDateString('en-IN')}, ${new Date(track.scan_datetime).toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit' })}</div>
                        <div class="transit-description">${track.scan_description} at ${track.location}</div>
                      </div>
                    </div>
                  `).join('')}
                </div>
              ` : `
                <div class="transit-timeline" style="max-height: 400px; overflow-y: auto; position: relative;">
                  <div class="timeline-line" style=" height: 48%;  top: 14px;left: 14px;transform: translateX(-50%);opacity: 1;border: 1px dashed var(--clr-primary);position: absolute;"></div>
                 
                  
                  
                  <div class="transit-event">
                    <div class="transit-circle"></div>
                    <div class="transit-content">
                      <div class="transit-date">Current</div>
                      <div class="transit-description">Order will updated soon</div>
                    </div>
                  </div>
                </div>
              `}
            </div>
          `,
          showCloseButton: true,
          showConfirmButton: false,
          width: '600px',
          customClass: {
            container: 'custom-swal-container'
          }
        });
      }
      // Get status text for status value
      function getStatusTextForStatus(status, courier) {
        const statusMap = {
          1: 'Pickup/Manifested',
          2: 'Manifested',
          3: 'In Transit',
          4: 'Delivered',
          5: 'RTO Delivered',
          6: 'Exception/NDR',
          7: 'RTO In Transit',
          8: 'Out For Delivery',
          9: 'Not Delivered',
          10: 'RTO Booked'
        };
        
        return statusMap[status] || `Status ${status}`;
      }



      // Copy to clipboard function
      function copyToClipboard(text) {
        if (navigator.clipboard && window.isSecureContext) {
          navigator.clipboard.writeText(text).then(() => {
            // Show success feedback
            const copyIcon = event.target;
            const originalClass = copyIcon.className;
            copyIcon.className = 'fas fa-check';
            copyIcon.style.color = '#10b981';
            setTimeout(() => {
              copyIcon.className = originalClass;
              copyIcon.style.color = '#3b82f6';
            }, 1000);
          }).catch(err => {
            console.error('Failed to copy: ', err);
          });
        } else {
          // Fallback for older browsers
          const textArea = document.createElement('textarea');
          textArea.value = text;
          textArea.style.position = 'fixed';
          textArea.style.left = '-999999px';
          textArea.style.top = '-999999px';
          document.body.appendChild(textArea);
          textArea.focus();
          textArea.select();
          try {
            document.execCommand('copy');
            // Show success feedback
            const copyIcon = event.target;
            const originalClass = copyIcon.className;
            copyIcon.className = 'fas fa-check';
            copyIcon.style.color = '#10b981';
            setTimeout(() => {
              copyIcon.className = originalClass;
              copyIcon.style.color = '#3b82f6';
            }, 1000);
          } catch (err) {
            console.error('Failed to copy: ', err);
          }
          document.body.removeChild(textArea);
        }
      }

      // Make all functions globally accessible
      window.updateTimelineWithRealData = updateTimelineWithRealData;
      window.getStatusClass = getStatusClass;
      window.getStatusText = getStatusText;
      window.formatDate = formatDate;
      window.formatDateTime = formatDateTime;
      window.showMoreInfo = showMoreInfo;
      window.createTimelineFromStatus = createTimelineFromStatus;
      window.getTimelineSteps = getTimelineSteps;

      window.copyToClipboard = copyToClipboard;
    })();
  </script>

  <!-- Bootstrap JavaScript -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

  <!-- Filter Sidebar Offcanvas -->
  <div class="offcanvas offcanvas-end" tabindex="-1" id="filterSidebar"
    aria-labelledby="filterSidebarLabel" data-bs-backdrop="false" data-bs-keyboard="false">
    <div class="offcanvas-header">
      <h5 id="filterSidebarLabel" class="mb-0">
        <i class="fas fa-sliders-h me-2"></i>Filter Orders
      </h5>
      <button type="button" class="btn-close text-reset"
        onclick="if(window.closeFilterManually) { console.log('❌ Close button clicked'); window.closeFilterManually(); }" aria-label="Close"></button>
    </div>

    <div class="offcanvas-body">
      <!-- Selected range indicator (inside drawer) -->
      <div id="drawerRangePill"
        class="alert py-3 d-flex align-items-center gap-3 mb-4"
        style="border-radius: 12px;">
        <div class="d-flex align-items-center justify-content-center"
          style="width: 40px; height: 40px; background: rgba(59, 130, 246, 0.1); border-radius: 50%;">
          <i class="far fa-clock text-primary"></i>
        </div>
        <div>
          <div class="fw-semibold text-dark mb-1">Selected Date Range</div>
          <div class="text-primary fw-bold" id="drawerRangeText">Today</div>
        </div>
      </div>

      <!-- Date Range -->
      <div class="mb-4">
        <label class="form-label fw-semibold text-dark">Date Range</label>
        <div class="row g-2">
          <div class="col-6">
            <div class="input-group">
              <span class="input-group-text bg-light border-end-0">
                <i class="far fa-calendar-alt text-muted"></i>
              </span>
              <input type="date" id="filter-min-date"
                class="form-control border-start-0" placeholder="From">
            </div>
          </div>
          <div class="col-6">
            <div class="input-group">
              <span class="input-group-text bg-light border-end-0">
                <i class="far fa-calendar-alt text-muted"></i>
              </span>
              <input type="date" id="filter-max-date"
                class="form-control border-start-0" placeholder="To">
            </div>
          </div>
        </div>
      </div>

      <!-- Quick Ranges -->
      <div class="mb-4">
        <label class="form-label fw-semibold text-dark">Quick Ranges</label>
        <div class="dropdown">
          <button class="btn btn-outline-secondary dropdown-toggle w-100"
            type="button" id="filterQuickRangeDropdown" data-bs-toggle="dropdown"
            aria-expanded="false">
            <i class="far fa-calendar-alt me-2"></i>Select Quick Range
          </button>
          <ul class="dropdown-menu w-100"
            aria-labelledby="filterQuickRangeDropdown">
            <li><a class="dropdown-item filter-date-range-option" href="#"
                data-range="today">
                <i class="far fa-calendar-alt me-2"></i>Today
              </a></li>
            <li><a class="dropdown-item filter-date-range-option" href="#"
                data-range="yesterday">
                <i class="far fa-calendar-alt me-2"></i>Yesterday
              </a></li>
            <li><a class="dropdown-item filter-date-range-option" href="#"
                data-range="last7days">
                <i class="far fa-calendar-alt me-2"></i>Last 7 Days
              </a></li>
            <li><a class="dropdown-item filter-date-range-option" href="#"
                data-range="last30days">
                <i class="far fa-calendar-alt me-2"></i>Last 30 Days
              </a></li>
            <li><a class="dropdown-item filter-date-range-option" href="#"
                data-range="thisMonth">
                <i class="far fa-calendar-alt me-2"></i>This Month
              </a></li>
            <li><a class="dropdown-item filter-date-range-option" href="#"
                data-range="lastMonth">
                <i class="far fa-calendar-alt me-2"></i>Last Month
              </a></li>
          </ul>
        </div>
      </div>

      <!-- Payment Mode and Destination Zone in one row -->
      <div class="row g-3 mb-4">
        <div class="col-6">
          <label for="filterPaymentMode"
            class="form-label fw-semibold text-dark">Payment Mode</label>
          <select id="filterPaymentMode" class="form-select">
            <option value="">All</option>
            <option value="prepaid">Prepaid</option>
            <option value="cod">COD</option>
          </select>
        </div>
        <div class="col-6">
          <label for="filterDestinationZone"
            class="form-label fw-semibold text-dark">Destination
            Zone</label>
          <select id="filterDestinationZone" class="form-select">
            <option value="">All</option>
            <option value="north">North</option>
            <option value="south">South</option>
            <option value="east">East</option>
            <option value="west">West</option>
            <option value="central">Central</option>
          </select>
        </div>
      </div>

      <!-- Tagged API -->
      <div class="mb-4">
        <label for="filterTaggedApi" class="form-label fw-semibold text-dark">Courier
        </label>
        <select id="filterTaggedApi" class="form-select">
          <option value="">All</option>
          <option value="XPRESSBEES">Xpressbess</option>
          <option value="DTDC">DTDC</option>
          <option value="DELHIVERY">Delhivery</option>
        </select>
      </div>

      <!-- Filter Buttons -->
      <div class="d-flex gap-2 mb-3">
        <button id="filterResetBtn" class="btn btn-outline-secondary btn-sm"
          type="button">
          <i class="fas fa-undo me-1"></i>Reset
        </button>
        <button id="filterApplyBtn"
          class="btn  flex-grow-1 py-3 fw-semibold shadow-sm"
          style="background: linear-gradient(90deg, #2f71f0c9 0%, #367cf4 100%);"
          type="button" style="border-radius: 12px;">
          <span class="default-text" style="color: #fff;">
            <i class="fas fa-filter me-2"></i>Apply Filters
          </span>
          <span class="spinner-border spinner-border-sm d-none" role="status"
            aria-hidden="true"></span>
        </button>
      </div>

     
    </div>
  </div>


</body>

</html>