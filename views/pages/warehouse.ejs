<!DOCTYPE html>
<html lang="hi">
  <head>
    <%- include('../partials/head') %>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    
<link
href="assets/libs/tabulator-tables/css/tabulator_bootstrap5.min.css"
rel="stylesheet"
type="text/css" />
<link
href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.css" />
<link rel="stylesheet"
href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css">
<script
src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>

<style>

table.dataTable tbody tr {
  background-color: #fcfeed !important;
}
table.dataTable thead th, table.dataTable thead td {
  padding: 10px 18px;
  border-bottom: 1px solid #e8e6e6 !important;
}
table.dataTable.no-footer {
  border-bottom: 1px solid #e8e6e6 !important;
}
.overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  z-index: 999;
}
.form-label {
  font-weight: 500;
  color: #8a8a8a;
  font-family: inherit;
  text-transform: capitalize;
  font-size: small;
}


.popup-content {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  max-width: 100%;
  max-height: 100%;
  overflow: auto;
}

.form-control {
  width: 100%;
  padding: 8px;
  margin-bottom: 10px;
  /* border: 1px solid #ccc; */
  border-radius: 4px;
}

.hrlines {
  border: 1px solid #c3c3c3;
}

.table td {
  font-weight: 400;
  vertical-align: middle;
  border-color: #e8ebf3;
  border: 0px !important;
}/* Change the background color of <th> when hovered */
#detailsTable th:hover {
background-color: #f1f1f1; /* Light gray color on hover */
}

/* Change the background color of <td> when hovered */
#detailsTable tbody tr:hover td {
background-color: #e0f7fa; /* Light teal color on hover */
}

/* Optional: Add a transition effect for smooth hover */
#detailsTable th, #detailsTable td {
transition: background-color 0.3s ease;
}

.modal-content .modal-footer {
  border-top: none ;
}

/* Professional Blue Tone Pastel Design System */
:root {
  --primary-color: #3b82f6;
  --primary-dark: #1d4ed8;
  --primary-light: #dbeafe;
  --secondary-color: #64748b;
  --success-color: #0ea5e9;
  --warning-color: #0284c7;
  --danger-color: #0369a1;
  --light-bg: #f0f9ff;
  --border-color: #bfdbfe;
  --text-primary: #1e3a8a;
  --text-secondary: #475569;
  --shadow-sm: 0 1px 2px 0 rgb(59 130 246 / 0.05);
  --shadow-md: 0 4px 6px -1px rgb(59 130 246 / 0.1);
  --shadow-lg: 0 10px 15px -3px rgb(59 130 246 / 0.1);
  --radius: 12px;
  --radius-sm: 8px;
}

/* Warehouse Grid Layout */
.warehouse-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 0.75rem;
  padding: 0.5rem 0;
}

/* Warehouse Card */
.warehouse-card {
  background: linear-gradient(135deg, #ffffff 0%, #f8faff 100%);
  border: 1px solid var(--border-color);
  border-radius: var(--radius-sm);
  box-shadow: var(--shadow-sm);
  transition: all 0.3s ease;
  overflow: hidden;
}

.warehouse-card:hover {
  background: linear-gradient(135deg, #ffffff 0%, #f0f9ff 100%);
  box-shadow: var(--shadow-md);
  transform: translateY(-1px);
}

/* Card Header */
.warehouse-card-header {
  background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
  padding: 0.75rem;
  border-bottom: 1px solid var(--border-color);
}

.client-info {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.client-logo {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  overflow: hidden;
  border: 2px solid var(--primary-light);
  background: white;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.client-logo img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.client-details {
  flex: 1;
  min-width: 0;
}

.client-name {
  margin: 0 0 0.25rem 0;
  color: var(--text-primary);
  font-weight: 600;
  font-size: 0.85rem;
  line-height: 1.2;
}

.warehouse-status {
  display: flex;
  align-items: center;
  gap: 0.25rem;
}

.status-badge {
  padding: 0.15rem 0.5rem;
  border-radius: 12px;
  font-size: 0.65rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.3px;
}

.status-active {
  background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
  color: var(--text-primary);
  border: 1px solid #93c5fd;
}

/* Card Body */
.warehouse-card-body {
  padding: 0.75rem;
}

.warehouse-title {
  margin: 0 0 0.75rem 0;
  color: var(--text-primary);
  font-weight: 700;
  font-size: 0.9rem;
  line-height: 1.2;
}

.info-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
  gap: 0.5rem;
}

.info-item {
  display: flex;
  align-items: flex-start;
  gap: 0.5rem;
  padding: 0.5rem;
  background: linear-gradient(135deg, #f8faff 0%, #f0f9ff 100%);
  border-radius: 8px;
  border: 1px solid var(--border-color);
}

.info-icon {
  width: 24px;
  height: 24px;
  border-radius: 50%;
  background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.info-icon i {
  color: var(--primary-color);
  font-size: 0.7rem;
}

.info-content {
  flex: 1;
  min-width: 0;
}

.info-content label {
  display: block;
  font-size: 0.65rem;
  font-weight: 600;
  color: var(--text-secondary);
  text-transform: uppercase;
  letter-spacing: 0.3px;
  margin-bottom: 0.15rem;
  line-height: 1.1;
}

.info-content span {
  display: block;
  color: var(--text-primary);
  font-weight: 500;
  font-size: 0.75rem;
  line-height: 1.2;
}

.slot-badge {
  background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
  color: var(--text-primary);
  padding: 0.15rem 0.35rem;
  border-radius: 4px;
  font-size: 0.65rem;
  font-weight: 600;
  border: 1px solid #93c5fd;
}

/* Card Footer */
.warehouse-card-footer {
  background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
  padding: 0.75rem;
  border-top: 1px solid var(--border-color);
}

.action-buttons {
  display: flex;
  gap: 0.5rem;
  justify-content: flex-end;
}

.action-buttons .btn {
  display: flex;
  align-items: center;
  gap: 0.3rem;
  padding: 0.5rem 0.8rem;
  border-radius: 6px;
  font-weight: 600;
  font-size: 0.75rem;
  transition: all 0.3s ease;
  border: none;
  text-decoration: none;
}

.btn-edit {
  background: linear-gradient(135deg, var(--warning-color) 0%, var(--danger-color) 100%);
  color: white;
}

.btn-edit:hover {
  background: linear-gradient(135deg, var(--danger-color) 0%, var(--warning-color) 100%);
  transform: translateY(-1px);
  box-shadow: var(--shadow-md);
}

.btn-view {
  background: linear-gradient(135deg, var(--success-color) 0%, var(--warning-color) 100%);
  color: white;
}

.btn-view:hover {
  background: linear-gradient(135deg, var(--warning-color) 0%, var(--success-color) 100%);
  transform: translateY(-1px);
  box-shadow: var(--shadow-md);
}

/* Empty State */
.no-warehouses {
  grid-column: 1 / -1;
  text-align: center;
  padding: 2rem 1rem;
}

.empty-state {
  max-width: 350px;
  margin: 0 auto;
}

.empty-state i {
  color: var(--primary-color);
  margin-bottom: 0.75rem;
  font-size: 3rem;
}

.empty-state h4 {
  color: var(--text-primary);
  margin-bottom: 0.5rem;
  font-size: 1.1rem;
}

.empty-state p {
  color: var(--text-secondary);
  margin: 0;
  font-size: 0.85rem;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .warehouse-grid {
    grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
    gap: 0.5rem;
  }
}

@media (max-width: 768px) {
  .warehouse-grid {
    grid-template-columns: 1fr;
    gap: 0.5rem;
    padding: 0.25rem;
  }
  
  .warehouse-card {
    margin: 0 0.25rem;
  }
  
  .info-grid {
    grid-template-columns: 1fr;
  }
  
  .action-buttons {
    flex-direction: column;
  }
  
  .action-buttons .btn {
    justify-content: center;
  }
}

@media (max-width: 480px) {
  .warehouse-card-header,
  .warehouse-card-body,
  .warehouse-card-footer {
    padding: 0.5rem;
  }
  
  .client-info {
    flex-direction: column;
    text-align: center;
    gap: 0.5rem;
  }
  
  .client-logo {
    width: 35px;
    height: 35px;
  }
  
  .info-item {
    padding: 0.4rem;
  }
  
  .action-buttons .btn {
    padding: 0.4rem 0.7rem;
    font-size: 0.7rem;
  }
  .activeDaysBtn {
  background-color: #0d6efd;  /* Bootstrap primary blue */
  color: #fff;
  border-color: #0d6efd;
}
}

</style>
<link
href="assets/libs/mobius1-selectr/selectr.min.css"
rel="stylesheet"
type="text/css" />
<link
href="assets/libs/huebee/huebee.min.css"
rel="stylesheet"
type="text/css" />
<link
href="assets/libs/vanillajs-datepicker/css/datepicker.min.css"
rel="stylesheet"
type="text/css" />
  </head>

  <body data-theme="light" class="font-nunito">
    <div id="wrapper" class="theme-cyan">

      <!-- HEADER -->
      <%- include('../partials/header') %>

      <!-- SIDEBAR -->
      <%- include('../partials/left-sidebar') %>
      <%- include('../partials/right-iconbar') %>

      <!-- MAIN CONTENT -->
      <div id="main-content">
        <div class="container pt-4">
          <div class="block-header">
            <div class="row">
              <div class="col-lg-6 col-md-6 col-sm-12">
                <h2>Warehouse Manager</h2>
                <ul class="breadcrumb">
                  <li class="breadcrumb-item">
                    <a href="/index"><i class="fa fa-dashboard"></i></a>
                  </li>
                  <li class="breadcrumb-item">System Setting</li>
                  <li class="breadcrumb-item active">Warehouse</li>
                </ul>
              </div>
              <!-- <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="d-flex flex-row-reverse">
                  <div class="page_action">
                    <button type="button" class="btn btn-primary">
                      <i class="fa fa-download"></i> Download report
                    </button>
                    <button type="button" class="btn btn-secondary">
                      <i class="fa fa-plus"></i> Add new
                    </button>
                  </div>
                  <div class="p-2 d-flex"></div>
                </div>
              </div> -->
            </div>
          </div>

          <!-- Add your page-specific content here -->
          <div>
             
        
            <div class="row">
              <div class="text-end ">
                
                <button class="btn px-2 py-1 btn-primary"
                        data-bs-toggle="modal" 
                        data-bs-target="#pickupLocationModal"
                        id="addNewWarehouseButton">
                    <i class="ti ti-plus menu-icon"></i>&nbsp;Add New Warehouse
                </button>
                
            </div>
            <div class="col-md-3">
              <form class="d-flex">
                  <div class="input-group">
                    <input type="text" class="form-control" id="search-input" placeholder="Search" aria-label="Search" aria-describedby="basic-addon2">
                    <button class="btn btn-soft-secondary" type="button" id="button-addon2" style="width: 40px; height: 80%;">
                        <i class="fas fa-search" style="font-size: 14px;"></i>
                    </button>
                  </div>
              </form>
            </div>
              <div class="">
                <div class="col-sm-12">
                  <div class="card-body">
                    <div class="col-sm-12">
                      <!-- Responsive Warehouse Grid -->
                      <div class="warehouse-grid" id="warehouseGrid">
                        <% if (pickupData && pickupData.length > 0) { %>
                          <% pickupData.forEach(item => { %>
                            <div class="warehouse-card">
                              <!-- Card Header -->
                              <div class="warehouse-card-header">
                                <div class="client-info">
                                  <div class="client-logo">
                                    <img src="<%= item.client_logo %>" alt="Client Logo">
                                  </div>
                                  <div class="client-details">
                                    <h6 class="client-name"><%= item.client_company %></h6>
                                    <div class="warehouse-status">
                                      <span class="status-badge status-active">Active</span>
                                    </div>
                                  </div>
                                </div>
                              </div>

                              <!-- Card Body -->
                              <div class="warehouse-card-body">
                                <h5 class="warehouse-title"><%= item.warehouse_name %></h5>
                                
                                <div class="info-grid">
                                  <div class="info-item">
                                    <div class="info-icon">
                                      <i class="fas fa-map-marker-alt text-primary"></i>
                                    </div>
                                    <div class="info-content">
                                      <label>Address</label>
                                      <span><%= item.warehouse_address %></span>
                                    </div>
                                  </div>

                                  <div class="info-item">
                                    <div class="info-icon">
                                      <i class="fas fa-map-pin text-primary"></i>
                                    </div>
                                    <div class="info-content">
                                      <label>Pincode</label>
                                      <span><%= item.warehouse_pincode %></span>
                                    </div>
                                  </div>

                                  <div class="info-item">
                                    <div class="info-icon">
                                      <i class="fas fa-city text-primary"></i>
                                    </div>
                                    <div class="info-content">
                                      <label>City</label>
                                      <span><%= item.warehouse_city %></span>
                                    </div>
                                  </div>

                                  <div class="info-item">
                                    <div class="info-icon">
                                      <i class="fas fa-globe text-primary"></i>
                                    </div>
                                    <div class="info-content">
                                      <label>State</label>
                                      <span><%= item.warehouse_state %></span>
                                    </div>
                                  </div>

                                  <div class="info-item">
                                    <div class="info-icon">
                                      <i class="fas fa-user text-primary"></i>
                                    </div>
                                    <div class="info-content">
                                      <label>Contact Person</label>
                                      <span><%= item.warehouse_person %></span>
                                    </div>
                                  </div>

                                  <div class="info-item">
                                    <div class="info-icon">
                                      <i class="fas fa-phone text-primary"></i>
                                    </div>
                                    <div class="info-content">
                                      <label>Contact No.</label>
                                      <span><%= item.warehouse_contact_person %></span>
                                    </div>
                                  </div>

                                  <div class="info-item">
                                    <div class="info-icon">
                                      <i class="fas fa-clock text-primary"></i>
                                    </div>
                                    <div class="info-content">
                                      <label>Working Hours</label>
                                      <span><%= item.working_hours_from %> - <%= item.working_hours_to %></span>
                                    </div>
                                  </div>

                                  <div class="info-item">
                                    <div class="info-icon">
                                      <i class="fas fa-calendar text-primary"></i>
                                    </div>
                                    <div class="info-content">
                                      <label>Preferred Slot</label>
                                      <span class="slot-badge"><%= item.preferred_slot %></span>
                                    </div>
                                  </div>
                                </div>
                              </div>

                              <!-- Card Footer -->
                              <div class="warehouse-card-footer">
                                <div class="action-buttons">
                                  <button class="btn btn-edit" data-id="<%= item.serial %>" data-type="pickup" title="Edit Warehouse">
                                    <i class="fa-solid fa-pen-to-square"></i>
                                    <span>Edit</span>
                                  </button>
                                  <button class="btn btn-view" data-id="<%= item.serial %>" data-type="pickup" title="View Details">
                                    <i class="fa-solid fa-eye"></i>
                                    <span>View</span>
                                  </button>
                                </div>
                              </div>
                            </div>
                          <% }) %>
                        <% } else { %>
                          <div class="no-warehouses">
                            <div class="empty-state">
                              <i class="fas fa-warehouse text-primary" style="font-size: 4rem; margin-bottom: 1rem;"></i>
                              <h4 class="text-primary">No Warehouses Found</h4>
                              <p class="text-secondary">Start by adding your first warehouse to get organized.</p>
                            </div>
                          </div>
                        <% } %>
                      </div>
        
                    </div>
                  </div>
        
                </div>
              </div>
              <!--end col-->
        
              <!-- Modal Structure -->
              <div class="modal" id="pickupLocationModal" tabindex="1"
                aria-labelledby="pickupLocationModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg" role="document"
                  style="margin-top: 10px;">
                  <!-- Removed modal-dialog-centered and added custom margin-top -->
                  <div class="modal-content p-3"
                    style="border: none; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
                    <!-- Modal Header -->
                    <div class="modal-header bg-light">
                      <h5 class="modal-title" id="pickupLocationModalLabel"
                        style="font-size: 1.25rem; color: #333;">Add Warehouse
                        Location</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                    </div>
        
                    <!-- Modal Body with Scrolling -->
                    <div class="modal-body"
                      style="max-height: 73vh;overflow-y: auto;overflow-y: scroll;scrollbar-color: #cae5ff #ffffff;scrollbar-width: thin;background-color: #f6fcff;border-radius: 16px;border: 4px solid #fff;">
                      <form id="warehouseForm">
                        <!-- Row 1: Facility Name and Contact Person -->
                        <div class="row">
                          
        
                        </div>
                        <div class="row mb-3">
                          <div class="col-sm-6">
                            <label for="warehouse-name" class="form-label fw-bold"
                              style="color: #8e8e8e;">Warehouse Name</label>
                            <input type="text"
                              class="form-control form-control-sm shadow-sm"
                              id="warehouse-name"
                              name="warehouse-name"
                              placeholder="Enter pickup-point name"
                              maxlength="150" required />
                            <small class="text-muted">Facility name cannot be edited
                              after saving.</small>
                          </div>
                          <div class="col-sm-6">
                            <label for="contactPersonName" class="form-label fw-bold"
                              style="color: #8e8e8e;">Contact Person Name*
                              </label>
                            <input type="text"
                              class="form-control form-control-sm shadow-sm"
                              id="contactPersonName"
                              placeholder="Enter contact person name"
                              style="color: #000000;">
                            <small class="text-muted">Provide a contact person for
                              assistance.</small>
                          </div>
                        </div>
        
                        <!-- Row 2: Pickup Location Contact and Email -->
                        <div class="row mb-3">
                          <div class="col-sm-6">
                            <label for="phone_warehouse" class="form-label fw-bold"
                              style="color: #8e8e8e;">Pickup Location Contact</label>
                            <div class="input-group">
                              <span class="input-group-text"
                                style="height:35px ;">+91</span>
                              <input type="text"
                                class="form-control form-control-sm shadow-sm"
                                id="phone_warehouse"
                                name="phone_warehouse"
                                placeholder="Contact person mobile"
                                required
                                style="color: #000000;">
                            </div>
                            <small class="text-muted">Enter a valid 10-digit mobile
                              number.</small>
                          </div>
                          <div class="col-sm-6">
                            <label for="email" class="form-label fw-bold"
                              style="color: #8e8e8e;">Email*</label>
                            <input type="email"
                              class="form-control form-control-sm shadow-sm"
                              id="email_warehouse"
                              name="email_warehouse"
                              placeholder="Enter email id"
                              required style="color: #000000;">
                            <small class="text-muted">Provide an email for official
                              correspondence.</small>
                          </div>
                        </div>
        
                        <!-- Row 3: Address Line -->
                        <div class="row mb-3">
                          <div class="col-12">
                            <label for="address" class="form-label fw-bold"
                              style="color: #8e8e8e;">Address Line</label>
                            <input type="text"
                              class="form-control form-control-sm shadow-sm"
                              id="warehouse_address"
                              name="address" placeholder="Enter address"
                              style="color: #000000;" required />
                            <small class="text-muted">Include complete address
                              details.</small>
                          </div>
                        </div>
        
                        <!-- Row 4: Pincode and City -->
                        <div class="row mb-3">
                          <div class="col-sm-3">
                            <label for="state" class="form-label fw-bold"
                              style="color: #8e8e8e;">State*</label>
                            <input type="text"
                              class="form-control form-control-sm shadow-sm"
                              id="state"
                              name="state" placeholder="Enter state"
                              style="color: #000000;" required />
                            <small class="text-muted">Specify the state for the pickup
                              location.</small>
                          </div>
                          <div class="col-sm-3">
                            <label for="pincodeOrigin" class="form-label fw-bold"
                              style="color: #8e8e8e;">Pincode*</label>
                              <input type="text" class="form-control border-0 shadow-sm p-2" id="pincodeOrigin" placeholder="Enter 6 digit Pickup Area Pincode" maxlength="6"  required>
                            <small class="text-muted">Provide a valid 6-digit
                              pincode.</small>
                          </div>
                          <div class="col-sm-3">
                            <label for="city" class="form-label fw-bold"
                              style="color: #8e8e8e;">City</label>
                            <input type="text"
                              class="form-control form-control-sm shadow-sm"
                              id="warehouse_city"
                              name="city"
                              placeholder="Enter city"
                              required style="color: #000000;">
                            <small class="text-muted">Specify the city for the pickup
                              location.</small>
                          </div>
        
                          <div class="col-sm-3">
                            <!-- Default Pickup Slot Section -->
                            <div class="m-0">
                              <label for="slot" class="form-label fw-bold"
                                style="color: #8e8e8e;">Default Pickup Slot</label>
        
                              <div class="dropdown"
                                style="box-shadow: 0 .125rem .25rem rgba(0, 0, 0, .075);border-radius: 2px;">
                                <button
                                  class="btn  btn-small w-100 d-flex align-items-center justify-content-between"
                                  type="button" id="defaultPickupSlotDropdown"
                                  aria-expanded="false"
                                  style="background-color: white;">
                                  <i class="fas fa-person-carry me-2"
                                    style="font-size: 10px;"></i>
                                  <span id="selectedSlotName">Select Slot</span>
                                  <!-- Default text -->
                                  <i class="fas fa-sort" style="font-size: 10px;"></i>
                                </button>
        
                                <ul class="dropdown-menu w-100" id="slot" name="slot"
                                  aria-labelledby="defaultPickupSlotDropdown">
                                  <!-- Slot Items with Icons -->
                                  <li class="dropdown-item d-flex align-items-center"
                                    data-slot="Early Morning" data-time="00:00:00 - 06:00:00">
                                    <i class="fa-solid fa-sunrise me-2"
                                      style="font-size: 10px;"></i>
                                    <div>
                                      <div>Early Morning</div>
                                      <small class="text-muted">00:00:00 -
                                        06:00:00</small>
                                    </div>
                                  </li>
                                  <li class="dropdown-item d-flex align-items-center"
                                    data-slot="Morning" data-time="06:00:00 - 10:00:00">
                                    <i class="fa-solid fa-sun me-2"
                                      style="font-size: 10px;"></i>
                                    <div>
                                      <div>Morning</div>
                                      <small class="text-muted">06:00:00 -
                                        10:00:00</small>
                                    </div>
                                  </li>
                                  <li class="dropdown-item d-flex align-items-center"
                                    data-slot="Mid Day" data-time="10:00:00 - 14:00:00">
                                    <i class="fa-solid fa-cloud-sun me-2"
                                      style="font-size: 10px;"></i>
                                    <div>
                                      <div>Mid Day</div>
                                      <small class="text-muted">10:00:00 -
                                        14:00:00</small>
                                    </div>
                                  </li>
                                  <li class="dropdown-item d-flex align-items-center"
                                    data-slot="Evening" data-time="14:00:00 - 18:00:00">
                                    <i class="fa-solid fa-sunset me-2"
                                      style="font-size: 10px;"></i>
                                    <div>
                                      <div>Evening</div>
                                      <small class="text-muted">14:00:00 -
                                        18:00:00</small>
                                    </div>
                                  </li>
                                  <li class="dropdown-item d-flex align-items-center"
                                    data-slot="Late Evening" data-time="18:00:00 -21:00:00">
                                    <i class="fa-solid fa-moon me-2"
                                      style="font-size: 10px;"></i>
                                    <div>
                                      <div>Late Evening</div>
                                      <small class="text-muted">18:00:00 -
                                        21:00:00</small>
                                    </div>
                                  </li>
                                  <li class="dropdown-item d-flex align-items-center"
                                    data-slot="Night" data-time="21:00:00 - 00:00:00">
                                    <i class="fa-solid fa-star me-2"
                                      style="font-size: 10px;"></i>
                                    <div>
                                      <div>Night</div>
                                      <small class="text-muted">21:00:00 -
                                        00:00:00</small>
                                    </div>
                                  </li>
                                </ul>
                              </div>
        
                              <small class="text-muted d-block mt-2">Pickup requests for
                                this location will be scheduled for this slot by default
                                unless you choose to override it.</small>
                            </div>
                          </div>
                        </div>
        
                        <!-- Working Days Section -->
                        <div>
                          <h5 class="fw-bold mb-3" style="color: #8e8e8e;">Working Days</h5>
                       <div class="d-flex flex-wrap gap-2">
                        <button type="button" data-day="Monday" onclick="toggleDay(this)" class="btn btn-outline-primary btn-sm">Monday</button>
                        <button type="button" data-day="Tuesday" onclick="toggleDay(this)" class="btn btn-outline-primary btn-sm">Tuesday</button>
                        <button type="button" data-day="Wednesday" onclick="toggleDay(this)" class="btn btn-outline-primary btn-sm">Wednesday</button>
                        <button type="button" data-day="Thursday" onclick="toggleDay(this)" class="btn btn-outline-primary btn-sm">Thursday</button>
                        <button type="button" data-day="Friday" onclick="toggleDay(this)" class="btn btn-outline-primary btn-sm">Friday</button>
                        <button type="button" data-day="Saturday" onclick="toggleDay(this)" class="btn btn-outline-primary btn-sm">Saturday</button>
                        <button type="button" data-day="Sunday" onclick="toggleDay(this)" class="btn btn-outline-primary btn-sm">Sunday</button>
                      </div>
                        </div>
                        
        
                        <!-- Return Details -->
                        <div class="mt-4">
                          <h5 class="fw-bold mb-3" style="color: #8e8e8e;">Return
                            Details</h5>
                          <div class="form-check">
                            <input class="form-check-input" type="checkbox"
                              id="sameAsPickup" onchange="toggleReturnDetails()">
                            <label class="form-check-label" for="sameAsPickup"
                              style="color: #8e8e8e;">Return address is the same as
                              pickup address</label>
                          </div>
        
                          <!-- Return Address Fields -->
                          <div class="row mb-3">
                            <div class="col-12">
                              <label for="returnAddressLine" class="form-label fw-bold"
                                style="color: #8e8e8e;">Address Line</label>
                              <input type="text"
                                class="form-control form-control-sm shadow-sm"
                                id="returnAddressLine"
                                placeholder="Enter return address"
                                style="color: #000000;">
                            </div>
                          </div>
        
                          <div class="row mb-3">
        
                            <div class="col-sm-4">
                              <label for="state" class="form-label fw-bold"
                                style="color: #8e8e8e;">State</label>
                              <input type="text"
                                class="form-control form-control-sm shadow-sm"
                                id="return_state"
                                name="state" placeholder="Enter state"
                                style="color: #000000;" required />
                              
                            </div>
                            <div class="col-sm-4">
                              <label for="returnPincode" class="form-label fw-bold"
                                style="color: #8e8e8e;">Pincode</label>
                              <input type="text"
                                class="form-control form-control-sm shadow-sm"
                                id="returnPincode" name="returnPincode"placeholder="Enter return pincode"
                                style="color: #000000;">
                            </div>
                            <div class="col-sm-4">
                              <label for="returnCity" class="form-label fw-bold"
                                style="color: #8e8e8e;">City</label>
                              <input type="text"
                                class="form-control form-control-sm shadow-sm"
                                id="returnCity" placeholder="Enter return city"
                                style="color: #000000;">
                            </div>
                          </div>
                        </div>
                        <!-- Modal Footer -->
                    <div class="modal-footer ">
                      <button type="button" class="btn btn-secondary btn-sm"
                        data-bs-dismiss="modal">Close</button>
                      <button type="button" class="btn btn-primary btn-sm"
                        id="addWarehouseDetails">Save</button>
                    </div>
                      </form>
                    </div>
                    
                  </div>
                </div>
              </div>
            </div>
          </div>
        </body>
        

        
        <link
          rel="stylesheet"
          type="text/css"
          href="https://cdn.datatables.net/1.13.1/css/dataTables.bootstrap4.min.css" />
        
        <script
          src="https://cdn.datatables.net/1.12.1/js/jquery.dataTables.min.js"></script>
        
        <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <link
          rel="stylesheet"
          href="https://cdn.datatables.net/1.10.24/css/jquery.dataTables.min.css" />
        <script
          src="https://cdn.datatables.net/1.10.24/js/jquery.dataTables.min.js"></script>
        
        <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <script
          src="https://cdn.datatables.net/1.13.1/js/jquery.dataTables.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        
        <script>
          let editmode = false;
        $(document).ready(function() {
          
            // Function to reset the modal fields
            function resetModal() {
                $('#warehouse-name').val('');
                $('#warehouse_address').val('');
              
                $('#warehouse_city').val('');
                $('#state').val('');
                $('#contactPersonName').val('');
                $('#phone_warehouse').val('');
                $('#email_warehouse').val('');
                $('#client-id').val('').prop('selected', false).prop('disabled',false); // Reset to default option
                // $('#client-id').val(warehouseData.client_id).prop('selected', true).prop('disabled', true);
        
                // Reset return details
                $('#returnAddressLine').val('');
                $('#return_state').val('');
                $('#returnPincode').val('');
                $('#returnCity').val('');
                $('.btn-outline-primary').removeClass('active'); // Remove active class from all buttons
                $('#sameAsPickup').prop('checked', false); // Uncheck the checkbox
        
                // Enable all fields for adding a new warehouse
                $('#warehouse-name').prop('disabled', false);
                $('#warehouse_address').prop('disabled', false);
              
                $('#warehouse_city').prop('disabled', false);
                $('#state').prop('disabled', false);
                $('#contactPersonName').prop('disabled', false);
                $('#phone_warehouse').prop('disabled', false);
                $('#email_warehouse').prop('disabled', false);
                $('#returnAddressLine').prop('disabled', false);
                $('#return_state').prop('disabled', false);
                $('#returnPincode').prop('disabled', false);
                $('#returnCity').prop('disabled', false);
            }
        
            // Handle Add New Warehouse button click
            $('#addNewWarehouseButton').on('click', function() {
                resetModal(); // Reset modal fields
                $('#addWarehouseDetails').show();
                $('#pickupLocationModalLabel').text('Add New Warehouse'); // Set modal title
                $('#pickupLocationModal').modal('show'); // Show the modal
            });
        
            // Handle Edit button click
            $('.btn-edit').on('click', function() {
                const warehouseId = $(this).data('id');
                editmode = true; // Set edit mode to true
                
                // Fetch warehouse data based on warehouseId using Axios
                axios.get(`/api/warehouses/${warehouseId}`)
                    .then(response => {
                        const warehouseData = response.data;
        
                        // Populate the modal fields with the warehouse data
                        $('#warehouse-name').val(warehouseData.warehouse_name).prop('disabled', true);
                        $('#warehouse_address').val(warehouseData.warehouse_address);
                        $('#pincodeOrigin').val(warehouseData.warehouse_pincode);
                        $('#warehouse_city').val(warehouseData.warehouse_city);
                        $('#state').val(warehouseData.warehouse_state);
                        $('#contactPersonName').val(warehouseData.warehouse_person);
                        $('#phone_warehouse').val(warehouseData.warehouse_contact_person);
                        $('#email_warehouse').val(warehouseData.warehouse_contact_email_person);
                        
                        // Set the selected client in the dropdown
                        $('#client-id').val(warehouseData.client_id).prop('selected', true).prop('disabled', true);
                        $('#sameAsPickup').prop('disabled', false);
        
                        // Populate return details
                        $('#returnAddressLine').val(warehouseData.return_warehouse_address);
                        $('#return_state').val(warehouseData.return_warehouse_state);
                        $('#returnPincode').val(warehouseData.return_warehouse_pincode);
                        $('#returnCity').val(warehouseData.return_warehouse_city);
                        setActiveWorkingDays(warehouseData.working_days); // Call the function here
        
                        // Change modal title
                        $('#pickupLocationModalLabel').text('Edit Warehouse');
        
                        // Enable fields for editing
                        $('#warehouse-name').prop('disabled', false);
                        $('#warehouse_address').prop('disabled', false);
                        $('#pincodeOrigin').prop('disabled', false);
                        $('#warehouse_city').prop('disabled', false);
                        $('#state').prop('disabled', false);
                        $('#contactPersonName').prop('disabled', false);
                        $('#phone_warehouse').prop('disabled', false);
                        $('#email_warehouse').prop('disabled', false);
                        $('#returnAddressLine').prop('disabled', false);
                        $('#return_state').prop('disabled', false);
                        $('#returnPincode').prop('disabled', false);
                        $('#returnCity').prop('disabled', false);
                        $('#addWarehouseDetails').show();
        
                      // Show the modal
                    $('#pickupLocationModal').modal('show');
        
        // Add event listener for the Save button
        document.getElementById('addWarehouseDetails').addEventListener('click', function (event) {
            event.preventDefault();
        
            // Get the selected slot data from the button
            const dropdownButton = document.getElementById('defaultPickupSlotDropdown');
            const selectedSlotName = dropdownButton.getAttribute('data-slot'); // Slot value
            const selectedSlotTime = dropdownButton.getAttribute('data-time'); // Time value
            
        
            // Form data
            const warehouseDetails = {
                warehouseId: warehouseId, // Include the warehouse ID for updating
                clientSelection: document.getElementById('client-id').value,
                warehouseName: document.getElementById('warehouse-name').value,
                contactPersonName: document.getElementById('contactPersonName').value || null,
                phoneWarehouse: document.getElementById('phone_warehouse').value,
                emailWarehouse: document.getElementById('email_warehouse').value || null,
                address: document.getElementById('warehouse_address').value,
                pincode: document.getElementById('pincodeOrigin').value,
                state: document.getElementById('state').value,
                city: document.getElementById('warehouse_city').value,
                slot: selectedSlotName || null,  // Selected slot name
                time: selectedSlotTime || null,  // Selected slot time
                workingDays: getSelectedDays(), // Function to get selected working days
                returnDetails: getReturnDetails(), // Function to get return details
            };
        
            // Log the form data to verify
            console.log('Warehouse Details:', warehouseDetails);
        
            // Send the data to the backend using axios
            if (editmode === true) {
              axios
                .put(`/api/warehouses/${warehouseId}`, warehouseDetails) // Use PUT for updating
                .then((response) => {
                    console.log('Data updated successfully:', response);
                    // Show success alert using SweetAlert
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Warehouse details updated successfully.',
                        confirmButtonText: 'OK',
                    }).then(() => {
                        // Optionally, you can redirect or perform other actions here
                        window.location.href = '/warehouse'; // Redirect to warehouse page
                    });
                })
                .catch((error) => {
                    console.error('Error updating data:', error);
                    // Show error alert using SweetAlert
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: 'There was an error updating the warehouse details. Please try again.',
                        confirmButtonText: 'OK',
                    });
                });
             }
        
            axios
                .put(`/api/warehouses/${warehouseId}`, warehouseDetails) // Use PUT for updating
                .then((response) => {
                    console.log('Data updated successfully:', response);
                    // Show success alert using SweetAlert
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Warehouse details updated successfully.',
                        confirmButtonText: 'OK',
                    }).then(() => {
                        // Optionally, you can redirect or perform other actions here
                        window.location.href = '/warehouse'; // Redirect to warehouse page
                    });
                })
                .catch((error) => {
                    console.error('Error updating data:', error);
                    // Show error alert using SweetAlert
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: 'There was an error updating the warehouse details. Please try again.',
                        confirmButtonText: 'OK',
                    });
                });
        });
        })
        .catch(error => {
        console.error('Error fetching warehouse data:', error);
        });
            });
        
            // Handle View button click
            $('.btn-view').on('click', function() {
                const warehouseId = $(this).data('id');
                
                // Fetch warehouse data based on warehouseId using Axios
                axios.get(`/api/warehouses/${warehouseId}`)
                    .then(response => {
                        const warehouseData = response.data;
        
                        // Populate the modal fields with the warehouse data
                         // Populate the modal fields with the warehouse data
                         $('#sameAsPickup').prop('checked', false);
                         
                         $('#warehouse-name').val(warehouseData.warehouse_name).prop('disabled', true);
                    $('#warehouse_address').val(warehouseData.warehouse_address).prop('disabled', true);
                    $('#pincodeOrigin').val(warehouseData.warehouse_pincode).prop('disabled', true);
                    $('#warehouse_city').val(warehouseData.warehouse_city).prop('disabled', true);
                    $('#state').val(warehouseData.warehouse_state).prop('disabled', true);
                    $('#contactPersonName').val(warehouseData.warehouse_person).prop('disabled', true);
                    $('#phone_warehouse').val(warehouseData.warehouse_contact_person).prop('disabled', true);
                    $('#email_warehouse').val(warehouseData.warehouse_contact_email_person).prop('disabled', true);
                    
                    // Set the selected client in the dropdown
                    $('#client-id').val(warehouseData.client_id).prop('selected', true).prop('disabled', true); // Disable dropdown
        
                    // Populate return details
                    $('#returnAddressLine').val(warehouseData.return_warehouse_address).prop('disabled', true);
                    $('#return_state').val(warehouseData.return_warehouse_state).prop('disabled', true);
                    $('#returnPincode').val(warehouseData.return_warehouse_pincode).prop('disabled', true);
                    $('#returnCity').val(warehouseData.return_warehouse_city).prop('disabled', true);
                    $('#sameAsPickup').prop('disabled', true);  // Enable checkbox for editing
                    
                    // Set active working days
                    setActiveWorkingDays(warehouseData.working_days); // Call the function here
        
                    // Change modal title
                    $('#pickupLocationModalLabel').text('View Warehouse');
        
                    // Hide the Save button
                    $('#addWarehouseDetails').hide(); // Assuming this is the ID of the Save button
        
                    // Show the modal
                    $('#pickupLocationModal').modal('show');
                    })
                    .catch(error => {
                        console.error('Error fetching warehouse data:', error);
                    });
            });
        });
        </script>
        <script>
          const saveButton = document.getElementById('addWarehouseDetails');
          if (saveButton) {
            saveButton.addEventListener('click', function (event) {
          event.preventDefault();
        
          // Get the selected slot data from the button
          const dropdownButton = document.getElementById('defaultPickupSlotDropdown');
          const selectedSlotName = dropdownButton ? dropdownButton.getAttribute('data-slot') : null; // Slot value
          const selectedSlotTime = dropdownButton ? dropdownButton.getAttribute('data-time') : null; // Time value
         
          // Validate required fields before proceeding
          const requiredFields = {
            'warehouse-name': 'Warehouse Name',
            'phone_warehouse': 'Phone Number',
            'email_warehouse': 'Email',
            'warehouse_address': 'Address',
            'pincodeOrigin': 'Pincode',
            'state': 'State',
            'warehouse_city': 'City'
          };
          
          const missingFields = [];
          for (const [fieldId, fieldName] of Object.entries(requiredFields)) {
            const field = document.getElementById(fieldId);
            if (!field || !field.value || field.value.trim() === '') {
              missingFields.push(fieldName);
            }
          }
          
          if (missingFields.length > 0) {
            Swal.fire({
              html: `
                <div class="card" style="background: linear-gradient(179deg, rgb(255 255 255 / 26%), rgb(81 110 221 / 47%));
                  border-radius: 20px;
                  padding: 20px;
                  text-align: center;
                  color: #d1e7f3;
                  width: 100%;
                  max-width: max-content;
                  margin: 0 auto;
                  display: flex;
                  justify-content: center;">
                  <h6 style="font-size: 18px;font-weight: 600;margin-bottom: 10px;text-transform: capitalize;color:#ffffff;"> <i class="fas fa-exclamation-circle"></i> Required Fields Missing</h6>
                  <p style="font-size: 10px;font-weight: 400;margin-bottom: 12px;text-align: left;text-transform: capitalize;">
                    Please fill in the following required fields:<br>
                    • ${missingFields.join('<br>• ')}
                  </p>
                  <button class="btn btn-custom" style="background-color: rgba(255, 255, 255, 0.2); border: none; border-radius: 20px; color: #d1e7f3; padding: 10px 20px; width: 100%;" onclick="Swal.close()">
                    OK
                  </button>
                </div>
              `,
              showConfirmButton: false,
              background: 'rgb(19 36 74)',
              customClass: {
                popup: 'border-0',
                container: 'border-radius: 50px; display: flex !important; justify-content: center;'
              }
            });
            return;
          }
        
          // Form data with null checks
          const warehouseDetails = {
            warehouseName: document.getElementById('warehouse-name')?.value || '',
            contactPersonName: document.getElementById('contactPersonName')?.value || '',
            phoneWarehouse: document.getElementById('phone_warehouse')?.value || '',
            emailWarehouse: document.getElementById('email_warehouse')?.value || '',
            address: document.getElementById('warehouse_address')?.value || '',
            pincode: document.getElementById('pincodeOrigin')?.value || '',
            state: document.getElementById('state')?.value || '',
            city: document.getElementById('warehouse_city')?.value || '',
            slot: selectedSlotName || '',
            time: selectedSlotTime || '',
            workingDays: getSelectedDays() || [],
            returnDetails: getReturnDetails() || {},
          };
          
          // Log the form data to verify
          console.log('Warehouse Details:', warehouseDetails);
        
            // Send the data to the backend using axios
            if (editmode === false) {
              axios
              .post('/add_warehouse', warehouseDetails)
              .then((response) => {
                console.log('Data saved successfully:', response);
                // Show success alert using SweetAlert
                Swal.fire({
                  html: `
                    <div class="card" style="background: linear-gradient(179deg, rgb(255 255 255 / 26%), rgb(81 110 221 / 47%));
            border-radius: 20px;
            padding: 20px;
            text-align: center;
            color: #d1e7f3;
            width: 100%;
            max-width: max-content;
            margin: 0 auto;
            display: flex;
            justify-content: center;">
                      <h6 style="font-size: 18px;font-weight: 600;margin-bottom: 10px;text-transform: capitalize;color:#ffffff;"> <i class="fas fa-check-circle"></i> Success!</h6>
                      <p style="font-size: 10px;font-weight: 400;margin-bottom: 12px;text-align: left;text-transform: capitalize;">
                        ${editmode ? 'Warehouse details updated successfully.' : 'Warehouse details saved successfully.'}
                      </p>
                      <button class="btn btn-custom" style="background-color: rgba(255, 255, 255, 0.2); border: none; border-radius: 20px; color: #d1e7f3; padding: 10px 20px; width: 100%;" onclick="Swal.close()">
                        OK
                      </button>
                    </div>
                  `,
                  showConfirmButton: false,
                  background: 'rgb(19 36 74)', 
                  customClass: {
                    popup: 'border-0',
                    container: 'border-radius: 50px; display: flex !important; justify-content: center;'
                  }
                }).then(() => {
                  window.location.href = '/warehouse';
                  document.getElementById('warehouseForm').reset();
                  closePopup();
                });
              })
              .catch((error) => {
                console.error('Error saving data:', error);
                console.log('Error response:', error.response);
                console.log('Error response data:', error.response?.data);
                
                if (error.response && error.response.data && error.response.data.errors) {
                  // Handle validation errors
                  const validationErrors = error.response.data.errors.errors;
                  let errorMessage = '<ul style="text-align: left; list-style-type: none; padding-left: 0;">';
                  validationErrors.forEach(err => {
                    errorMessage += `<li>• ${err.message}</li>`;
                  });
                  errorMessage += '</ul>';
        
                  Swal.fire({
                    html: `
                      <div class="card" style="background: linear-gradient(179deg, rgb(255 255 255 / 26%), rgb(81 110 221 / 47%));
                        border-radius: 20px;
                        padding: 20px;
                        text-align: center;
                        color: #d1e7f3;
                        width: 100%;
                        max-width: max-content;
                        margin: 0 auto;
                        display: flex;
                        justify-content: center;">
                        <h6 style="font-size: 18px;font-weight: 600;margin-bottom: 10px;text-transform: capitalize;color:#ffffff;"> <i class="fas fa-exclamation-circle"></i> Oops! Seems like you missed something</h6>
                        <p style="font-size: 10px;font-weight: 400;margin-bottom: 12px;text-align: left;text-transform: capitalize;">
                          ${errorMessage}
                        </p>
                        <button class="btn btn-custom" style="background-color: rgba(255, 255, 255, 0.2); border: none; border-radius: 20px; color: #d1e7f3; padding: 10px 20px; width: 100%;" onclick="Swal.close()">
                          OK
                        </button>
                      </div>
                    `,
                    showConfirmButton: false,
                    background: 'rgb(19 36 74)',
                    customClass: {
                      popup: 'border-0',
                      container: 'border-radius: 50px; display: flex !important; justify-content: center;'
                    }
                  });
                } else if (error.response && error.response.data) {
                  // Handle API errors (like Delhivery API errors)
                  let errorMessage = 'There was an error saving the warehouse details.';
                  let errorTitle = 'API Error';
                  
                  if (error.response.data.error) {
                    errorMessage = error.response.data.error;
                  } else if (error.response.data.message) {
                    errorMessage = error.response.data.message;
                  }
                  
                  // Check if it's a specific Delhivery error
                  if (error.response.data.type === 'api_error') {
                    errorTitle = 'Delhivery API Error';
                    // Format the error message for better readability
                    if (errorMessage.includes('already exists')) {
                      errorMessage = 'A warehouse with this name already exists in Delhivery system. Please use a different name.';
                    } else if (errorMessage.includes('Transaction Failed')) {
                      errorMessage = 'Transaction failed: ' + errorMessage.replace('Transaction Failed: ', '');
                    }
                  }
                  
                  Swal.fire({
                    html: `
                      <div class="card" style="background: linear-gradient(179deg, rgb(255 255 255 / 26%), rgb(81 110 221 / 47%));
                        border-radius: 20px;
                        padding: 20px;
                        text-align: center;
                        color: #d1e7f3;
                        width: 100%;
                        max-width: max-content;
                        margin: 0 auto;
                        display: flex;
                        justify-content: center;">
                        <h6 style="font-size: 18px;font-weight: 600;margin-bottom: 10px;text-transform: capitalize;color:#ffffff;"> <i class="fas fa-exclamation-circle"></i> ${errorTitle}</h6>
                        <p style="font-size: 10px;font-weight: 400;margin-bottom: 12px;text-align: left;text-transform: capitalize;">
                          ${errorMessage}
                        </p>
                        <button class="btn btn-custom" style="background-color: rgba(255, 255, 255, 0.2); border: none; border-radius: 20px; color: #d1e7f3; padding: 10px 20px; width: 100%;" onclick="Swal.close()">
                          OK
                        </button>
                      </div>
                    `,
                    showConfirmButton: false,
                    background: 'rgb(19 36 74)',
                    customClass: {
                      popup: 'border-0', 
                      container: 'border-radius: 50px; display: flex !important; justify-content: center;'
                    }
                  });
                } else if (error.code === 'NETWORK_ERROR' || error.message.includes('Network Error')) {
                  // Handle network errors
                  Swal.fire({
                    html: `
                      <div class="card" style="background: linear-gradient(179deg, rgb(255 255 255 / 26%), rgb(81 110 221 / 47%));
                        border-radius: 20px;
                        padding: 20px;
                        text-align: center;
                        color: #d1e7f3;
                        width: 100%;
                        max-width: max-content;
                        margin: 0 auto;
                        display: flex; justify-content: center;">
                        <h6 style="font-size: 18px;font-weight: 600;margin-bottom: 10px;text-transform: capitalize;color:#ffffff;"> <i class="fas fa-wifi"></i> Network Error</h6>
                        <p style="font-size: 10px;font-weight: 400;margin-bottom: 12px;text-align: left;text-transform: capitalize;">
                          Please check your internet connection and try again.
                        </p>
                        <button class="btn btn-custom" style="background-color: rgba(255, 255, 255, 0.2); border: none; border-radius: 20px; color: #d1e7f3; padding: 10px 20px; width: 100%;" onclick="Swal.close()">
                          OK
                        </button>
                      </div>
                    `,
                    showConfirmButton: false,
                    background: 'rgb(19 36 74)',
                    customClass: {
                      popup: 'border-0', 
                      container: 'border-radius: 50px; display: flex !important; justify-content: center;'
                    }
                  });
                } else {
                  // Show generic error alert for other errors
                  Swal.fire({
                    html: `
                      <div class="card" style="background: linear-gradient(179deg, rgb(255 255 255 / 26%), rgb(81 110 221 / 47%));
                        border-radius: 20px;
                        padding: 20px;
                        text-align: center;
                        color: #d1e7f3;
                        width: 100%;
                        max-width: max-content;
                        margin: 0 auto;
                        display: flex; justify-content: center;">
                        <h6 style="font-size: 18px;font-weight: 600;margin-bottom: 10px;text-transform: capitalize;color:#ffffff;"> <i class="fas fa-exclamation-circle"></i> Error!</h6>
                        <p style="font-size: 10px;font-weight: 400;margin-bottom: 12px;text-align: left;text-transform: capitalize;">
                          ${error.message || 'There was an error saving the warehouse details. Please try again.'}
                        </p>
                        <button class="btn btn-custom" style="background-color: rgba(255, 255, 255, 0.2); border: none; border-radius: 20px; color: #d1e7f3; padding: 10px 20px; width: 100%;" onclick="Swal.close()">
                          OK
                        </button>
                      </div>
                    `,
                    showConfirmButton: false,
                    background: 'rgb(19 36 74)',
                    customClass: {
                      popup: 'border-0', 
                      container: 'border-radius: 50px; display: flex !important; justify-content: center;'
                    }
                  });
                }
              });
            }
            
          });
        }
        
        </script>
        <!-- defoult pickup slot selection js -->
        
        <!-- JavaScript to handle slot selection -->
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                // Handle slot selection
                document.querySelectorAll('.dropdown-item[data-slot]').forEach(item => {
                    item.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        
                        // Get the selected slot's name and time
                        const slotName = this.getAttribute('data-slot');
                        const slotTime = this.getAttribute('data-time');
                        const slotIconClass = this.querySelector('i').className;
                        
                        // Update the selected slot display
                        const selectedSlotName = document.getElementById('selectedSlotName');
                        if (selectedSlotName) {
                            selectedSlotName.textContent = slotName;
                            selectedSlotName.setAttribute('data-slot', slotName);
                            selectedSlotName.setAttribute('data-time', slotTime);
                        }
                        
                        // Update the dropdown button icon if it exists
                        const dropdownButton = document.getElementById('defaultPickupSlotDropdown');
                        if (dropdownButton) {
                            const iconElement = dropdownButton.querySelector('i.fas, i.fa-solid');
                            if (iconElement) {
                                iconElement.setAttribute('class', slotIconClass);
                                iconElement.style.display = 'inline-block';
                            }
                            
                            // Store the selected slot data on the button
                            dropdownButton.setAttribute('data-slot', slotName);
                            dropdownButton.setAttribute('data-time', slotTime);
                        }
                        
                        // Close the dropdown
                        const dropdownMenu = this.closest('.dropdown-menu');
                        if (dropdownMenu) {
                            dropdownMenu.classList.remove('show');
                        }
                        
                        console.log('Slot selected:', slotName, 'Time:', slotTime);
                    });
                });
                
                // Prevent dropdown from closing when clicking inside
                document.querySelectorAll('.dropdown-menu').forEach(menu => {
                    menu.addEventListener('click', function(e) {
                        e.stopPropagation();
                    });
                });
            });
        </script>
        <!-- defoult pickup slot selection end -->
        <!-- return modal form js start -->
        <script>
          document.addEventListener("DOMContentLoaded", function () {
            const sameAsPickupCheckbox = document.getElementById("sameAsPickup");
            const returnAddressFields = document.querySelectorAll(
              "#returnAddressLine,#state #returnPincode, #returnCity,#return_state"
            );
        
            // Add event listener for checkbox
            sameAsPickupCheckbox.addEventListener("change", function () {
              if (this.checked) {
                // Hide return fields
                returnAddressFields.forEach((field) => {
                  field.closest(".row").style.display = "none";
                });
              } else {
                // Show return fields
                returnAddressFields.forEach((field) => {
                  field.closest(".row").style.display = "block";
                });
              }
            });
          });
function toggleDay(button) {
  // Just toggle custom class
  button.classList.toggle('activeDaysBtn');
}

function getActiveDays() {

}

        
        </script>
        <!-- return form js end -->
        
        <!-- jecc -->
        
        <!-- cjcnasc -->
        
        <script>
          document.getElementById('open-popup').addEventListener('click', () => {
            document.getElementById('popup').style.display = 'flex';
            console.log('krishna calling');
          });
          function closePopup() {
            document.getElementById('popup').style.display = 'none';
            document.getElementById('toggleButton').style.display = 'block';
            document.getElementById('toggleSection').style.display = 'none';
          }
          document
            .getElementById('toggleButton')
            .addEventListener('click', function () {
              document.getElementById('toggleSection').style.display = 'block';
              document.getElementById('toggleButton').style.display = 'none';
            });
        
          document
            .getElementById('return_return-same')
            .addEventListener('change', function () {
              if (this.checked) {
                // Get values from the pickup address section
                const warehouseName = document.getElementById('warehouse-name').value;
                const pincode = document.getElementById('pincodeOrigin').value;
                // const country = document.getElementById('country').value;
                const state = document.getElementById('warehouse_state').value;
                const city = document.getElementById('warehouse_city').value;
                const address = document.getElementById('warehouse_address').value;
                const contactName = document.getElementById('contact-name').value;
                const phone = document.getElementById('phone_warehouse').value;
                const email = document.getElementById('email_warehouse').value;
                const fromTime = document.getElementById('from-time').value;
                const toTime = document.getElementById('to-time').value;
                const days = document.getElementById('days').value;
                const slot = document.getElementById('slot').value;
        
                // Set values in the return address section
                document.getElementById('warehouse_return_name').value = warehouseName;
                document.getElementById('return_pickup-pincode').value = pincode;
                document.getElementById('return_country').value = country;
                document.getElementById('return_warehouse_state').value = state;
                document.getElementById('return_warehouse_city').value = city;
                document.getElementById('return_warehouse_address').value = address;
                document.getElementById('return_contact-name').value = contactName;
                document.getElementById('return_phone_warehouse').value = phone;
                document.getElementById('return_email_warehouse').value = email;
                document.getElementById('return_from-time').value = fromTime;
                document.getElementById('return_to-time').value = toTime;
                document.getElementById('return_days').value = days;
                document.getElementById('return_slot').value = slot;
              } else {
                // Clear return address section if checkbox is unchecked
                document.getElementById('warehouse_return_name').value = '';
                document.getElementById('return_pickup-pincode').value = '';
                document.getElementById('return_country').value = '';
                document.getElementById('return_warehouse_state').value = '';
                document.getElementById('return_warehouse_city').value = '';
                document.getElementById('return_warehouse_address').value = '';
                document.getElementById('return_contact-name').value = '';
                document.getElementById('return_phone_warehouse').value = '';
                document.getElementById('return_email_warehouse').value = '';
                document.getElementById('return_from-time').value = '';
                document.getElementById('return_to-time').value = '';
                document.getElementById('return_days').value = '';
                document.getElementById('return_slot').value = '';
              }
            });
          $(document).ready(function () {
            $('#datatable_2').DataTable({
              ordering: true, // enable sorting
              searching: true, // enable searching
              lengthChange: true, // disable changing page length
              info: true, // disable showing entries info
              paging: true, // disable pagination
            });
          });
        </script>
        <script>
          // Enable toggle functionality for switches
          function toggleWarehouseStatus(id, isActive, type) {
          if (type === 'pickup') {
            togglePickupStatus(id, isActive);
          } else if (type === 'return') {
            toggleReturnStatus(id, isActive);
          }
        }
        // Function to toggle status for return
        function toggleReturnStatus(id, isActive) {
          axios.post('/update-return-status', { id: id, is_active: isActive ? 1 : 0 })
            .then(response => {
              console.log(response.data.success);
              // Handle success (e.g., show success message or update UI)
            })
            .catch(error => {
              console.error('Error:', error.response.data.error);
              // Handle error (e.g., show error message)
            });
        }
        
        // Function to toggle status for pickup
        function togglePickupStatus(id, isActive) {
          axios.post('/update-pickup-status', { id: id, is_active: isActive ? 1 : 0 })
            .then(response => {
              console.log(response.data.success);
              // Handle success (e.g., show success message or update UI)
            })
            .catch(error => {
              console.error('Error:', error.response.data.error);
              // Handle error (e.g., show error message)
            });
        }
        // Event listener for form submission
        
        /**
         * Helper function to get selected working days
         */

         function getSelectedDays() {
          try {
            // Update and log selected days
              const activeButtons = document.querySelectorAll('.d-flex .activeDaysBtn');
            return Array.from(activeButtons).map(btn => btn.dataset.day);          
          } catch (error) {
            console.error('Error getting selected days:', error);
            return [];
          }
        }
                
        /**
         * Helper function to get return address details
         */
        function getReturnDetails() {
          try {
            const sameAsPickup = document.getElementById('sameAsPickup');
            if (!sameAsPickup) return {};
            
            if (sameAsPickup.checked) {
              return {
                address: document.getElementById('warehouse_address')?.value || '',
                pincode: document.getElementById('pincodeOrigin')?.value || '',
                city: document.getElementById('warehouse_city')?.value || '',
                state: document.getElementById('state')?.value || '',
              };
            }
        
            return {
              address: document.getElementById('returnAddressLine')?.value || '',
              pincode: document.getElementById('returnPincode')?.value || '',
              city: document.getElementById('returnCity')?.value || '',
              state: document.getElementById('return_state')?.value || ''
            };
          } catch (error) {
            console.error('Error getting return details:', error);
            return {};
          }
        }

        // Unified slot selection handler
        document.addEventListener('DOMContentLoaded', function() {
          console.log('DOM loaded, initializing slot selection...');
          
          // Add specific CSS to ensure dropdown works
          const style = document.createElement('style');
          style.textContent = `
            #defaultPickupSlotDropdown {
              position: relative;
              z-index: 1001;
            }
            #slot.dropdown-menu {
              display: none;
              position: absolute;
              top: 100%;
              left: 0;
              z-index: 1002;
              background: #fff;
              border: 1px solid #ddd;
              border-radius: 8px;
              box-shadow: 0 4px 12px rgba(0,0,0,0.15);
              min-width: 200px;
              padding: 8px 0;
            }
            #slot.dropdown-menu.show {
              display: block !important;
            }
            .dropdown-item[data-slot] {
              cursor: pointer;
            }
            .dropdown-item[data-slot]:hover {
              background-color: #f8f9fa;
            }
          `;
          document.head.appendChild(style);
          
          // Handle slot selection when dropdown items are clicked
          document.querySelectorAll('.dropdown-item[data-slot]').forEach(item => {
            item.addEventListener('click', function(e) {
              e.preventDefault();
              e.stopPropagation();
              
              console.log('Slot item clicked:', this.getAttribute('data-slot'));
              
              // Get the selected slot's data
              const slotName = this.getAttribute('data-slot');
              const slotTime = this.getAttribute('data-time');
              const slotIconClass = this.querySelector('i').className;
              
              // Update the selected slot display
              const selectedSlotName = document.getElementById('selectedSlotName');
              if (selectedSlotName) {
                selectedSlotName.textContent = slotName;
                selectedSlotName.setAttribute('data-slot', slotName);
                selectedSlotName.setAttribute('data-time', slotTime);
              }
              
              // Update the dropdown button
              const dropdownButton = document.getElementById('defaultPickupSlotDropdown');
              if (dropdownButton) {
                dropdownButton.setAttribute('data-slot', slotName);
                dropdownButton.setAttribute('data-time', slotTime);
                
                // Update the icon if it exists
                const iconElement = dropdownButton.querySelector('i.fas, i.fa-solid');
                if (iconElement) {
                  iconElement.className = slotIconClass;
                }
              }
              
              // Close the dropdown
              const dropdownMenu = this.closest('.dropdown-menu');
              if (dropdownMenu) {
                dropdownMenu.classList.remove('show');
                console.log('Dropdown closed');
              }
              
              console.log('Slot selected:', slotName, 'Time:', slotTime);
            });
          });
          
          // Ensure dropdown can be opened by preventing interference
          const dropdownButton = document.getElementById('defaultPickupSlotDropdown');
          if (dropdownButton) {
            console.log('Dropdown button found:', dropdownButton);
            
            // Remove any existing event listeners that might interfere
            dropdownButton.removeEventListener('click', dropdownButton._clickHandler);
            
            // Add a simple click handler to ensure dropdown opens
            dropdownButton._clickHandler = function(e) {
              console.log('Dropdown button clicked, toggling...');
              const dropdownMenu = document.getElementById('slot');
              if (dropdownMenu) {
                const isOpen = dropdownMenu.classList.contains('show');
                if (isOpen) {
                  dropdownMenu.classList.remove('show');
                } else {
                  dropdownMenu.classList.add('show');
                }
                console.log('Dropdown toggled, isOpen:', !isOpen);
              }
            };
            
            dropdownButton.addEventListener('click', dropdownButton._clickHandler);
          } else {
            console.error('Dropdown button not found!');
          }
          
          // Prevent dropdown from closing when clicking inside
          const dropdownMenu = document.getElementById('slot');
          if (dropdownMenu) {
            dropdownMenu.addEventListener('click', function(e) {
              e.stopPropagation();
            });
          }
        });
        // Function to set active working days
        function setActiveWorkingDays(workingDays) {
            // Remove active class from all buttons first
            $('.btn-outline-primary').removeClass('active');
        
            // Split the workingDays string into an array
            const daysArray = workingDays.split(', ').map(day => day.trim());
        
            // Add the active class to the buttons that match the days in the array
            daysArray.forEach(day => {
                $(`button[data-day="${day}"]`).addClass('active');
            });
        }
        </script>
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script src="https://cdn.datatables.net/1.12.1/js/jquery.dataTables.min.js"></script>
        <script>
          $(document).ready(function () {
            // Check if DataTable is already initialized
            if (!$.fn.dataTable.isDataTable('#datatable_2')) {
              // Initialize DataTable only if it's not already initialized
              var table = $('#datatable_2').DataTable({
                "ordering": false,
                "searching": true,
                "lengthChange": false,
                "info": true,
                "paging": true,
                "dom": '<"d-flex align-items-center gap-3"<"flex-grow-1">>lrtip',
                "language": {
                  "lengthMenu": `<div style="float: right">Showing <select class='form-select' style='background-color: #e3f2fd; border-color: #90caf9; color: #1976d2; display: inline-block; width:80px; text-align-last: center; padding-right: 25px;'><option value='10'>10</option><option value='25'>25</option><option value='50'>50</option><option value='100'>100</option></select> of Total Entries</div>`,
                  "info": "<div style='float: left'>Showing _START_ to _END_ of _TOTAL_ entries</div>"
                },
                "pagingType": "full_numbers",
                "pageLength": 10,
                "drawCallback": function() {
                  $('.paginate_button').addClass('btn btn-sm').css({
                    'background-color': '#e3f2fd',
                    'border-color': '#90caf9',
                    'color': '#1976d2',
                    'margin': '0 2px',
                    'border-radius': '4px'
                  });
                  
                  $('.paginate_button.current').css({
                    'background-color': '#1976d2',
                    'color': '#fff',
                    'border-color': '#1976d2'
                  });
        
                  $('.paginate_button.disabled').css({
                    'opacity': '0.5',
                    'cursor': 'not-allowed'
                  });
                }
              });
            }
        
            // Custom search functionality when user types in the search input
            $('#search-input').on('keyup', function () {
              var searchValue = $(this).val();
              $('#datatable_2').DataTable().search(searchValue).draw();
            });
        
            // Optional: Search when the search button is clicked
            $('#button-addon2').on('click', function () {
              var searchValue = $('#search-input').val();
              $('#datatable_2').DataTable().search(searchValue).draw();
            });
          });
        </script>
        <!-- App js -->
        </div>

        <!-- FOOTER -->
        <%- include('../partials/footer') %>
      </div>
    </div>

    <!-- SCRIPTS (Always at the bottom before </body>) -->
    <script src="/js/main.js"></script>
    
    <!-- Warehouse Card Functionality -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        let editmode = false;
        
        // Reset modal function
        function resetModal() {
          document.getElementById('warehouseForm').reset();
          editmode = false;
          document.getElementById('pickupLocationModalLabel').textContent = 'Add Warehouse Location';
          document.getElementById('submitBtn').textContent = 'Submit';
          
          // Reset working days
          document.querySelectorAll('.btn-outline-primary').forEach(btn => {
            btn.classList.remove('active');
          });
          
          // Reset return address checkbox
          const returnAddressCheckbox = document.getElementById('returnAddressCheckbox');
          if (returnAddressCheckbox) {
            returnAddressCheckbox.checked = false;
            const returnAddressFields = document.getElementById('returnAddressFields');
            if (returnAddressFields) {
              returnAddressFields.style.display = 'none';
            }
          }
        }
        
        // Add New Warehouse button
        const addNewWarehouseBtn = document.querySelector('button[data-bs-target="#pickupLocationModal"]');
        if (addNewWarehouseBtn) {
          addNewWarehouseBtn.addEventListener('click', function() {
            resetModal();
            const modal = new bootstrap.Modal(document.getElementById('pickupLocationModal'));
            modal.show();
          });
        }
        
        // Event delegation for edit buttons
        document.addEventListener('click', function(e) {
          if (e.target.closest('.btn-edit')) {
            const button = e.target.closest('.btn-edit');
            const id = button.getAttribute('data-id');
            const type = button.getAttribute('data-type');
            
            editmode = true;
            document.getElementById('pickupLocationModalLabel').textContent = 'Edit Warehouse Location';
            document.getElementById('submitBtn').textContent = 'Update';
            
            // Fetch warehouse data
            axios.get(`/api/warehouses/${id}`)
              .then(response => {
                if (response.data.success) {
                  const data = response.data.data;
                  
                  // Populate form fields
                  document.getElementById('warehouse-name').value = data.warehouse_name || '';
                  document.getElementById('warehouse-address').value = data.warehouse_address || '';
                  document.getElementById('warehouse-pincode').value = data.warehouse_pincode || '';
                  document.getElementById('warehouse-city').value = data.warehouse_city || '';
                  document.getElementById('warehouse-state').value = data.warehouse_state || '';
                  document.getElementById('warehouse-person').value = data.warehouse_person || '';
                  document.getElementById('warehouse-contact-person').value = data.warehouse_contact_person || '';
                  document.getElementById('working-hours-from').value = data.working_hours_from || '';
                  document.getElementById('working-hours-to').value = data.working_hours_to || '';
                  document.getElementById('preferred-slot').value = data.preferred_slot || '';
                  
                  // Set working days
                  if (data.working_days) {
                    setActiveWorkingDays(data.working_days);
                  }
                  
                  // Set return address details
                  if (data.return_address_details) {
                    const returnAddressCheckbox = document.getElementById('returnAddressCheckbox');
                    if (returnAddressCheckbox) {
                      returnAddressCheckbox.checked = true;
                      const returnAddressFields = document.getElementById('returnAddressFields');
                      if (returnAddressFields) {
                        returnAddressFields.style.display = 'block';
                      }
                    }
                    
                    // Populate return address fields
                    if (data.return_address_details.return_address) {
                      document.getElementById('return-address').value = data.return_address_details.return_address;
                    }
                    if (data.return_address_details.return_pincode) {
                      document.getElementById('return-pincode').value = data.return_address_details.return_pincode;
                    }
                    if (data.return_address_details.return_city) {
                      document.getElementById('return-city').value = data.return_address_details.return_city;
                    }
                    if (data.return_address_details.return_state) {
                      document.getElementById('return-state').value = data.return_address_details.return_state;
                    }
                  }
                  
                  // Store the ID for update
                  document.getElementById('warehouseForm').setAttribute('data-edit-id', id);
                  
                  // Show modal
                  const modal = new bootstrap.Modal(document.getElementById('pickupLocationModal'));
                  modal.show();
                } else {
                  Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: response.data.message || 'Failed to fetch warehouse data'
                  });
                }
              })
              .catch(error => {
                console.error('Error fetching warehouse data:', error);
                Swal.fire({
                  icon: 'error',
                  title: 'Network Error',
                  text: 'Failed to fetch warehouse data. Please try again.'
                });
              });
          }
          
          // Event delegation for view buttons
          if (e.target.closest('.btn-view')) {
            const button = e.target.closest('.btn-view');
            const id = button.getAttribute('data-id');
            const type = button.getAttribute('data-type');
            
            // Fetch and display warehouse details
            axios.get(`/api/warehouses/${id}`)
              .then(response => {
                if (response.data.success) {
                  const data = response.data.data;
                  
                  Swal.fire({
                    title: data.warehouse_name,
                    html: `
                      <div class="text-start">
                        <p><strong>Client:</strong> ${data.client_company || 'N/A'}</p>
                        <p><strong>Address:</strong> ${data.warehouse_address || 'N/A'}</p>
                        <p><strong>Pincode:</strong> ${data.warehouse_pincode || 'N/A'}</p>
                        <p><strong>City:</strong> ${data.warehouse_city || 'N/A'}</p>
                        <p><strong>State:</strong> ${data.warehouse_state || 'N/A'}</p>
                        <p><strong>Contact Person:</strong> ${data.warehouse_person || 'N/A'}</p>
                        <p><strong>Contact No:</strong> ${data.warehouse_contact_person || 'N/A'}</p>
                        <p><strong>Working Hours:</strong> ${data.working_hours_from || 'N/A'} - ${data.working_hours_to || 'N/A'}</p>
                        <p><strong>Preferred Slot:</strong> ${data.preferred_slot || 'N/A'}</p>
                        <p><strong>Working Days:</strong> ${data.working_days || 'N/A'}</p>
                      </div>
                    `,
                    icon: 'info',
                    confirmButtonText: 'Close',
                    confirmButtonColor: '#3b82f6'
                  });
                } else {
                  Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: response.data.message || 'Failed to fetch warehouse details'
                  });
                }
              })
              .catch(error => {
                console.error('Error fetching warehouse details:', error);
                Swal.fire({
                  icon: 'error',
                  title: 'Network Error',
                  text: 'Failed to fetch warehouse details. Please try again.'
                });
              });
          }
        });
        
        // Form submission
        document.getElementById('warehouseForm').addEventListener('submit', function(e) {
          e.preventDefault();
          
          const formData = new FormData(this);
          const data = Object.fromEntries(formData.entries());
          
          // Add working days
          const activeDays = Array.from(document.querySelectorAll('.btn-outline-primary.active'))
            .map(btn => btn.getAttribute('data-day'));
          data.working_days = activeDays.join(', ');
          
          // Add return address details if checkbox is checked
          const returnAddressCheckbox = document.getElementById('returnAddressCheckbox');
          if (returnAddressCheckbox && returnAddressCheckbox.checked) {
            data.return_address_details = {
              return_address: document.getElementById('return-address').value,
              return_pincode: document.getElementById('return-pincode').value,
              return_city: document.getElementById('return-city').value,
              return_state: document.getElementById('return-state').value
            };
          }
          
          const url = editmode ? `/api/warehouses/${this.getAttribute('data-edit-id')}` : '/add_warehouse';
          const method = editmode ? 'PUT' : 'POST';
          
          axios({
            method: method,
            url: url,
            data: data
          })
          .then(response => {
            if (response.data.success) {
              Swal.fire({
                icon: 'success',
                title: editmode ? 'Updated!' : 'Added!',
                text: response.data.message || (editmode ? 'Warehouse updated successfully' : 'Warehouse added successfully'),
                confirmButtonText: 'OK'
              }).then(() => {
                location.reload();
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: response.data.message || 'Operation failed'
              });
            }
          })
          .catch(error => {
            console.error('Error:', error);
            let errorMessage = 'An error occurred. Please try again.';
            
            if (error.response) {
              if (error.response.data && error.response.data.message) {
                errorMessage = error.response.data.message;
              } else if (error.response.status === 422) {
                errorMessage = 'Validation error. Please check your input.';
              } else if (error.response.status === 500) {
                errorMessage = 'Server error. Please try again later.';
              }
            } else if (error.request) {
              errorMessage = 'Network error. Please check your connection.';
            }
            
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: errorMessage
            });
          });
        });
        
        // Working days toggle
        document.addEventListener('click', function(e) {
          if (e.target.classList.contains('btn-outline-primary')) {
            e.target.classList.toggle('active');
          }
        });
        
        // Return address checkbox toggle
        const returnAddressCheckbox = document.getElementById('returnAddressCheckbox');
        if (returnAddressCheckbox) {
          returnAddressCheckbox.addEventListener('change', function() {
            const returnAddressFields = document.getElementById('returnAddressFields');
            if (returnAddressFields) {
              returnAddressFields.style.display = this.checked ? 'block' : 'none';
            }
          });
        }
        
        // Dropdown functionality for preferred slot
        const slotDropdown = document.getElementById('preferred-slot');
        if (slotDropdown) {
          slotDropdown.addEventListener('change', function() {
            // Handle slot selection
            console.log('Selected slot:', this.value);
          });
        }
      });
    </script>
  </body>
</html>
